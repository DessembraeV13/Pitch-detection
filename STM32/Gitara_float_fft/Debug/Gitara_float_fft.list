
Gitara_float_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d074  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013dd8  0800d248  0800d248  0001d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021020  08021020  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  08021020  08021020  00031020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021028  08021028  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021028  08021028  00031028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802102c  0802102c  0003102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08021030  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002324  200002b0  080212e0  000402b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025d4  080212e0  000425d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b3  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014855  00000000  00000000  00040393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003386  00000000  00000000  00054be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00057f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb1  00000000  00000000  00059178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ce2  00000000  00000000  00059e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162d3  00000000  00000000  0007eb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e26f6  00000000  00000000  00094dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf0  00000000  00000000  001774d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017d1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000454b  00000000  00000000  0017d22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d0  00000000  00000000  0018177a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002b0 	.word	0x200002b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d22c 	.word	0x0800d22c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002b4 	.word	0x200002b4
 800020c:	0800d22c 	.word	0x0800d22c

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b970 	b.w	8001040 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	460f      	mov	r7, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0xe2>
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	b143      	cbz	r3, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	f1c3 0220 	rsb	r2, r3, #32
 8000d9c:	409f      	lsls	r7, r3
 8000d9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000da2:	4317      	orrs	r7, r2
 8000da4:	409c      	lsls	r4, r3
 8000da6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000daa:	fa1f f58c 	uxth.w	r5, ip
 8000dae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db2:	0c22      	lsrs	r2, r4, #16
 8000db4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dbc:	fb01 f005 	mul.w	r0, r1, r5
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dcc:	f080 811c 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	f240 8119 	bls.w	8001008 <__udivmoddi4+0x290>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	4462      	add	r2, ip
 8000dda:	1a12      	subs	r2, r2, r0
 8000ddc:	b2a4      	uxth	r4, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dea:	fb00 f505 	mul.w	r5, r0, r5
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x90>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfa:	f080 8107 	bcs.w	800100c <__udivmoddi4+0x294>
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	f240 8104 	bls.w	800100c <__udivmoddi4+0x294>
 8000e04:	4464      	add	r4, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11e      	cbz	r6, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40dc      	lsrs	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0xbc>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80ed 	beq.w	8001002 <__udivmoddi4+0x28a>
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	fab3 f183 	clz	r1, r3
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d149      	bne.n	8000ed0 <__udivmoddi4+0x158>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	d302      	bcc.n	8000e46 <__udivmoddi4+0xce>
 8000e40:	4282      	cmp	r2, r0
 8000e42:	f200 80f8 	bhi.w	8001036 <__udivmoddi4+0x2be>
 8000e46:	1a84      	subs	r4, r0, r2
 8000e48:	eb65 0203 	sbc.w	r2, r5, r3
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4617      	mov	r7, r2
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d0e2      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	e9c6 4700 	strd	r4, r7, [r6]
 8000e58:	e7df      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e5a:	b902      	cbnz	r2, 8000e5e <__udivmoddi4+0xe6>
 8000e5c:	deff      	udf	#255	; 0xff
 8000e5e:	fab2 f382 	clz	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	2101      	movs	r1, #1
 8000e74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e78:	fb07 2015 	mls	r0, r7, r5, r2
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e82:	fb0e f005 	mul.w	r0, lr, r5
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4290      	cmp	r0, r2
 8000e96:	f200 80cb 	bhi.w	8001030 <__udivmoddi4+0x2b8>
 8000e9a:	4645      	mov	r5, r8
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eac:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x14e>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x14c>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 80bb 	bhi.w	800103a <__udivmoddi4+0x2c2>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ece:	e79f      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ed0:	f1c1 0720 	rsb	r7, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ede:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee6:	40fd      	lsrs	r5, r7
 8000ee8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	fb09 5518 	mls	r5, r9, r8, r5
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f00:	fb08 f50e 	mul.w	r5, r8, lr
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f18:	f080 8088 	bcs.w	800102c <__udivmoddi4+0x2b4>
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	f240 8085 	bls.w	800102c <__udivmoddi4+0x2b4>
 8000f22:	f1a8 0802 	sub.w	r8, r8, #2
 8000f26:	4464      	add	r4, ip
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	b29d      	uxth	r5, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f48:	d26c      	bcs.n	8001024 <__udivmoddi4+0x2ac>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	d96a      	bls.n	8001024 <__udivmoddi4+0x2ac>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f56:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	46c8      	mov	r8, r9
 8000f62:	46ae      	mov	lr, r5
 8000f64:	d356      	bcc.n	8001014 <__udivmoddi4+0x29c>
 8000f66:	d053      	beq.n	8001010 <__udivmoddi4+0x298>
 8000f68:	b156      	cbz	r6, 8000f80 <__udivmoddi4+0x208>
 8000f6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f72:	fa04 f707 	lsl.w	r7, r4, r7
 8000f76:	40ca      	lsrs	r2, r1
 8000f78:	40cc      	lsrs	r4, r1
 8000f7a:	4317      	orrs	r7, r2
 8000f7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f88:	f1c3 0120 	rsb	r1, r3, #32
 8000f8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f90:	fa20 f201 	lsr.w	r2, r0, r1
 8000f94:	fa25 f101 	lsr.w	r1, r5, r1
 8000f98:	409d      	lsls	r5, r3
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb6:	428d      	cmp	r5, r1
 8000fb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x258>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc6:	d22f      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000fc8:	428d      	cmp	r5, r1
 8000fca:	d92d      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1b49      	subs	r1, r1, r5
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe4:	4291      	cmp	r1, r2
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x282>
 8000fe8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ff0:	d216      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d914      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000ff6:	3d02      	subs	r5, #2
 8000ff8:	4462      	add	r2, ip
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001000:	e738      	b.n	8000e74 <__udivmoddi4+0xfc>
 8001002:	4631      	mov	r1, r6
 8001004:	4630      	mov	r0, r6
 8001006:	e708      	b.n	8000e1a <__udivmoddi4+0xa2>
 8001008:	4639      	mov	r1, r7
 800100a:	e6e6      	b.n	8000dda <__udivmoddi4+0x62>
 800100c:	4610      	mov	r0, r2
 800100e:	e6fb      	b.n	8000e08 <__udivmoddi4+0x90>
 8001010:	4548      	cmp	r0, r9
 8001012:	d2a9      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001014:	ebb9 0802 	subs.w	r8, r9, r2
 8001018:	eb65 0e0c 	sbc.w	lr, r5, ip
 800101c:	3b01      	subs	r3, #1
 800101e:	e7a3      	b.n	8000f68 <__udivmoddi4+0x1f0>
 8001020:	4645      	mov	r5, r8
 8001022:	e7ea      	b.n	8000ffa <__udivmoddi4+0x282>
 8001024:	462b      	mov	r3, r5
 8001026:	e794      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001028:	4640      	mov	r0, r8
 800102a:	e7d1      	b.n	8000fd0 <__udivmoddi4+0x258>
 800102c:	46d0      	mov	r8, sl
 800102e:	e77b      	b.n	8000f28 <__udivmoddi4+0x1b0>
 8001030:	3d02      	subs	r5, #2
 8001032:	4462      	add	r2, ip
 8001034:	e732      	b.n	8000e9c <__udivmoddi4+0x124>
 8001036:	4608      	mov	r0, r1
 8001038:	e70a      	b.n	8000e50 <__udivmoddi4+0xd8>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e742      	b.n	8000ec6 <__udivmoddi4+0x14e>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b0a      	cmp	r3, #10
 8001050:	d102      	bne.n	8001058 <__io_putchar+0x14>
    __io_putchar('\r');
 8001052:	200d      	movs	r0, #13
 8001054:	f7ff fff6 	bl	8001044 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001058:	1d39      	adds	r1, r7, #4
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	2201      	movs	r2, #1
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <__io_putchar+0x2c>)
 8001062:	f005 f93a 	bl	80062da <HAL_UART_Transmit>

  return 1;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000430 	.word	0x20000430
 8001074:	00000000 	.word	0x00000000

08001078 <generate_sine_table>:

void generate_sine_table(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
	for(int i = 0; i<SINE_TABLE_SIZE; i++){
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e03a      	b.n	80010fa <generate_sine_table+0x82>
		float angle = (2.0f * M_PI * i)/ (float)SINE_TABLE_SIZE;
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff facd 	bl	8000624 <__aeabi_i2d>
 800108a:	a324      	add	r3, pc, #144	; (adr r3, 800111c <generate_sine_table+0xa4>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fb32 	bl	80006f8 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <generate_sine_table+0x98>)
 80010a2:	f7ff fc53 	bl	800094c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fdfb 	bl	8000ca8 <__aeabi_d2f>
 80010b2:	4603      	mov	r3, r0
 80010b4:	60bb      	str	r3, [r7, #8]
		float sine_value = (sinf(angle) + 1.0f)/2.0f;
 80010b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ba:	f00a fb93 	bl	800b7e4 <sinf>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80010ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80010ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
		sine_table[i] = (uint16_t)(sine_value * 4095);
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001114 <generate_sine_table+0x9c>
 80010de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	b299      	uxth	r1, r3
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <generate_sine_table+0xa0>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i<SINE_TABLE_SIZE; i++){
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b2c      	cmp	r3, #44	; 0x2c
 80010fe:	ddc1      	ble.n	8001084 <generate_sine_table+0xc>
	}
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	40468000 	.word	0x40468000
 8001114:	457ff000 	.word	0x457ff000
 8001118:	20002424 	.word	0x20002424
 800111c:	54442d18 	.word	0x54442d18
 8001120:	401921fb 	.word	0x401921fb

08001124 <calculateFFT>:

void calculateFFT(float32_t inputArray[], uint16_t size, uint16_t* maxpp, float32_t* fundamental, uint16_t fs) {
 8001124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001128:	f5ad 4da1 	sub.w	sp, sp, #20608	; 0x5080
 800112c:	b081      	sub	sp, #4
 800112e:	af00      	add	r7, sp, #0
 8001130:	f107 0680 	add.w	r6, r7, #128	; 0x80
 8001134:	f846 0c6c 	str.w	r0, [r6, #-108]
 8001138:	4608      	mov	r0, r1
 800113a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800113e:	f841 2c74 	str.w	r2, [r1, #-116]
 8001142:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001146:	f842 3c78 	str.w	r3, [r2, #-120]
 800114a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800114e:	4602      	mov	r2, r0
 8001150:	f823 2c6e 	strh.w	r2, [r3, #-110]
 8001154:	466b      	mov	r3, sp
 8001156:	461e      	mov	r6, r3
	// Zmiana stanu na pinie PB10 Debug
	HAL_GPIO_TogglePin(CALCOutput_GPIO_Port, CALCOutput_Pin);
 8001158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115c:	48d3      	ldr	r0, [pc, #844]	; (80014ac <calculateFFT+0x388>)
 800115e:	f003 fb92 	bl	8004886 <HAL_GPIO_TogglePin>
	//Przekonwertowanie sygnału z uint16 na float32
    float32_t signal_float32[size];
 8001162:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001166:	f833 1c6e 	ldrh.w	r1, [r3, #-110]
 800116a:	460b      	mov	r3, r1
 800116c:	3b01      	subs	r3, #1
 800116e:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001172:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	b28b      	uxth	r3, r1
 800117a:	2200      	movs	r2, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	0143      	lsls	r3, r0, #5
 800118c:	6838      	ldr	r0, [r7, #0]
 800118e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	0142      	lsls	r2, r0, #5
 8001196:	b28b      	uxth	r3, r1
 8001198:	2200      	movs	r2, #0
 800119a:	469a      	mov	sl, r3
 800119c:	4693      	mov	fp, r2
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80011aa:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80011ae:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80011b2:	460b      	mov	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	3307      	adds	r3, #7
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	ebad 0d03 	sub.w	sp, sp, r3
 80011c0:	466b      	mov	r3, sp
 80011c2:	3303      	adds	r3, #3
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80011cc:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80011d0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 80011d2:	2300      	movs	r3, #0
 80011d4:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80011d8:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e023      	b.n	8001228 <calculateFFT+0x104>
		signal_float32[i] = inputArray[i];
 80011e0:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80011e4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80011f0:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 80011f4:	4413      	add	r3, r2
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80011fc:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001206:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8001212:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001216:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001222:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800122c:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001230:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001234:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	dbd0      	blt.n	80011e0 <calculateFFT+0xbc>
	}
	//Obliczenie wartości średniej sygnału/składowej stałej oraz jej odjęcie
    float32_t mean = 0.0f;
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001246:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800124a:	6013      	str	r3, [r2, #0]
    arm_mean_f32(signal_float32, size,  &mean);
 800124c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001250:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001254:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001258:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800125c:	4619      	mov	r1, r3
 800125e:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001262:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	f006 f9bc 	bl	80075e4 <arm_mean_f32>
    arm_offset_f32(signal_float32, -mean, signal_float32, size);
 800126c:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001270:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	eef1 7a67 	vneg.f32	s15, s15
 800127c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001280:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001284:	461a      	mov	r2, r3
 8001286:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800128a:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001298:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	f007 f9a5 	bl	80085ec <arm_offset_f32>
    //Nałożenie okna Hanna na sygnał
    float32_t signal_filtered[size];
 80012a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012a6:	f833 1c6e 	ldrh.w	r1, [r3, #-110]
 80012aa:	460b      	mov	r3, r1
 80012ac:	3b01      	subs	r3, #1
 80012ae:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80012b2:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	b28b      	uxth	r3, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	4698      	mov	r8, r3
 80012be:	4691      	mov	r9, r2
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80012cc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80012d0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80012d4:	b28b      	uxth	r3, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	461c      	mov	r4, r3
 80012da:	4615      	mov	r5, r2
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	016b      	lsls	r3, r5, #5
 80012e6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80012ea:	0162      	lsls	r2, r4, #5
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	3307      	adds	r3, #7
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	ebad 0d03 	sub.w	sp, sp, r3
 80012fa:	466b      	mov	r3, sp
 80012fc:	3303      	adds	r3, #3
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001306:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800130a:	6013      	str	r3, [r2, #0]
	if(size==BUFLEN){
 800130c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001310:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001318:	d111      	bne.n	800133e <calculateFFT+0x21a>
		arm_mult_f32(signal_float32, hannWindow1, signal_filtered, size);
 800131a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800131e:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001322:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001326:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	4960      	ldr	r1, [pc, #384]	; (80014b0 <calculateFFT+0x38c>)
 800132e:	f507 40a0 	add.w	r0, r7, #20480	; 0x5000
 8001332:	f100 0054 	add.w	r0, r0, #84	; 0x54
 8001336:	6800      	ldr	r0, [r0, #0]
 8001338:	f007 f98e 	bl	8008658 <arm_mult_f32>
 800133c:	e029      	b.n	8001392 <calculateFFT+0x26e>
	}else if(size==2*BUFLEN)
 800133e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001342:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134a:	d111      	bne.n	8001370 <calculateFFT+0x24c>
		arm_mult_f32(signal_float32, hannWindow2, signal_filtered, size);
 800134c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001350:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001354:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001358:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	4955      	ldr	r1, [pc, #340]	; (80014b4 <calculateFFT+0x390>)
 8001360:	f507 40a0 	add.w	r0, r7, #20480	; 0x5000
 8001364:	f100 0054 	add.w	r0, r0, #84	; 0x54
 8001368:	6800      	ldr	r0, [r0, #0]
 800136a:	f007 f975 	bl	8008658 <arm_mult_f32>
 800136e:	e010      	b.n	8001392 <calculateFFT+0x26e>
	else arm_mult_f32(signal_float32, hannWindow3, signal_filtered, size);
 8001370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001374:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 8001378:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 800137c:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	494d      	ldr	r1, [pc, #308]	; (80014b8 <calculateFFT+0x394>)
 8001384:	f507 40a0 	add.w	r0, r7, #20480	; 0x5000
 8001388:	f100 0054 	add.w	r0, r0, #84	; 0x54
 800138c:	6800      	ldr	r0, [r0, #0]
 800138e:	f007 f963 	bl	8008658 <arm_mult_f32>
	//Znalezienie wartości międzyszczytowych
	float32_t max;
	float32_t min;
	uint32_t maxIndex;
	uint32_t minIndex;
	arm_max_f32(signal_filtered, size, &max, &maxIndex);
 8001392:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001396:	f833 1c6e 	ldrh.w	r1, [r3, #-110]
 800139a:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800139e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80013a2:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80013a6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80013aa:	f507 40a0 	add.w	r0, r7, #20480	; 0x5000
 80013ae:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 80013b2:	6800      	ldr	r0, [r0, #0]
 80013b4:	f006 f94a 	bl	800764c <arm_max_f32>
	arm_min_f32(signal_filtered, size, &min, &minIndex);
 80013b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80013bc:	f833 1c6e 	ldrh.w	r1, [r3, #-110]
 80013c0:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80013c4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80013c8:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80013cc:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80013d0:	f507 40a0 	add.w	r0, r7, #20480	; 0x5000
 80013d4:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 80013d8:	6800      	ldr	r0, [r0, #0]
 80013da:	f006 f89b 	bl	8007514 <arm_min_f32>

	//Obliczenie FFT
	float32_t signal_fft[FFTBUFLEN] = {0};
 80013de:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80013e2:	3b50      	subs	r3, #80	; 0x50
 80013e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f008 faca 	bl	8009984 <memset>
	for(int i = 0; i<size; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80013f6:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e023      	b.n	8001446 <calculateFFT+0x322>
		signal_fft[i]=signal_filtered[i];
 80013fe:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001402:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800140c:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 800141c:	4619      	mov	r1, r3
 800141e:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001422:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	3b50      	subs	r3, #80	; 0x50
 800142e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<size; i++)
 8001430:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001434:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001440:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800144a:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 800144e:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001452:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbd0      	blt.n	80013fe <calculateFFT+0x2da>

	float32_t fft_Bufor[FFTBUFLEN];
	arm_rfft_fast_instance_f32 rfft_inst;
	arm_rfft_fast_init_f32(&rfft_inst, FFTBUFLEN);
 800145c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001460:	3b68      	subs	r3, #104	; 0x68
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	4618      	mov	r0, r3
 8001468:	f006 f958 	bl	800771c <arm_rfft_fast_init_f32>

	arm_rfft_fast_f32(&rfft_inst, signal_fft, fft_Bufor, 0);
 800146c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001470:	3a50      	subs	r2, #80	; 0x50
 8001472:	f507 5141 	add.w	r1, r7, #12352	; 0x3040
 8001476:	3910      	subs	r1, #16
 8001478:	f507 5084 	add.w	r0, r7, #4224	; 0x1080
 800147c:	3868      	subs	r0, #104	; 0x68
 800147e:	2300      	movs	r3, #0
 8001480:	f006 f9d0 	bl	8007824 <arm_rfft_fast_f32>

	//Obliczenie amplitud poszczególnych prążków
	float32_t fft_wynik[FFTBUFLEN/2];
		float32_t fft_max = 0;
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 800148c:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001490:	6013      	str	r3, [r2, #0]
		uint16_t fft_max_index = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001498:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800149c:	8013      	strh	r3, [r2, #0]
		for(int i = 12; i < (FFTBUFLEN/2); i++){
 800149e:	230c      	movs	r3, #12
 80014a0:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80014a4:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e094      	b.n	80015d6 <calculateFFT+0x4b2>
 80014ac:	40020400 	.word	0x40020400
 80014b0:	20000918 	.word	0x20000918
 80014b4:	20000d18 	.word	0x20000d18
 80014b8:	20001518 	.word	0x20001518
			fft_wynik[i]=sqrtf((fft_Bufor[2*i]*fft_Bufor[2*i])+(fft_Bufor[2*i+1]*fft_Bufor[2*i+1]));
 80014bc:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80014c0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b50      	subs	r3, #80	; 0x50
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80014da:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b50      	subs	r3, #80	; 0x50
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80014f8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	3301      	adds	r3, #1
 8001502:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b50      	subs	r3, #80	; 0x50
 800150c:	edd3 6a00 	vldr	s13, [r3]
 8001510:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001514:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	3301      	adds	r3, #1
 800151e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	3b50      	subs	r3, #80	; 0x50
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f00a f936 	bl	800b7a8 <sqrtf>
 800153c:	eef0 7a40 	vmov.f32	s15, s0
 8001540:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001544:	461a      	mov	r2, r3
 8001546:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800154a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b68      	subs	r3, #104	; 0x68
 8001556:	edc3 7a00 	vstr	s15, [r3]
			if(fft_wynik[i]>fft_max){
 800155a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800155e:	461a      	mov	r2, r3
 8001560:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001564:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	3b68      	subs	r3, #104	; 0x68
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001578:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	d51a      	bpl.n	80015c0 <calculateFFT+0x49c>
				fft_max=fft_wynik[i];
 800158a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800158e:	461a      	mov	r2, r3
 8001590:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001594:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b68      	subs	r3, #104	; 0x68
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80015a6:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80015aa:	6013      	str	r3, [r2, #0]
				fft_max_index = i;
 80015ac:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80015b0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80015ba:	f102 0272 	add.w	r2, r2, #114	; 0x72
 80015be:	8013      	strh	r3, [r2, #0]
		for(int i = 12; i < (FFTBUFLEN/2); i++){
 80015c0:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80015c4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80015d0:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80015da:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e4:	f6ff af6a 	blt.w	80014bc <calculateFFT+0x398>
			}
		}
		//Normalizacja wyniku FFT
		for(int i = 0; i < (FFTBUFLEN/2); i++){
 80015e8:	2300      	movs	r3, #0
 80015ea:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80015ee:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e02c      	b.n	8001650 <calculateFFT+0x52c>
				fft_wynik[i]=fft_wynik[i]/fft_max;
 80015f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015fa:	461a      	mov	r2, r3
 80015fc:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001600:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b68      	subs	r3, #104	; 0x68
 800160c:	edd3 6a00 	vldr	s13, [r3]
 8001610:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001614:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001620:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001624:	461a      	mov	r2, r3
 8001626:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800162a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b68      	subs	r3, #104	; 0x68
 8001636:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < (FFTBUFLEN/2); i++){
 800163a:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800163e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 800164a:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001654:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165e:	dbca      	blt.n	80015f6 <calculateFFT+0x4d2>
//		for(int i = 0; i < (FFTBUFLEN/2); i++){
//					if(fft_wynik[i]< 0.3)
//						fft_wynik[i] = 0;
//				}
		//Odnalezienie indeksu częstotliwości podstawowej
		if(fft_max_index > 0){
 8001660:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001664:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d058      	beq.n	8001720 <calculateFFT+0x5fc>
			while ((fft_wynik[fft_max_index / 2] > 0.50) || (fft_wynik[fft_max_index / 2 - 1] > 0.50) || (fft_wynik[fft_max_index / 2 + 1] > 0.50)) {
 800166e:	e00a      	b.n	8001686 <calculateFFT+0x562>
				fft_max_index /= 2;
 8001670:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001674:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001680:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001684:	8013      	strh	r3, [r2, #0]
			while ((fft_wynik[fft_max_index / 2] > 0.50) || (fft_wynik[fft_max_index / 2 - 1] > 0.50) || (fft_wynik[fft_max_index / 2 + 1] > 0.50)) {
 8001686:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800168a:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	3b68      	subs	r3, #104	; 0x68
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dcdf      	bgt.n	8001670 <calculateFFT+0x54c>
 80016b0:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80016b4:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3b01      	subs	r3, #1
 80016c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b68      	subs	r3, #104	; 0x68
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	dcc9      	bgt.n	8001670 <calculateFFT+0x54c>
 80016dc:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80016e0:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b68      	subs	r3, #104	; 0x68
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dcb3      	bgt.n	8001670 <calculateFFT+0x54c>
			}
		}
		while (fft_max_index > 0
 8001708:	e00a      	b.n	8001720 <calculateFFT+0x5fc>
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
			fft_max_index++;
 800170a:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800170e:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 800171a:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800171e:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
 8001720:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001724:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d029      	beq.n	8001782 <calculateFFT+0x65e>
 800172e:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001732:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	3b68      	subs	r3, #104	; 0x68
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800174c:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b68      	subs	r3, #104	; 0x68
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	dccf      	bgt.n	800170a <calculateFFT+0x5e6>
		}
		while (fft_max_index > 0
 800176a:	e00a      	b.n	8001782 <calculateFFT+0x65e>
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
			fft_max_index--;
 800176c:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001770:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	3b01      	subs	r3, #1
 8001778:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 800177c:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001780:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
 8001782:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001786:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01d      	beq.n	80017cc <calculateFFT+0x6a8>
 8001790:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001794:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b68      	subs	r3, #104	; 0x68
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80017ae:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	3b68      	subs	r3, #104	; 0x68
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	dccf      	bgt.n	800176c <calculateFFT+0x648>
		}
		if(fft_max_index > 0){
 80017cc:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80017d0:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d064      	beq.n	80018a4 <calculateFFT+0x780>
			while ((fft_wynik[fft_max_index / 3] > 0.50) || (fft_wynik[fft_max_index / 3 - 1] > 0.50) || (fft_wynik[fft_max_index / 3 + 1] > 0.50)) {
 80017da:	e00d      	b.n	80017f8 <calculateFFT+0x6d4>
				fft_max_index /= 3;
 80017dc:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80017e0:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	4a9d      	ldr	r2, [pc, #628]	; (8001a5c <calculateFFT+0x938>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 80017f2:	f102 0272 	add.w	r2, r2, #114	; 0x72
 80017f6:	8013      	strh	r3, [r2, #0]
			while ((fft_wynik[fft_max_index / 3] > 0.50) || (fft_wynik[fft_max_index / 3 - 1] > 0.50) || (fft_wynik[fft_max_index / 3 + 1] > 0.50)) {
 80017f8:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80017fc:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4a96      	ldr	r2, [pc, #600]	; (8001a5c <calculateFFT+0x938>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b68      	subs	r3, #104	; 0x68
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800181e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	dcd9      	bgt.n	80017dc <calculateFFT+0x6b8>
 8001828:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800182c:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	4a8a      	ldr	r2, [pc, #552]	; (8001a5c <calculateFFT+0x938>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b68      	subs	r3, #104	; 0x68
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	dcc0      	bgt.n	80017dc <calculateFFT+0x6b8>
 800185a:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800185e:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4a7d      	ldr	r2, [pc, #500]	; (8001a5c <calculateFFT+0x938>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b68      	subs	r3, #104	; 0x68
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	dca7      	bgt.n	80017dc <calculateFFT+0x6b8>
			}
		}
		while (fft_max_index > 0
 800188c:	e00a      	b.n	80018a4 <calculateFFT+0x780>
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
			fft_max_index++;
 800188e:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001892:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 800189e:	f102 0272 	add.w	r2, r2, #114	; 0x72
 80018a2:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
 80018a4:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80018a8:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d029      	beq.n	8001906 <calculateFFT+0x7e2>
 80018b2:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80018b6:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3b68      	subs	r3, #104	; 0x68
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80018d0:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b68      	subs	r3, #104	; 0x68
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dccf      	bgt.n	800188e <calculateFFT+0x76a>
		}
		while (fft_max_index > 0
 80018ee:	e00a      	b.n	8001906 <calculateFFT+0x7e2>
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
			fft_max_index--;
 80018f0:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80018f4:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001900:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001904:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
 8001906:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800190a:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01d      	beq.n	8001950 <calculateFFT+0x82c>
 8001914:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001918:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	3b01      	subs	r3, #1
 8001920:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b68      	subs	r3, #104	; 0x68
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001932:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b68      	subs	r3, #104	; 0x68
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	dccf      	bgt.n	80018f0 <calculateFFT+0x7cc>
		}
		if(fft_max_index > 0){
 8001950:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001954:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d058      	beq.n	8001a10 <calculateFFT+0x8ec>
			while ((fft_wynik[fft_max_index / 4] > 0.50) || (fft_wynik[fft_max_index / 4 - 1] > 0.50) || (fft_wynik[fft_max_index / 4 + 1] > 0.50)) {
 800195e:	e00a      	b.n	8001976 <calculateFFT+0x852>
				fft_max_index /= 4;
 8001960:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001964:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001970:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001974:	8013      	strh	r3, [r2, #0]
			while ((fft_wynik[fft_max_index / 4] > 0.50) || (fft_wynik[fft_max_index / 4 - 1] > 0.50) || (fft_wynik[fft_max_index / 4 + 1] > 0.50)) {
 8001976:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 800197a:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	b29b      	uxth	r3, r3
 8001984:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b68      	subs	r3, #104	; 0x68
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	dcdf      	bgt.n	8001960 <calculateFFT+0x83c>
 80019a0:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80019a4:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b68      	subs	r3, #104	; 0x68
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	dcc9      	bgt.n	8001960 <calculateFFT+0x83c>
 80019cc:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80019d0:	f103 0372 	add.w	r3, r3, #114	; 0x72
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	3b68      	subs	r3, #104	; 0x68
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	dcb3      	bgt.n	8001960 <calculateFFT+0x83c>
			}
		}
		while (fft_max_index > 0
 80019f8:	e00a      	b.n	8001a10 <calculateFFT+0x8ec>
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
			fft_max_index++;
 80019fa:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80019fe:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001a0a:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001a0e:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index + 1] > fft_wynik[fft_max_index]) {
 8001a10:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001a14:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d02d      	beq.n	8001a7a <calculateFFT+0x956>
 8001a1e:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001a22:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	3b68      	subs	r3, #104	; 0x68
 8001a34:	ed93 7a00 	vldr	s14, [r3]
 8001a38:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001a3c:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b68      	subs	r3, #104	; 0x68
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dccf      	bgt.n	80019fa <calculateFFT+0x8d6>
		}
		while (fft_max_index > 0
 8001a5a:	e00e      	b.n	8001a7a <calculateFFT+0x956>
 8001a5c:	aaaaaaab 	.word	0xaaaaaaab
 8001a60:	45000000 	.word	0x45000000
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
			fft_max_index--;
 8001a64:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001a68:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001a74:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001a78:	8013      	strh	r3, [r2, #0]
				&& fft_wynik[fft_max_index - 1] > fft_wynik[fft_max_index]) {
 8001a7a:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001a7e:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01d      	beq.n	8001ac4 <calculateFFT+0x9a0>
 8001a88:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001a8c:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b68      	subs	r3, #104	; 0x68
 8001a9e:	ed93 7a00 	vldr	s14, [r3]
 8001aa2:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001aa6:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b68      	subs	r3, #104	; 0x68
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	dccf      	bgt.n	8001a64 <calculateFFT+0x940>
		}
		float32_t fundamental_freq = (((float32_t)fft_max_index) * (float32_t)fs / (float32_t)FFTBUFLEN);
 8001ac4:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001ac8:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad6:	f507 43a1 	add.w	r3, r7, #20608	; 0x5080
 8001ada:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aec:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 8001a60 <calculateFFT+0x93c>
 8001af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af4:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001af8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001afc:	edc3 7a00 	vstr	s15, [r3]

		int16_t peak_to_peak_value = max - min;
 8001b00:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001b04:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001b10:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001b28:	f102 0246 	add.w	r2, r2, #70	; 0x46
 8001b2c:	8013      	strh	r3, [r2, #0]
		*maxpp = peak_to_peak_value;
 8001b2e:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001b32:	f103 0346 	add.w	r3, r3, #70	; 0x46
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b3c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001b40:	801a      	strh	r2, [r3, #0]
		*fundamental = fundamental_freq;
 8001b42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b46:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001b4a:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001b4e:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	601a      	str	r2, [r3, #0]

		uint16_t printall = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001b5c:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001b60:	8013      	strh	r3, [r2, #0]
		if(printall == 1){
 8001b62:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001b66:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	f040 8094 	bne.w	8001c9a <calculateFFT+0xb76>
			printf("\nRaw signal\n");
 8001b72:	484e      	ldr	r0, [pc, #312]	; (8001cac <calculateFFT+0xb88>)
 8001b74:	f007 fe26 	bl	80097c4 <puts>
			for(int i = 0; i<2*BUFLEN; i++){
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001b7e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e01e      	b.n	8001bc4 <calculateFFT+0xaa0>
				printf("%d, ", inputArray[i]);
 8001b86:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001b8a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b96:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd52 	bl	8000648 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4841      	ldr	r0, [pc, #260]	; (8001cb0 <calculateFFT+0xb8c>)
 8001baa:	f007 fda5 	bl	80096f8 <iprintf>
			for(int i = 0; i<2*BUFLEN; i++){
 8001bae:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001bb2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001bbe:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001bc8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd2:	dbd8      	blt.n	8001b86 <calculateFFT+0xa62>
			}
			printf("\nSignal filtered\n");
 8001bd4:	4837      	ldr	r0, [pc, #220]	; (8001cb4 <calculateFFT+0xb90>)
 8001bd6:	f007 fdf5 	bl	80097c4 <puts>
			for(int i = 0; i<2*BUFLEN; i++){
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001be0:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01f      	b.n	8001c28 <calculateFFT+0xb04>
				printf("%f, ", signal_filtered[i]);
 8001be8:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001bec:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001bf6:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fd20 	bl	8000648 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	482a      	ldr	r0, [pc, #168]	; (8001cb8 <calculateFFT+0xb94>)
 8001c0e:	f007 fd73 	bl	80096f8 <iprintf>
			for(int i = 0; i<2*BUFLEN; i++){
 8001c12:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001c16:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001c22:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001c2c:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c36:	dbd7      	blt.n	8001be8 <calculateFFT+0xac4>
			}
			printf("\nFFT\n");
 8001c38:	4820      	ldr	r0, [pc, #128]	; (8001cbc <calculateFFT+0xb98>)
 8001c3a:	f007 fdc3 	bl	80097c4 <puts>
			for(int i = 0; i<FFTBUFLEN/2; i++){
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001c44:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01e      	b.n	8001c8a <calculateFFT+0xb66>
				printf("%f, ", fft_wynik[i]);
 8001c4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c50:	461a      	mov	r2, r3
 8001c52:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001c56:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b68      	subs	r3, #104	; 0x68
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fcef 	bl	8000648 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <calculateFFT+0xb94>)
 8001c70:	f007 fd42 	bl	80096f8 <iprintf>
			for(int i = 0; i<FFTBUFLEN/2; i++){
 8001c74:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001c78:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f507 42a0 	add.w	r2, r7, #20480	; 0x5000
 8001c84:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8001c8e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c98:	dbd8      	blt.n	8001c4c <calculateFFT+0xb28>
 8001c9a:	46b5      	mov	sp, r6
			}
		}
}
 8001c9c:	bf00      	nop
 8001c9e:	f507 47a1 	add.w	r7, r7, #20608	; 0x5080
 8001ca2:	3704      	adds	r7, #4
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	0800d248 	.word	0x0800d248
 8001cb0:	0800d254 	.word	0x0800d254
 8001cb4:	0800d25c 	.word	0x0800d25c
 8001cb8:	0800d270 	.word	0x0800d270
 8001cbc:	0800d278 	.word	0x0800d278

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc6:	f001 f891 	bl	8002dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cca:	f000 f93b 	bl	8001f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f000 fb2d 	bl	800232c <MX_GPIO_Init>
  MX_DMA_Init();
 8001cd2:	f000 faed 	bl	80022b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001cd6:	f000 fa97 	bl	8002208 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001cda:	f000 f9a5 	bl	8002028 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001cde:	f000 fa1f 	bl	8002120 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001ce2:	f000 fabb 	bl	800225c <MX_USART3_UART_Init>
  MX_DAC_Init();
 8001ce6:	f000 f9f1 	bl	80020cc <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  arm_fir_init_f32(&fir_instance0, FIR_LENGHT, fir_coefficients10k, fir_state0, 1);
 8001cea:	4b87      	ldr	r3, [pc, #540]	; (8001f08 <main+0x248>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4b85      	ldr	r3, [pc, #532]	; (8001f0c <main+0x24c>)
 8001cf6:	4a86      	ldr	r2, [pc, #536]	; (8001f10 <main+0x250>)
 8001cf8:	4886      	ldr	r0, [pc, #536]	; (8001f14 <main+0x254>)
 8001cfa:	f006 fa01 	bl	8008100 <arm_fir_init_f32>

  for(int i = 0; i < 46; i++){
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e015      	b.n	8001d30 <main+0x70>
	  FreqRange[i] = (FreqNotes[i] + FreqNotes[i+1])/2;
 8001d04:	4a84      	ldr	r2, [pc, #528]	; (8001f18 <main+0x258>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a81      	ldr	r2, [pc, #516]	; (8001f18 <main+0x258>)
 8001d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d18:	440b      	add	r3, r1
 8001d1a:	0fda      	lsrs	r2, r3, #31
 8001d1c:	4413      	add	r3, r2
 8001d1e:	105b      	asrs	r3, r3, #1
 8001d20:	b299      	uxth	r1, r3
 8001d22:	4a7e      	ldr	r2, [pc, #504]	; (8001f1c <main+0x25c>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < 46; i++){
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b2d      	cmp	r3, #45	; 0x2d
 8001d34:	dde6      	ble.n	8001d04 <main+0x44>
  }
  for(int i = 0; i < BUFLEN; i++){
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	e037      	b.n	8001dac <main+0xec>
	  hannWindow1[i] = (0.5 - (0.5 * cos ( (2.0 * PI * i) / (BUFLEN - 1))));
 8001d3c:	68b8      	ldr	r0, [r7, #8]
 8001d3e:	f7fe fc71 	bl	8000624 <__aeabi_i2d>
 8001d42:	a369      	add	r3, pc, #420	; (adr r3, 8001ee8 <main+0x228>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fcd6 	bl	80006f8 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	a366      	add	r3, pc, #408	; (adr r3, 8001ef0 <main+0x230>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fdf7 	bl	800094c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	ec43 2b17 	vmov	d7, r2, r3
 8001d66:	eeb0 0a47 	vmov.f32	s0, s14
 8001d6a:	eef0 0a67 	vmov.f32	s1, s15
 8001d6e:	f009 fcc7 	bl	800b700 <cos>
 8001d72:	ec51 0b10 	vmov	r0, r1, d0
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b69      	ldr	r3, [pc, #420]	; (8001f20 <main+0x260>)
 8001d7c:	f7fe fcbc 	bl	80006f8 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	4965      	ldr	r1, [pc, #404]	; (8001f20 <main+0x260>)
 8001d8a:	f7fe fafd 	bl	8000388 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff87 	bl	8000ca8 <__aeabi_d2f>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4961      	ldr	r1, [pc, #388]	; (8001f24 <main+0x264>)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < BUFLEN; i++){
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2bff      	cmp	r3, #255	; 0xff
 8001db0:	ddc4      	ble.n	8001d3c <main+0x7c>
  }
  for(int i = 0; i < 2*BUFLEN; i++){
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e037      	b.n	8001e28 <main+0x168>
  	  hannWindow2[i] = (0.5 - (0.5 * cos ( (2.0 * PI * i) / (2*BUFLEN - 1))));
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7fe fc33 	bl	8000624 <__aeabi_i2d>
 8001dbe:	a34a      	add	r3, pc, #296	; (adr r3, 8001ee8 <main+0x228>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fc98 	bl	80006f8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	a349      	add	r3, pc, #292	; (adr r3, 8001ef8 <main+0x238>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fdb9 	bl	800094c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	ec43 2b17 	vmov	d7, r2, r3
 8001de2:	eeb0 0a47 	vmov.f32	s0, s14
 8001de6:	eef0 0a67 	vmov.f32	s1, s15
 8001dea:	f009 fc89 	bl	800b700 <cos>
 8001dee:	ec51 0b10 	vmov	r0, r1, d0
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <main+0x260>)
 8001df8:	f7fe fc7e 	bl	80006f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	f04f 0000 	mov.w	r0, #0
 8001e04:	4946      	ldr	r1, [pc, #280]	; (8001f20 <main+0x260>)
 8001e06:	f7fe fabf 	bl	8000388 <__aeabi_dsub>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe ff49 	bl	8000ca8 <__aeabi_d2f>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4943      	ldr	r1, [pc, #268]	; (8001f28 <main+0x268>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 2*BUFLEN; i++){
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3301      	adds	r3, #1
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2e:	dbc3      	blt.n	8001db8 <main+0xf8>
  }
  for(int i = 0; i < BUFLEN/2; i++){
 8001e30:	2300      	movs	r3, #0
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	e037      	b.n	8001ea6 <main+0x1e6>
	  hannWindow3[i] = (0.5 - (0.5 * cos ( (2.0 * PI * i) / (BUFLEN/2 - 1))));
 8001e36:	6838      	ldr	r0, [r7, #0]
 8001e38:	f7fe fbf4 	bl	8000624 <__aeabi_i2d>
 8001e3c:	a32a      	add	r3, pc, #168	; (adr r3, 8001ee8 <main+0x228>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fc59 	bl	80006f8 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	a32c      	add	r3, pc, #176	; (adr r3, 8001f00 <main+0x240>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f7fe fd7a 	bl	800094c <__aeabi_ddiv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	ec43 2b17 	vmov	d7, r2, r3
 8001e60:	eeb0 0a47 	vmov.f32	s0, s14
 8001e64:	eef0 0a67 	vmov.f32	s1, s15
 8001e68:	f009 fc4a 	bl	800b700 <cos>
 8001e6c:	ec51 0b10 	vmov	r0, r1, d0
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <main+0x260>)
 8001e76:	f7fe fc3f 	bl	80006f8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	4927      	ldr	r1, [pc, #156]	; (8001f20 <main+0x260>)
 8001e84:	f7fe fa80 	bl	8000388 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe ff0a 	bl	8000ca8 <__aeabi_d2f>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4925      	ldr	r1, [pc, #148]	; (8001f2c <main+0x26c>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < BUFLEN/2; i++){
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eaa:	ddc4      	ble.n	8001e36 <main+0x176>
  }
  generate_sine_table();
 8001eac:	f7ff f8e4 	bl	8001078 <generate_sine_table>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sine_table, SINE_TABLE_SIZE, DAC_ALIGN_12B_R);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	232d      	movs	r3, #45	; 0x2d
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <main+0x270>)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	481e      	ldr	r0, [pc, #120]	; (8001f34 <main+0x274>)
 8001ebc:	f001 fd6e 	bl	800399c <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dmaBuffer, DMABUFLEN);
 8001ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec4:	491c      	ldr	r1, [pc, #112]	; (8001f38 <main+0x278>)
 8001ec6:	481d      	ldr	r0, [pc, #116]	; (8001f3c <main+0x27c>)
 8001ec8:	f001 f86a 	bl	8002fa0 <HAL_ADC_Start_DMA>
    HAL_Delay(10);
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f000 ffff 	bl	8002ed0 <HAL_Delay>
    HAL_TIM_Base_Start(&htim2);
 8001ed2:	481b      	ldr	r0, [pc, #108]	; (8001f40 <main+0x280>)
 8001ed4:	f003 fb7a 	bl	80055cc <HAL_TIM_Base_Start>
    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4819      	ldr	r0, [pc, #100]	; (8001f40 <main+0x280>)
 8001edc:	f003 fc38 	bl	8005750 <HAL_TIM_OC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <main+0x220>
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	60000000 	.word	0x60000000
 8001eec:	401921fb 	.word	0x401921fb
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	406fe000 	.word	0x406fe000
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	407ff000 	.word	0x407ff000
 8001f00:	00000000 	.word	0x00000000
 8001f04:	405fc000 	.word	0x405fc000
 8001f08:	2000005e 	.word	0x2000005e
 8001f0c:	200023a8 	.word	0x200023a8
 8001f10:	20000060 	.word	0x20000060
 8001f14:	20002394 	.word	0x20002394
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20002338 	.word	0x20002338
 8001f20:	3fe00000 	.word	0x3fe00000
 8001f24:	20000918 	.word	0x20000918
 8001f28:	20000d18 	.word	0x20000d18
 8001f2c:	20001518 	.word	0x20001518
 8001f30:	20002424 	.word	0x20002424
 8001f34:	20000374 	.word	0x20000374
 8001f38:	20000518 	.word	0x20000518
 8001f3c:	200002cc 	.word	0x200002cc
 8001f40:	200003e8 	.word	0x200003e8

08001f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b094      	sub	sp, #80	; 0x50
 8001f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	2234      	movs	r2, #52	; 0x34
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f007 fd16 	bl	8009984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <SystemClock_Config+0xdc>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <SystemClock_Config+0xdc>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f76:	6413      	str	r3, [r2, #64]	; 0x40
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <SystemClock_Config+0xdc>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f84:	2300      	movs	r3, #0
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <SystemClock_Config+0xe0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <SystemClock_Config+0xe0>)
 8001f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <SystemClock_Config+0xe0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa8:	2310      	movs	r3, #16
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fac:	2302      	movs	r3, #2
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001fb8:	23b4      	movs	r3, #180	; 0xb4
 8001fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 f80f 	bl	8004ff0 <HAL_RCC_OscConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fd8:	f000 fb74 	bl	80026c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fdc:	f002 fc6e 	bl	80048bc <HAL_PWREx_EnableOverDrive>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001fe6:	f000 fb6d 	bl	80026c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fea:	230f      	movs	r3, #15
 8001fec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ff6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ffc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002000:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	2105      	movs	r1, #5
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fca7 	bl	800495c <HAL_RCC_ClockConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002014:	f000 fb56 	bl	80026c4 <Error_Handler>
  }
}
 8002018:	bf00      	nop
 800201a:	3750      	adds	r7, #80	; 0x50
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	40007000 	.word	0x40007000

08002028 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800202e:	463b      	mov	r3, r7
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800203c:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <MX_ADC1_Init+0xa0>)
 800203e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002042:	2200      	movs	r2, #0
 8002044:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002054:	2200      	movs	r2, #0
 8002056:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002062:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800206a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002078:	2201      	movs	r2, #1
 800207a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_ADC1_Init+0x9c>)
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800208a:	480e      	ldr	r0, [pc, #56]	; (80020c4 <MX_ADC1_Init+0x9c>)
 800208c:	f000 ff44 	bl	8002f18 <HAL_ADC_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002096:	f000 fb15 	bl	80026c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80020a2:	2305      	movs	r3, #5
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a6:	463b      	mov	r3, r7
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <MX_ADC1_Init+0x9c>)
 80020ac:	f001 f892 	bl	80031d4 <HAL_ADC_ConfigChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80020b6:	f000 fb05 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002cc 	.word	0x200002cc
 80020c8:	40012000 	.word	0x40012000

080020cc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <MX_DAC_Init+0x4c>)
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <MX_DAC_Init+0x50>)
 80020de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <MX_DAC_Init+0x4c>)
 80020e2:	f001 fc38 	bl	8003956 <HAL_DAC_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80020ec:	f000 faea 	bl	80026c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80020f0:	2324      	movs	r3, #36	; 0x24
 80020f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80020f4:	2302      	movs	r3, #2
 80020f6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_DAC_Init+0x4c>)
 8002100:	f001 fd38 	bl	8003b74 <HAL_DAC_ConfigChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800210a:	f000 fadb 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000374 	.word	0x20000374
 800211c:	40007400 	.word	0x40007400

08002120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	; 0x38
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	f107 0320 	add.w	r3, r7, #32
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
 800214c:	615a      	str	r2, [r3, #20]
 800214e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <MX_TIM2_Init+0xe4>)
 8002152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002156:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <MX_TIM2_Init+0xe4>)
 800215a:	223b      	movs	r2, #59	; 0x3b
 800215c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <MX_TIM2_Init+0xe4>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <MX_TIM2_Init+0xe4>)
 8002166:	2295      	movs	r2, #149	; 0x95
 8002168:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <MX_TIM2_Init+0xe4>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <MX_TIM2_Init+0xe4>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002176:	4823      	ldr	r0, [pc, #140]	; (8002204 <MX_TIM2_Init+0xe4>)
 8002178:	f003 f9d8 	bl	800552c <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002182:	f000 fa9f 	bl	80026c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800218c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002190:	4619      	mov	r1, r3
 8002192:	481c      	ldr	r0, [pc, #112]	; (8002204 <MX_TIM2_Init+0xe4>)
 8002194:	f003 fc00 	bl	8005998 <HAL_TIM_ConfigClockSource>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800219e:	f000 fa91 	bl	80026c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80021a2:	4818      	ldr	r0, [pc, #96]	; (8002204 <MX_TIM2_Init+0xe4>)
 80021a4:	f003 fa7a 	bl	800569c <HAL_TIM_OC_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80021ae:	f000 fa89 	bl	80026c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021b2:	2320      	movs	r3, #32
 80021b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	4619      	mov	r1, r3
 80021c0:	4810      	ldr	r0, [pc, #64]	; (8002204 <MX_TIM2_Init+0xe4>)
 80021c2:	f003 ffc1 	bl	8006148 <HAL_TIMEx_MasterConfigSynchronization>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80021cc:	f000 fa7a 	bl	80026c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80021d0:	2330      	movs	r3, #48	; 0x30
 80021d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <MX_TIM2_Init+0xe4>)
 80021e8:	f003 fb7a 	bl	80058e0 <HAL_TIM_OC_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80021f2:	f000 fa67 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021f6:	4803      	ldr	r0, [pc, #12]	; (8002204 <MX_TIM2_Init+0xe4>)
 80021f8:	f000 fba2 	bl	8002940 <HAL_TIM_MspPostInit>

}
 80021fc:	bf00      	nop
 80021fe:	3738      	adds	r7, #56	; 0x38
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200003e8 	.word	0x200003e8

08002208 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <MX_USART2_UART_Init+0x50>)
 8002210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002240:	f003 fffe 	bl	8006240 <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800224a:	f000 fa3b 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000430 	.word	0x20000430
 8002258:	40004400 	.word	0x40004400

0800225c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <MX_USART3_UART_Init+0x50>)
 8002264:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 8002268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800226c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 8002282:	220c      	movs	r2, #12
 8002284:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_USART3_UART_Init+0x4c>)
 8002294:	f003 ffd4 	bl	8006240 <HAL_UART_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800229e:	f000 fa11 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000474 	.word	0x20000474
 80022ac:	40004800 	.word	0x40004800

080022b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <MX_DMA_Init+0x78>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <MX_DMA_Init+0x78>)
 80022c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <MX_DMA_Init+0x78>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <MX_DMA_Init+0x78>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <MX_DMA_Init+0x78>)
 80022dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_DMA_Init+0x78>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	200e      	movs	r0, #14
 80022f4:	f001 faf9 	bl	80038ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80022f8:	200e      	movs	r0, #14
 80022fa:	f001 fb12 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2010      	movs	r0, #16
 8002304:	f001 faf1 	bl	80038ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002308:	2010      	movs	r0, #16
 800230a:	f001 fb0a 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2038      	movs	r0, #56	; 0x38
 8002314:	f001 fae9 	bl	80038ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002318:	2038      	movs	r0, #56	; 0x38
 800231a:	f001 fb02 	bl	8003922 <HAL_NVIC_EnableIRQ>

}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800

0800232c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b40      	ldr	r3, [pc, #256]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <MX_GPIO_Init+0x11c>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a38      	ldr	r2, [pc, #224]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a31      	ldr	r2, [pc, #196]	; (8002448 <MX_GPIO_Init+0x11c>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <MX_GPIO_Init+0x11c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <MX_GPIO_Init+0x11c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a2a      	ldr	r2, [pc, #168]	; (8002448 <MX_GPIO_Init+0x11c>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <MX_GPIO_Init+0x11c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DMAOutput_Pin, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	f44f 7190 	mov.w	r1, #288	; 0x120
 80023b8:	4824      	ldr	r0, [pc, #144]	; (800244c <MX_GPIO_Init+0x120>)
 80023ba:	f002 fa4b 	bl	8004854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CALCOutput_GPIO_Port, CALCOutput_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023c4:	4822      	ldr	r0, [pc, #136]	; (8002450 <MX_GPIO_Init+0x124>)
 80023c6:	f002 fa45 	bl	8004854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	481c      	ldr	r0, [pc, #112]	; (8002454 <MX_GPIO_Init+0x128>)
 80023e2:	f002 f8a3 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023e6:	2320      	movs	r3, #32
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4813      	ldr	r0, [pc, #76]	; (800244c <MX_GPIO_Init+0x120>)
 80023fe:	f002 f895 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : CALCOutput_Pin */
  GPIO_InitStruct.Pin = CALCOutput_Pin;
 8002402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CALCOutput_GPIO_Port, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	480d      	ldr	r0, [pc, #52]	; (8002450 <MX_GPIO_Init+0x124>)
 800241c:	f002 f886 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : DMAOutput_Pin */
  GPIO_InitStruct.Pin = DMAOutput_Pin;
 8002420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002426:	2301      	movs	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800242e:	2301      	movs	r3, #1
 8002430:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DMAOutput_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_GPIO_Init+0x120>)
 800243a:	f002 f877 	bl	800452c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020400 	.word	0x40020400
 8002454:	40020800 	.word	0x40020800

08002458 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	6078      	str	r0, [r7, #4]
	//Zmiana stanu na pinie D7
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 8002460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002464:	483e      	ldr	r0, [pc, #248]	; (8002560 <HAL_ADC_ConvCpltCallback+0x108>)
 8002466:	f002 fa0e 	bl	8004886 <HAL_GPIO_TogglePin>

	//Przepisanie sygnału do tablicy
	for(uint32_t i = 0; i < 2 * BUFLEN; i++){
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e00b      	b.n	8002488 <HAL_ADC_ConvCpltCallback+0x30>
		signalbuffer0[i] = dmaBuffer[i];
 8002470:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002478:	b299      	uxth	r1, r3
 800247a:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_ADC_ConvCpltCallback+0x110>)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = 0; i < 2 * BUFLEN; i++){
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248e:	d3ef      	bcc.n	8002470 <HAL_ADC_ConvCpltCallback+0x18>
	}

	//Wystartowanie kolejnego cyklu próbkowania
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dmaBuffer, DMABUFLEN);
 8002490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002494:	4933      	ldr	r1, [pc, #204]	; (8002564 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002496:	4835      	ldr	r0, [pc, #212]	; (800256c <HAL_ADC_ConvCpltCallback+0x114>)
 8002498:	f000 fd82 	bl	8002fa0 <HAL_ADC_Start_DMA>

	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 800249c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a0:	482f      	ldr	r0, [pc, #188]	; (8002560 <HAL_ADC_ConvCpltCallback+0x108>)
 80024a2:	f002 f9f0 	bl	8004886 <HAL_GPIO_TogglePin>
	//Przefiltrowanie sygnałów
	for(int i = 0; i < 2 * BUFLEN; i++){
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e01a      	b.n	80024e2 <HAL_ADC_ConvCpltCallback+0x8a>
		fir_in_arm0 = (float32_t) signalbuffer0[i];
 80024ac:	4a2e      	ldr	r2, [pc, #184]	; (8002568 <HAL_ADC_ConvCpltCallback+0x110>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024bc:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_ADC_ConvCpltCallback+0x118>)
 80024be:	edc3 7a00 	vstr	s15, [r3]
		arm_fir_f32(&fir_instance0, &fir_in_arm0, &fir_out_arm0, 1);
 80024c2:	2301      	movs	r3, #1
 80024c4:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <HAL_ADC_ConvCpltCallback+0x11c>)
 80024c6:	492a      	ldr	r1, [pc, #168]	; (8002570 <HAL_ADC_ConvCpltCallback+0x118>)
 80024c8:	482b      	ldr	r0, [pc, #172]	; (8002578 <HAL_ADC_ConvCpltCallback+0x120>)
 80024ca:	f005 fe2b 	bl	8008124 <arm_fir_f32>
		signal0filtered[i] = fir_out_arm0;
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_ADC_ConvCpltCallback+0x11c>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	492a      	ldr	r1, [pc, #168]	; (800257c <HAL_ADC_ConvCpltCallback+0x124>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2 * BUFLEN; i++){
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	3301      	adds	r3, #1
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e8:	dbe0      	blt.n	80024ac <HAL_ADC_ConvCpltCallback+0x54>
	}
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 80024ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ee:	481c      	ldr	r0, [pc, #112]	; (8002560 <HAL_ADC_ConvCpltCallback+0x108>)
 80024f0:	f002 f9c9 	bl	8004886 <HAL_GPIO_TogglePin>
//		signal0filtered[i] = signalfilteredbuffer0[i];
//	}


		//Obliczenie częstotliwości podstawowej
			calculateFFT(signal0filtered, 2*BUFLEN, &maxpp0, &fundamental0, 10000);
 80024f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_ADC_ConvCpltCallback+0x128>)
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_ADC_ConvCpltCallback+0x12c>)
 80024fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002502:	481e      	ldr	r0, [pc, #120]	; (800257c <HAL_ADC_ConvCpltCallback+0x124>)
 8002504:	f7fe fe0e 	bl	8001124 <calculateFFT>
			fund[0] = (uint16_t)fundamental0;
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_ADC_ConvCpltCallback+0x128>)
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002512:	ee17 3a90 	vmov	r3, s15
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_ADC_ConvCpltCallback+0x130>)
 800251a:	801a      	strh	r2, [r3, #0]
			maxpp[0] = maxpp0;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_ADC_ConvCpltCallback+0x12c>)
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_ADC_ConvCpltCallback+0x134>)
 8002522:	801a      	strh	r2, [r3, #0]
			printf("F0 = %d\n", fund[0]);
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_ADC_ConvCpltCallback+0x130>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	4819      	ldr	r0, [pc, #100]	; (8002590 <HAL_ADC_ConvCpltCallback+0x138>)
 800252c:	f007 f8e4 	bl	80096f8 <iprintf>
//			printf("maxpp = %lu \n", maxpp[0]);
//		}


	uint16_t data[2];
	data[0] = (uint16_t)fundamental0;
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_ADC_ConvCpltCallback+0x128>)
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253a:	ee17 3a90 	vmov	r3, s15
 800253e:	b29b      	uxth	r3, r3
 8002540:	81bb      	strh	r3, [r7, #12]
	data[1] = maxpp0;
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_ADC_ConvCpltCallback+0x12c>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)data, sizeof(data) * 2);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	2208      	movs	r2, #8
 800254e:	4619      	mov	r1, r3
 8002550:	4810      	ldr	r0, [pc, #64]	; (8002594 <HAL_ADC_ConvCpltCallback+0x13c>)
 8002552:	f003 ff55 	bl	8006400 <HAL_UART_Transmit_DMA>
//					HAL_UART_Transmit(&huart2, txBuffer, 6, 10);
//				}
//			}
//		}

}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020000 	.word	0x40020000
 8002564:	20000518 	.word	0x20000518
 8002568:	20001f18 	.word	0x20001f18
 800256c:	200002cc 	.word	0x200002cc
 8002570:	200023a0 	.word	0x200023a0
 8002574:	200023a4 	.word	0x200023a4
 8002578:	20002394 	.word	0x20002394
 800257c:	20001718 	.word	0x20001718
 8002580:	20002334 	.word	0x20002334
 8002584:	20002324 	.word	0x20002324
 8002588:	20002328 	.word	0x20002328
 800258c:	20002318 	.word	0x20002318
 8002590:	0800d280 	.word	0x0800d280
 8002594:	20000474 	.word	0x20000474

08002598 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	6078      	str	r0, [r7, #4]
	//Zmiana stanu na pinie D7
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 80025a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a4:	483b      	ldr	r0, [pc, #236]	; (8002694 <HAL_ADC_ConvHalfCpltCallback+0xfc>)
 80025a6:	f002 f96e 	bl	8004886 <HAL_GPIO_TogglePin>

	//Przesunięcie próbek
	for(int i = 0; i < BUFLEN; i++){
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e00c      	b.n	80025ca <HAL_ADC_ConvHalfCpltCallback+0x32>
		signalbuffer0[i] = signalbuffer0[i + BUFLEN];
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025b6:	4a38      	ldr	r2, [pc, #224]	; (8002698 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 80025b8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80025bc:	4a36      	ldr	r2, [pc, #216]	; (8002698 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < BUFLEN; i++){
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2bff      	cmp	r3, #255	; 0xff
 80025ce:	ddef      	ble.n	80025b0 <HAL_ADC_ConvHalfCpltCallback+0x18>
	}

	//Rozdzielenie sygnałów do osobnych tablic
	for(int i = 0; i < BUFLEN; i++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e00d      	b.n	80025f2 <HAL_ADC_ConvHalfCpltCallback+0x5a>
		signalbuffer0[i + BUFLEN] = dmaBuffer[i];
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025dc:	492f      	ldr	r1, [pc, #188]	; (800269c <HAL_ADC_ConvHalfCpltCallback+0x104>)
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80025e4:	b291      	uxth	r1, r2
 80025e6:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 80025e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < BUFLEN; i++){
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3301      	adds	r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2bff      	cmp	r3, #255	; 0xff
 80025f6:	ddee      	ble.n	80025d6 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	//Przefiltrowanie sygnałów
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 80025f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fc:	4825      	ldr	r0, [pc, #148]	; (8002694 <HAL_ADC_ConvHalfCpltCallback+0xfc>)
 80025fe:	f002 f942 	bl	8004886 <HAL_GPIO_TogglePin>
	for(int i = 0; i < 2 * BUFLEN; i++){
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e01a      	b.n	800263e <HAL_ADC_ConvHalfCpltCallback+0xa6>
		fir_in_arm0 = (float32_t) signalbuffer0[i];
 8002608:	4a23      	ldr	r2, [pc, #140]	; (8002698 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800261a:	edc3 7a00 	vstr	s15, [r3]
		arm_fir_f32(&fir_instance0, &fir_in_arm0, &fir_out_arm0, 1);
 800261e:	2301      	movs	r3, #1
 8002620:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8002622:	491f      	ldr	r1, [pc, #124]	; (80026a0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8002624:	4820      	ldr	r0, [pc, #128]	; (80026a8 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8002626:	f005 fd7d 	bl	8008124 <arm_fir_f32>
		signal0filtered[i] = fir_out_arm0;
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	491f      	ldr	r1, [pc, #124]	; (80026ac <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2 * BUFLEN; i++){
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002644:	dbe0      	blt.n	8002608 <HAL_ADC_ConvHalfCpltCallback+0x70>
	}
	HAL_GPIO_TogglePin(DMAOutput_GPIO_Port, DMAOutput_Pin);
 8002646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264a:	4812      	ldr	r0, [pc, #72]	; (8002694 <HAL_ADC_ConvHalfCpltCallback+0xfc>)
 800264c:	f002 f91b 	bl	8004886 <HAL_GPIO_TogglePin>

		//Obliczenie częstotliwości podstawowej
		calculateFFT(signal0filtered, 2*BUFLEN, &maxpp0, &fundamental0, 10000);
 8002650:	f242 7310 	movw	r3, #10000	; 0x2710
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002658:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 800265a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265e:	4813      	ldr	r0, [pc, #76]	; (80026ac <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8002660:	f7fe fd60 	bl	8001124 <calculateFFT>
		fund[0] = (uint16_t)fundamental0;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800266e:	ee17 3a90 	vmov	r3, s15
 8002672:	b29a      	uxth	r2, r3
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8002676:	801a      	strh	r2, [r3, #0]
		maxpp[0] = maxpp0;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_ADC_ConvHalfCpltCallback+0x124>)
 800267e:	801a      	strh	r2, [r3, #0]
		printf("F0 = %d\n", fund[0]);
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	480e      	ldr	r0, [pc, #56]	; (80026c0 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8002688:	f007 f836 	bl	80096f8 <iprintf>
//					NoteOld[i] = NoteNew[i];
//					HAL_UART_Transmit(&huart2, txBuffer, 6, 10);
//				}
//			}
//		}
}
 800268c:	bf00      	nop
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40020000 	.word	0x40020000
 8002698:	20001f18 	.word	0x20001f18
 800269c:	20000518 	.word	0x20000518
 80026a0:	200023a0 	.word	0x200023a0
 80026a4:	200023a4 	.word	0x200023a4
 80026a8:	20002394 	.word	0x20002394
 80026ac:	20001718 	.word	0x20001718
 80026b0:	20002334 	.word	0x20002334
 80026b4:	20002324 	.word	0x20002324
 80026b8:	20002328 	.word	0x20002328
 80026bc:	20002318 	.word	0x20002318
 80026c0:	0800d280 	.word	0x0800d280

080026c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026cc:	e7fe      	b.n	80026cc <Error_Handler+0x8>
	...

080026d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800270e:	2007      	movs	r0, #7
 8002710:	f001 f8e0 	bl	80038d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2f      	ldr	r2, [pc, #188]	; (80027fc <HAL_ADC_MspInit+0xdc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d157      	bne.n	80027f2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_ADC_MspInit+0xe0>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HAL_ADC_MspInit+0xe0>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_ADC_MspInit+0xe0>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_ADC_MspInit+0xe0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_ADC_MspInit+0xe0>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_ADC_MspInit+0xe0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800277a:	2301      	movs	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277e:	2303      	movs	r3, #3
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	481d      	ldr	r0, [pc, #116]	; (8002804 <HAL_ADC_MspInit+0xe4>)
 800278e:	f001 fecd 	bl	800452c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_ADC_MspInit+0xec>)
 8002796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 800279a:	2200      	movs	r2, #0
 800279c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800279e:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027d6:	480c      	ldr	r0, [pc, #48]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027d8:	f001 faa6 	bl	8003d28 <HAL_DMA_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027e2:	f7ff ff6f 	bl	80026c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
 80027ec:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_ADC_MspInit+0xe8>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40012000 	.word	0x40012000
 8002800:	40023800 	.word	0x40023800
 8002804:	40020000 	.word	0x40020000
 8002808:	20000314 	.word	0x20000314
 800280c:	40026410 	.word	0x40026410

08002810 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2f      	ldr	r2, [pc, #188]	; (80028ec <HAL_DAC_MspInit+0xdc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d158      	bne.n	80028e4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_DAC_MspInit+0xe0>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <HAL_DAC_MspInit+0xe0>)
 800283c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_DAC_MspInit+0xe0>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_DAC_MspInit+0xe0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <HAL_DAC_MspInit+0xe0>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_DAC_MspInit+0xe0>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800286a:	2310      	movs	r3, #16
 800286c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286e:	2303      	movs	r3, #3
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	481d      	ldr	r0, [pc, #116]	; (80028f4 <HAL_DAC_MspInit+0xe4>)
 800287e:	f001 fe55 	bl	800452c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 8002884:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <HAL_DAC_MspInit+0xec>)
 8002886:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 800288a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800288e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 8002898:	2200      	movs	r2, #0
 800289a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 800289e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028aa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ba:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80028c8:	480b      	ldr	r0, [pc, #44]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028ca:	f001 fa2d 	bl	8003d28 <HAL_DMA_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80028d4:	f7ff fef6 	bl	80026c4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_DAC_MspInit+0xe8>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80028e4:	bf00      	nop
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40007400 	.word	0x40007400
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	20000388 	.word	0x20000388
 80028fc:	40026088 	.word	0x40026088

08002900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d10d      	bne.n	800292e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_TIM_Base_MspInit+0x3c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_TIM_Base_MspInit+0x3c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_TIM_Base_MspInit+0x3c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d11e      	bne.n	80029a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_TIM_MspPostInit+0x68>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800297e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002982:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002990:	2301      	movs	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4619      	mov	r1, r3
 800299a:	4804      	ldr	r0, [pc, #16]	; (80029ac <HAL_TIM_MspPostInit+0x6c>)
 800299c:	f001 fdc6 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000

080029b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_UART_MspInit+0x164>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d134      	bne.n	8002a3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_UART_MspInit+0x168>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a4f      	ldr	r2, [pc, #316]	; (8002b18 <HAL_UART_MspInit+0x168>)
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_UART_MspInit+0x168>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_UART_MspInit+0x168>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_UART_MspInit+0x168>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_UART_MspInit+0x168>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	483d      	ldr	r0, [pc, #244]	; (8002b1c <HAL_UART_MspInit+0x16c>)
 8002a26:	f001 fd81 	bl	800452c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2026      	movs	r0, #38	; 0x26
 8002a30:	f000 ff5b 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a34:	2026      	movs	r0, #38	; 0x26
 8002a36:	f000 ff74 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a3a:	e067      	b.n	8002b0c <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <HAL_UART_MspInit+0x170>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d162      	bne.n	8002b0c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_UART_MspInit+0x168>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <HAL_UART_MspInit+0x168>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_UART_MspInit+0x168>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <HAL_UART_MspInit+0x168>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <HAL_UART_MspInit+0x168>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_UART_MspInit+0x168>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a90:	2307      	movs	r3, #7
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4822      	ldr	r0, [pc, #136]	; (8002b24 <HAL_UART_MspInit+0x174>)
 8002a9c:	f001 fd46 	bl	800452c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002aa2:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <HAL_UART_MspInit+0x17c>)
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aac:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aae:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ae0:	4811      	ldr	r0, [pc, #68]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002ae2:	f001 f921 	bl	8003d28 <HAL_DMA_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8002aec:	f7ff fdea 	bl	80026c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002af4:	635a      	str	r2, [r3, #52]	; 0x34
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_UART_MspInit+0x178>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	2027      	movs	r0, #39	; 0x27
 8002b02:	f000 fef2 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b06:	2027      	movs	r0, #39	; 0x27
 8002b08:	f000 ff0b 	bl	8003922 <HAL_NVIC_EnableIRQ>
}
 8002b0c:	bf00      	nop
 8002b0e:	3730      	adds	r7, #48	; 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40004400 	.word	0x40004400
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40004800 	.word	0x40004800
 8002b24:	40020800 	.word	0x40020800
 8002b28:	200004b8 	.word	0x200004b8
 8002b2c:	40026058 	.word	0x40026058

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <NMI_Handler+0x4>

08002b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <HardFault_Handler+0x4>

08002b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <MemManage_Handler+0x4>

08002b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <BusFault_Handler+0x4>

08002b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <UsageFault_Handler+0x4>

08002b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7c:	f000 f988 	bl	8002e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <DMA1_Stream3_IRQHandler+0x10>)
 8002b8a:	f001 fa65 	bl	8004058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200004b8 	.word	0x200004b8

08002b98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <DMA1_Stream5_IRQHandler+0x10>)
 8002b9e:	f001 fa5b 	bl	8004058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000388 	.word	0x20000388

08002bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <USART2_IRQHandler+0x10>)
 8002bb2:	f003 fca3 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000430 	.word	0x20000430

08002bc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <USART3_IRQHandler+0x10>)
 8002bc6:	f003 fc99 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000474 	.word	0x20000474

08002bd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA2_Stream0_IRQHandler+0x10>)
 8002bda:	f001 fa3d 	bl	8004058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000314 	.word	0x20000314

08002be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <_kill>:

int _kill(int pid, int sig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c02:	f006 ff11 	bl	8009a28 <__errno>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2216      	movs	r2, #22
 8002c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_exit>:

void _exit (int status)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffe7 	bl	8002bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c2a:	e7fe      	b.n	8002c2a <_exit+0x12>

08002c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e00a      	b.n	8002c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c3e:	f3af 8000 	nop.w
 8002c42:	4601      	mov	r1, r0
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	60ba      	str	r2, [r7, #8]
 8002c4a:	b2ca      	uxtb	r2, r1
 8002c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dbf0      	blt.n	8002c3e <_read+0x12>
  }

  return len;
 8002c5c:	687b      	ldr	r3, [r7, #4]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e009      	b.n	8002c8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	60ba      	str	r2, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe f9df 	bl	8001044 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	dbf1      	blt.n	8002c78 <_write+0x12>
  }
  return len;
 8002c94:	687b      	ldr	r3, [r7, #4]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <_close>:

int _close(int file)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <_isatty>:

int _isatty(int file)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cde:	2301      	movs	r3, #1
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <_sbrk+0x5c>)
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <_sbrk+0x60>)
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <_sbrk+0x64>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <_sbrk+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d38:	f006 fe76 	bl	8009a28 <__errno>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	220c      	movs	r2, #12
 8002d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e009      	b.n	8002d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <_sbrk+0x64>)
 8002d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20020000 	.word	0x20020000
 8002d68:	00000400 	.word	0x00000400
 8002d6c:	20002480 	.word	0x20002480
 8002d70:	200025d8 	.word	0x200025d8

08002d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <SystemInit+0x20>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <SystemInit+0x20>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d9c:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d9e:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002db4:	4c0b      	ldr	r4, [pc, #44]	; (8002de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dc2:	f7ff ffd7 	bl	8002d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc6:	f006 fe35 	bl	8009a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dca:	f7fe ff79 	bl	8001cc0 <main>
  bx  lr    
 8002dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8002ddc:	08021030 	.word	0x08021030
  ldr r2, =_sbss
 8002de0:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8002de4:	200025d4 	.word	0x200025d4

08002de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC_IRQHandler>
	...

08002dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <HAL_Init+0x40>)
 8002df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_Init+0x40>)
 8002e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <HAL_Init+0x40>)
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e14:	2003      	movs	r0, #3
 8002e16:	f000 fd5d 	bl	80038d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f000 f808 	bl	8002e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e20:	f7ff fc56 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x54>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_InitTick+0x58>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4619      	mov	r1, r3
 8002e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fd75 	bl	800393e <HAL_SYSTICK_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00e      	b.n	8002e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	d80a      	bhi.n	8002e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e64:	2200      	movs	r2, #0
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	f000 fd3d 	bl	80038ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e70:	4a06      	ldr	r2, [pc, #24]	; (8002e8c <HAL_InitTick+0x5c>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200000dc 	.word	0x200000dc
 8002e88:	200000e4 	.word	0x200000e4
 8002e8c:	200000e0 	.word	0x200000e0

08002e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x20>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_IncTick+0x24>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <HAL_IncTick+0x24>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	200000e4 	.word	0x200000e4
 8002eb4:	20002484 	.word	0x20002484

08002eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_GetTick+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20002484 	.word	0x20002484

08002ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff ffee 	bl	8002eb8 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d005      	beq.n	8002ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_Delay+0x44>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ef6:	bf00      	nop
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d8f7      	bhi.n	8002ef8 <HAL_Delay+0x28>
  {
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200000e4 	.word	0x200000e4

08002f18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e033      	b.n	8002f96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fbf2 	bl	8002720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d118      	bne.n	8002f88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f5e:	f023 0302 	bic.w	r3, r3, #2
 8002f62:	f043 0202 	orr.w	r2, r3, #2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fa64 	bl	8003438 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
 8002f86:	e001      	b.n	8002f8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Start_DMA+0x1e>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e0e9      	b.n	8003192 <HAL_ADC_Start_DMA+0x1f2>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d018      	beq.n	8003006 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe4:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_ADC_Start_DMA+0x1fc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <HAL_ADC_Start_DMA+0x200>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9a      	lsrs	r2, r3, #18
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ff8:	e002      	b.n	8003000 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f9      	bne.n	8002ffa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003014:	d107      	bne.n	8003026 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003024:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 80a1 	bne.w	8003178 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003074:	d106      	bne.n	8003084 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f023 0206 	bic.w	r2, r3, #6
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
 8003082:	e002      	b.n	800308a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003092:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <HAL_ADC_Start_DMA+0x204>)
 8003094:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <HAL_ADC_Start_DMA+0x208>)
 800309c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_ADC_Start_DMA+0x20c>)
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	4a41      	ldr	r2, [pc, #260]	; (80031b0 <HAL_ADC_Start_DMA+0x210>)
 80030ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	334c      	adds	r3, #76	; 0x4c
 80030e2:	4619      	mov	r1, r3
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f000 fecc 	bl	8003e84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d12a      	bne.n	800314e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <HAL_ADC_Start_DMA+0x214>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d015      	beq.n	800312e <HAL_ADC_Start_DMA+0x18e>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <HAL_ADC_Start_DMA+0x218>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d105      	bne.n	8003118 <HAL_ADC_Start_DMA+0x178>
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_ADC_Start_DMA+0x204>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_ADC_Start_DMA+0x21c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d136      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_ADC_Start_DMA+0x204>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d130      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d129      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e020      	b.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_ADC_Start_DMA+0x214>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d11b      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d114      	bne.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	e00b      	b.n	8003190 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200000dc 	.word	0x200000dc
 80031a0:	431bde83 	.word	0x431bde83
 80031a4:	40012300 	.word	0x40012300
 80031a8:	08003631 	.word	0x08003631
 80031ac:	080036eb 	.word	0x080036eb
 80031b0:	08003707 	.word	0x08003707
 80031b4:	40012000 	.word	0x40012000
 80031b8:	40012100 	.word	0x40012100
 80031bc:	40012200 	.word	0x40012200

080031c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x1c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e113      	b.n	8003418 <HAL_ADC_ConfigChannel+0x244>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	d925      	bls.n	800324c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68d9      	ldr	r1, [r3, #12]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	3b1e      	subs	r3, #30
 8003216:	2207      	movs	r2, #7
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43da      	mvns	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	400a      	ands	r2, r1
 8003224:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68d9      	ldr	r1, [r3, #12]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	4618      	mov	r0, r3
 8003238:	4603      	mov	r3, r0
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4403      	add	r3, r0
 800323e:	3b1e      	subs	r3, #30
 8003240:	409a      	lsls	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	e022      	b.n	8003292 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6919      	ldr	r1, [r3, #16]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	2207      	movs	r2, #7
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	400a      	ands	r2, r1
 800326e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6919      	ldr	r1, [r3, #16]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	4618      	mov	r0, r3
 8003282:	4603      	mov	r3, r0
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4403      	add	r3, r0
 8003288:	409a      	lsls	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b06      	cmp	r3, #6
 8003298:	d824      	bhi.n	80032e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b05      	subs	r3, #5
 80032ac:	221f      	movs	r2, #31
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4618      	mov	r0, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b05      	subs	r3, #5
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
 80032e2:	e04c      	b.n	800337e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d824      	bhi.n	8003336 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3b23      	subs	r3, #35	; 0x23
 80032fe:	221f      	movs	r2, #31
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43da      	mvns	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	400a      	ands	r2, r1
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	3b23      	subs	r3, #35	; 0x23
 8003328:	fa00 f203 	lsl.w	r2, r0, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
 8003334:	e023      	b.n	800337e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b41      	subs	r3, #65	; 0x41
 8003348:	221f      	movs	r2, #31
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	400a      	ands	r2, r1
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	4618      	mov	r0, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	3b41      	subs	r3, #65	; 0x41
 8003372:	fa00 f203 	lsl.w	r2, r0, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800337e:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_ADC_ConfigChannel+0x250>)
 8003380:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_ADC_ConfigChannel+0x254>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10f      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1d8>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b12      	cmp	r3, #18
 8003392:	d10b      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_ADC_ConfigChannel+0x254>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d12b      	bne.n	800340e <HAL_ADC_ConfigChannel+0x23a>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_ADC_ConfigChannel+0x258>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x1f4>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b11      	cmp	r3, #17
 80033c6:	d122      	bne.n	800340e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a11      	ldr	r2, [pc, #68]	; (800342c <HAL_ADC_ConfigChannel+0x258>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d111      	bne.n	800340e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_ADC_ConfigChannel+0x25c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a11      	ldr	r2, [pc, #68]	; (8003434 <HAL_ADC_ConfigChannel+0x260>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	0c9a      	lsrs	r2, r3, #18
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003400:	e002      	b.n	8003408 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3b01      	subs	r3, #1
 8003406:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f9      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40012300 	.word	0x40012300
 8003428:	40012000 	.word	0x40012000
 800342c:	10000012 	.word	0x10000012
 8003430:	200000dc 	.word	0x200000dc
 8003434:	431bde83 	.word	0x431bde83

08003438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003440:	4b79      	ldr	r3, [pc, #484]	; (8003628 <ADC_Init+0x1f0>)
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	431a      	orrs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800346c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	021a      	lsls	r2, r3, #8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	4a58      	ldr	r2, [pc, #352]	; (800362c <ADC_Init+0x1f4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6899      	ldr	r1, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	e00f      	b.n	8003536 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003534:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0202 	bic.w	r2, r2, #2
 8003544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7e1b      	ldrb	r3, [r3, #24]
 8003550:	005a      	lsls	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003572:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003582:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	3b01      	subs	r3, #1
 8003590:	035a      	lsls	r2, r3, #13
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e007      	b.n	80035ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	051a      	lsls	r2, r3, #20
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6899      	ldr	r1, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035ee:	025a      	lsls	r2, r3, #9
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6899      	ldr	r1, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	029a      	lsls	r2, r3, #10
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40012300 	.word	0x40012300
 800362c:	0f000001 	.word	0x0f000001

08003630 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003646:	2b00      	cmp	r3, #0
 8003648:	d13c      	bne.n	80036c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d12b      	bne.n	80036bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003668:	2b00      	cmp	r3, #0
 800366a:	d127      	bne.n	80036bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003684:	2b00      	cmp	r3, #0
 8003686:	d119      	bne.n	80036bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0220 	bic.w	r2, r2, #32
 8003696:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0201 	orr.w	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7fe fecb 	bl	8002458 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036c2:	e00e      	b.n	80036e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fd75 	bl	80031c0 <HAL_ADC_ErrorCallback>
}
 80036d6:	e004      	b.n	80036e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fe ff4d 	bl	8002598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f043 0204 	orr.w	r2, r3, #4
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff fd4a 	bl	80031c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <__NVIC_SetPriorityGrouping+0x44>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003750:	4013      	ands	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800375c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003766:	4a04      	ldr	r2, [pc, #16]	; (8003778 <__NVIC_SetPriorityGrouping+0x44>)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	60d3      	str	r3, [r2, #12]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <__NVIC_GetPriorityGrouping+0x18>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 0307 	and.w	r3, r3, #7
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	db0b      	blt.n	80037c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	f003 021f 	and.w	r2, r3, #31
 80037b0:	4907      	ldr	r1, [pc, #28]	; (80037d0 <__NVIC_EnableIRQ+0x38>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	2001      	movs	r0, #1
 80037ba:	fa00 f202 	lsl.w	r2, r0, r2
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000e100 	.word	0xe000e100

080037d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db0a      	blt.n	80037fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	490c      	ldr	r1, [pc, #48]	; (8003820 <__NVIC_SetPriority+0x4c>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037fc:	e00a      	b.n	8003814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4908      	ldr	r1, [pc, #32]	; (8003824 <__NVIC_SetPriority+0x50>)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3b04      	subs	r3, #4
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	440b      	add	r3, r1
 8003812:	761a      	strb	r2, [r3, #24]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f1c3 0307 	rsb	r3, r3, #7
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf28      	it	cs
 8003846:	2304      	movcs	r3, #4
 8003848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3304      	adds	r3, #4
 800384e:	2b06      	cmp	r3, #6
 8003850:	d902      	bls.n	8003858 <NVIC_EncodePriority+0x30>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3b03      	subs	r3, #3
 8003856:	e000      	b.n	800385a <NVIC_EncodePriority+0x32>
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	401a      	ands	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003870:	f04f 31ff 	mov.w	r1, #4294967295
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43d9      	mvns	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	4313      	orrs	r3, r2
         );
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a0:	d301      	bcc.n	80038a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038a2:	2301      	movs	r3, #1
 80038a4:	e00f      	b.n	80038c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <SysTick_Config+0x40>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ae:	210f      	movs	r1, #15
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	f7ff ff8e 	bl	80037d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <SysTick_Config+0x40>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <SysTick_Config+0x40>)
 80038c0:	2207      	movs	r2, #7
 80038c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	e000e010 	.word	0xe000e010

080038d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff29 	bl	8003734 <__NVIC_SetPriorityGrouping>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038fc:	f7ff ff3e 	bl	800377c <__NVIC_GetPriorityGrouping>
 8003900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	6978      	ldr	r0, [r7, #20]
 8003908:	f7ff ff8e 	bl	8003828 <NVIC_EncodePriority>
 800390c:	4602      	mov	r2, r0
 800390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff5d 	bl	80037d4 <__NVIC_SetPriority>
}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff31 	bl	8003798 <__NVIC_EnableIRQ>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ffa2 	bl	8003890 <SysTick_Config>
 800394c:	4603      	mov	r3, r0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e014      	b.n	8003992 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fe ff49 	bl	8002810 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	795b      	ldrb	r3, [r3, #5]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_DAC_Start_DMA+0x22>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e0ab      	b.n	8003b16 <HAL_DAC_Start_DMA+0x17a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2202      	movs	r2, #2
 80039c8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d12f      	bne.n	8003a30 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_DAC_Start_DMA+0x184>)
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a51      	ldr	r2, [pc, #324]	; (8003b24 <HAL_DAC_Start_DMA+0x188>)
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a50      	ldr	r2, [pc, #320]	; (8003b28 <HAL_DAC_Start_DMA+0x18c>)
 80039e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039f6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d013      	beq.n	8003a26 <HAL_DAC_Start_DMA+0x8a>
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d845      	bhi.n	8003a90 <HAL_DAC_Start_DMA+0xf4>
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_DAC_Start_DMA+0x76>
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d005      	beq.n	8003a1c <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003a10:	e03e      	b.n	8003a90 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	613b      	str	r3, [r7, #16]
        break;
 8003a1a:	e03c      	b.n	8003a96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	613b      	str	r3, [r7, #16]
        break;
 8003a24:	e037      	b.n	8003a96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3310      	adds	r3, #16
 8003a2c:	613b      	str	r3, [r7, #16]
        break;
 8003a2e:	e032      	b.n	8003a96 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a3d      	ldr	r2, [pc, #244]	; (8003b2c <HAL_DAC_Start_DMA+0x190>)
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <HAL_DAC_Start_DMA+0x194>)
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a3b      	ldr	r2, [pc, #236]	; (8003b34 <HAL_DAC_Start_DMA+0x198>)
 8003a46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d013      	beq.n	8003a86 <HAL_DAC_Start_DMA+0xea>
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d817      	bhi.n	8003a94 <HAL_DAC_Start_DMA+0xf8>
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_DAC_Start_DMA+0xd6>
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d005      	beq.n	8003a7c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003a70:	e010      	b.n	8003a94 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	613b      	str	r3, [r7, #16]
        break;
 8003a7a:	e00c      	b.n	8003a96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3318      	adds	r3, #24
 8003a82:	613b      	str	r3, [r7, #16]
        break;
 8003a84:	e007      	b.n	8003a96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	331c      	adds	r3, #28
 8003a8c:	613b      	str	r3, [r7, #16]
        break;
 8003a8e:	e002      	b.n	8003a96 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003a94:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d111      	bne.n	8003ac0 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6898      	ldr	r0, [r3, #8]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	f000 f9e5 	bl	8003e84 <HAL_DMA_Start_IT>
 8003aba:	4603      	mov	r3, r0
 8003abc:	75fb      	strb	r3, [r7, #23]
 8003abe:	e010      	b.n	8003ae2 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ace:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68d8      	ldr	r0, [r3, #12]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	f000 f9d3 	bl	8003e84 <HAL_DMA_Start_IT>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2201      	movs	r2, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e005      	b.n	8003b14 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	08003c13 	.word	0x08003c13
 8003b24:	08003c35 	.word	0x08003c35
 8003b28:	08003c51 	.word	0x08003c51
 8003b2c:	08003cbb 	.word	0x08003cbb
 8003b30:	08003cdd 	.word	0x08003cdd
 8003b34:	08003cf9 	.word	0x08003cf9

08003b38 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	795b      	ldrb	r3, [r3, #5]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_DAC_ConfigChannel+0x18>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e03c      	b.n	8003c06 <HAL_DAC_ConfigChannel+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2202      	movs	r2, #2
 8003b96:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	22c0      	movs	r2, #192	; 0xc0
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff ff89 	bl	8003b38 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	711a      	strb	r2, [r3, #4]
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff ff82 	bl	8003b4c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f043 0204 	orr.w	r2, r3, #4
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff78 	bl	8003b60 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	711a      	strb	r2, [r3, #4]
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff ffd8 	bl	8003c7e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	711a      	strb	r2, [r3, #4]
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff ffd1 	bl	8003c92 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f043 0204 	orr.w	r2, r3, #4
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ffc7 	bl	8003ca6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	711a      	strb	r2, [r3, #4]
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d34:	f7ff f8c0 	bl	8002eb8 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e099      	b.n	8003e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d64:	e00f      	b.n	8003d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d66:	f7ff f8a7 	bl	8002eb8 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d908      	bls.n	8003d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e078      	b.n	8003e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e8      	bne.n	8003d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_DMA_Init+0x158>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d107      	bne.n	8003df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	4313      	orrs	r3, r2
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d117      	bne.n	8003e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fb01 	bl	8004434 <DMA_CheckFifoParam>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e46:	2301      	movs	r3, #1
 8003e48:	e016      	b.n	8003e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fab8 	bl	80043c8 <DMA_CalcBaseAndBitshift>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	223f      	movs	r2, #63	; 0x3f
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	f010803f 	.word	0xf010803f

08003e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_DMA_Start_IT+0x26>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e040      	b.n	8003f2c <HAL_DMA_Start_IT+0xa8>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d12f      	bne.n	8003f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fa4a 	bl	800436c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	223f      	movs	r2, #63	; 0x3f
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0216 	orr.w	r2, r2, #22
 8003ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e005      	b.n	8003f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
 8003f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f42:	f7fe ffb9 	bl	8002eb8 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d008      	beq.n	8003f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e052      	b.n	800400c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0216 	bic.w	r2, r2, #22
 8003f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <HAL_DMA_Abort+0x62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0208 	bic.w	r2, r2, #8
 8003fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb6:	e013      	b.n	8003fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fb8:	f7fe ff7e 	bl	8002eb8 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e015      	b.n	800400c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e4      	bne.n	8003fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	223f      	movs	r2, #63	; 0x3f
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d004      	beq.n	8004032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e00c      	b.n	800404c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2205      	movs	r2, #5
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004064:	4b8e      	ldr	r3, [pc, #568]	; (80042a0 <HAL_DMA_IRQHandler+0x248>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a8e      	ldr	r2, [pc, #568]	; (80042a4 <HAL_DMA_IRQHandler+0x24c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0a9b      	lsrs	r3, r3, #10
 8004070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	2208      	movs	r2, #8
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01a      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0204 	bic.w	r2, r2, #4
 80040aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	2208      	movs	r2, #8
 80040b2:	409a      	lsls	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d012      	beq.n	80040fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	2201      	movs	r2, #1
 80040e8:	409a      	lsls	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0202 	orr.w	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	2204      	movs	r2, #4
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	2204      	movs	r2, #4
 800411e:	409a      	lsls	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	2210      	movs	r2, #16
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d043      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d03c      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	2210      	movs	r2, #16
 8004154:	409a      	lsls	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d018      	beq.n	800419a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d108      	bne.n	8004188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d024      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
 8004186:	e01f      	b.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
 8004198:	e016      	b.n	80041c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0208 	bic.w	r2, r2, #8
 80041b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	2220      	movs	r2, #32
 80041ce:	409a      	lsls	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 808f 	beq.w	80042f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8087 	beq.w	80042f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	2220      	movs	r2, #32
 80041f0:	409a      	lsls	r2, r3
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d136      	bne.n	8004270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0216 	bic.w	r2, r2, #22
 8004210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_DMA_IRQHandler+0x1da>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0208 	bic.w	r2, r2, #8
 8004240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	223f      	movs	r2, #63	; 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	d07e      	beq.n	8004364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3
        }
        return;
 800426e:	e079      	b.n	8004364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01d      	beq.n	80042ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	2b00      	cmp	r3, #0
 8004292:	d031      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
 800429c:	e02c      	b.n	80042f8 <HAL_DMA_IRQHandler+0x2a0>
 800429e:	bf00      	nop
 80042a0:	200000dc 	.word	0x200000dc
 80042a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d023      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
 80042b8:	e01e      	b.n	80042f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10f      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0210 	bic.w	r2, r2, #16
 80042d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d032      	beq.n	8004366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d022      	beq.n	8004352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2205      	movs	r2, #5
 8004310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	3301      	adds	r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	d307      	bcc.n	8004340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f2      	bne.n	8004324 <HAL_DMA_IRQHandler+0x2cc>
 800433e:	e000      	b.n	8004342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
 8004362:	e000      	b.n	8004366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004364:	bf00      	nop
    }
  }
}
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d108      	bne.n	80043ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043aa:	e007      	b.n	80043bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3b10      	subs	r3, #16
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <DMA_CalcBaseAndBitshift+0x64>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043e2:	4a13      	ldr	r2, [pc, #76]	; (8004430 <DMA_CalcBaseAndBitshift+0x68>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d909      	bls.n	800440a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	1d1a      	adds	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	659a      	str	r2, [r3, #88]	; 0x58
 8004408:	e007      	b.n	800441a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	aaaaaaab 	.word	0xaaaaaaab
 8004430:	0800d2a4 	.word	0x0800d2a4

08004434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11f      	bne.n	800448e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d856      	bhi.n	8004502 <DMA_CheckFifoParam+0xce>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <DMA_CheckFifoParam+0x28>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800446d 	.word	0x0800446d
 8004460:	0800447f 	.word	0x0800447f
 8004464:	0800446d 	.word	0x0800446d
 8004468:	08004503 	.word	0x08004503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d046      	beq.n	8004506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e043      	b.n	8004506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004486:	d140      	bne.n	800450a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448c:	e03d      	b.n	800450a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	d121      	bne.n	80044dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d837      	bhi.n	800450e <DMA_CheckFifoParam+0xda>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <DMA_CheckFifoParam+0x70>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044bb 	.word	0x080044bb
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	080044cd 	.word	0x080044cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      break;
 80044b8:	e030      	b.n	800451c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d025      	beq.n	8004512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ca:	e022      	b.n	8004512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044d4:	d11f      	bne.n	8004516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044da:	e01c      	b.n	8004516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d903      	bls.n	80044ea <DMA_CheckFifoParam+0xb6>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d003      	beq.n	80044f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044e8:	e018      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      break;
 80044ee:	e015      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e00b      	b.n	800451a <DMA_CheckFifoParam+0xe6>
      break;
 8004502:	bf00      	nop
 8004504:	e00a      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 8004506:	bf00      	nop
 8004508:	e008      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800450a:	bf00      	nop
 800450c:	e006      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800450e:	bf00      	nop
 8004510:	e004      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;   
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
    }
  } 
  
  return status; 
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop

0800452c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e165      	b.n	8004814 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004548:	2201      	movs	r2, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	f040 8154 	bne.w	800480e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d005      	beq.n	800457e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800457a:	2b02      	cmp	r3, #2
 800457c:	d130      	bne.n	80045e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	2203      	movs	r2, #3
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b4:	2201      	movs	r2, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 0201 	and.w	r2, r3, #1
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d017      	beq.n	800461c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2203      	movs	r2, #3
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4013      	ands	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d123      	bne.n	8004670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	08da      	lsrs	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3208      	adds	r2, #8
 8004630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	220f      	movs	r2, #15
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	08da      	lsrs	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3208      	adds	r2, #8
 800466a:	69b9      	ldr	r1, [r7, #24]
 800466c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	2203      	movs	r2, #3
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0203 	and.w	r2, r3, #3
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80ae 	beq.w	800480e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	4b5d      	ldr	r3, [pc, #372]	; (800482c <HAL_GPIO_Init+0x300>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	4a5c      	ldr	r2, [pc, #368]	; (800482c <HAL_GPIO_Init+0x300>)
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c0:	6453      	str	r3, [r2, #68]	; 0x44
 80046c2:	4b5a      	ldr	r3, [pc, #360]	; (800482c <HAL_GPIO_Init+0x300>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ce:	4a58      	ldr	r2, [pc, #352]	; (8004830 <HAL_GPIO_Init+0x304>)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3302      	adds	r3, #2
 80046d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a4f      	ldr	r2, [pc, #316]	; (8004834 <HAL_GPIO_Init+0x308>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d025      	beq.n	8004746 <HAL_GPIO_Init+0x21a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a4e      	ldr	r2, [pc, #312]	; (8004838 <HAL_GPIO_Init+0x30c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01f      	beq.n	8004742 <HAL_GPIO_Init+0x216>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a4d      	ldr	r2, [pc, #308]	; (800483c <HAL_GPIO_Init+0x310>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d019      	beq.n	800473e <HAL_GPIO_Init+0x212>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a4c      	ldr	r2, [pc, #304]	; (8004840 <HAL_GPIO_Init+0x314>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_GPIO_Init+0x20e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <HAL_GPIO_Init+0x318>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00d      	beq.n	8004736 <HAL_GPIO_Init+0x20a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a4a      	ldr	r2, [pc, #296]	; (8004848 <HAL_GPIO_Init+0x31c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <HAL_GPIO_Init+0x206>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_GPIO_Init+0x320>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d101      	bne.n	800472e <HAL_GPIO_Init+0x202>
 800472a:	2306      	movs	r3, #6
 800472c:	e00c      	b.n	8004748 <HAL_GPIO_Init+0x21c>
 800472e:	2307      	movs	r3, #7
 8004730:	e00a      	b.n	8004748 <HAL_GPIO_Init+0x21c>
 8004732:	2305      	movs	r3, #5
 8004734:	e008      	b.n	8004748 <HAL_GPIO_Init+0x21c>
 8004736:	2304      	movs	r3, #4
 8004738:	e006      	b.n	8004748 <HAL_GPIO_Init+0x21c>
 800473a:	2303      	movs	r3, #3
 800473c:	e004      	b.n	8004748 <HAL_GPIO_Init+0x21c>
 800473e:	2302      	movs	r3, #2
 8004740:	e002      	b.n	8004748 <HAL_GPIO_Init+0x21c>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_GPIO_Init+0x21c>
 8004746:	2300      	movs	r3, #0
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	f002 0203 	and.w	r2, r2, #3
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	4093      	lsls	r3, r2
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004758:	4935      	ldr	r1, [pc, #212]	; (8004830 <HAL_GPIO_Init+0x304>)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004766:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_GPIO_Init+0x324>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478a:	4a31      	ldr	r2, [pc, #196]	; (8004850 <HAL_GPIO_Init+0x324>)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_GPIO_Init+0x324>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b4:	4a26      	ldr	r2, [pc, #152]	; (8004850 <HAL_GPIO_Init+0x324>)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_GPIO_Init+0x324>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_GPIO_Init+0x324>)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_GPIO_Init+0x324>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004808:	4a11      	ldr	r2, [pc, #68]	; (8004850 <HAL_GPIO_Init+0x324>)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	f67f ae96 	bls.w	8004548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	3724      	adds	r7, #36	; 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	40013800 	.word	0x40013800
 8004834:	40020000 	.word	0x40020000
 8004838:	40020400 	.word	0x40020400
 800483c:	40020800 	.word	0x40020800
 8004840:	40020c00 	.word	0x40020c00
 8004844:	40021000 	.word	0x40021000
 8004848:	40021400 	.word	0x40021400
 800484c:	40021800 	.word	0x40021800
 8004850:	40013c00 	.word	0x40013c00

08004854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
 8004860:	4613      	mov	r3, r2
 8004862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004864:	787b      	ldrb	r3, [r7, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004870:	e003      	b.n	800487a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	619a      	str	r2, [r3, #24]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	460b      	mov	r3, r1
 8004890:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004898:	887a      	ldrh	r2, [r7, #2]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4013      	ands	r3, r2
 800489e:	041a      	lsls	r2, r3, #16
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	43d9      	mvns	r1, r3
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	400b      	ands	r3, r1
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <HAL_PWREx_EnableOverDrive+0x90>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	4a1f      	ldr	r2, [pc, #124]	; (800494c <HAL_PWREx_EnableOverDrive+0x90>)
 80048d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d4:	6413      	str	r3, [r2, #64]	; 0x40
 80048d6:	4b1d      	ldr	r3, [pc, #116]	; (800494c <HAL_PWREx_EnableOverDrive+0x90>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048e2:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <HAL_PWREx_EnableOverDrive+0x94>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e8:	f7fe fae6 	bl	8002eb8 <HAL_GetTick>
 80048ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048ee:	e009      	b.n	8004904 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048f0:	f7fe fae2 	bl	8002eb8 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048fe:	d901      	bls.n	8004904 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e01f      	b.n	8004944 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_PWREx_EnableOverDrive+0x98>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d1ee      	bne.n	80048f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004912:	4b11      	ldr	r3, [pc, #68]	; (8004958 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004918:	f7fe face 	bl	8002eb8 <HAL_GetTick>
 800491c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800491e:	e009      	b.n	8004934 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004920:	f7fe faca 	bl	8002eb8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800492e:	d901      	bls.n	8004934 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e007      	b.n	8004944 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <HAL_PWREx_EnableOverDrive+0x98>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004940:	d1ee      	bne.n	8004920 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40023800 	.word	0x40023800
 8004950:	420e0040 	.word	0x420e0040
 8004954:	40007000 	.word	0x40007000
 8004958:	420e0044 	.word	0x420e0044

0800495c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0cc      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b68      	ldr	r3, [pc, #416]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d90c      	bls.n	8004998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b63      	ldr	r3, [pc, #396]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0b8      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b0:	4b59      	ldr	r3, [pc, #356]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a58      	ldr	r2, [pc, #352]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c8:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b50      	ldr	r3, [pc, #320]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	494d      	ldr	r1, [pc, #308]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d044      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d119      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e067      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3a:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4934      	ldr	r1, [pc, #208]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a4c:	f7fe fa34 	bl	8002eb8 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fe fa30 	bl	8002eb8 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e04f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d20c      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e032      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4916      	ldr	r1, [pc, #88]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	490e      	ldr	r1, [pc, #56]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ae2:	f000 f855 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	490a      	ldr	r1, [pc, #40]	; (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe f994 	bl	8002e30 <HAL_InitTick>

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	0800d28c 	.word	0x0800d28c
 8004b20:	200000dc 	.word	0x200000dc
 8004b24:	200000e0 	.word	0x200000e0

08004b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b2c:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	200000dc 	.word	0x200000dc

08004b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b44:	f7ff fff0 	bl	8004b28 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0a9b      	lsrs	r3, r3, #10
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	0800d29c 	.word	0x0800d29c

08004b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b6c:	f7ff ffdc 	bl	8004b28 <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	0b5b      	lsrs	r3, r3, #13
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	0800d29c 	.word	0x0800d29c

08004b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b0ae      	sub	sp, #184	; 0xb8
 8004b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb6:	4bcb      	ldr	r3, [pc, #812]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	f200 8206 	bhi.w	8004fd0 <HAL_RCC_GetSysClockFreq+0x440>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c01 	.word	0x08004c01
 8004bd0:	08004fd1 	.word	0x08004fd1
 8004bd4:	08004fd1 	.word	0x08004fd1
 8004bd8:	08004fd1 	.word	0x08004fd1
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	08004fd1 	.word	0x08004fd1
 8004be4:	08004fd1 	.word	0x08004fd1
 8004be8:	08004fd1 	.word	0x08004fd1
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004fd1 	.word	0x08004fd1
 8004bf4:	08004fd1 	.word	0x08004fd1
 8004bf8:	08004fd1 	.word	0x08004fd1
 8004bfc:	08004e01 	.word	0x08004e01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c00:	4bb9      	ldr	r3, [pc, #740]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004c06:	e1e7      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c08:	4bb8      	ldr	r3, [pc, #736]	; (8004eec <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c0e:	e1e3      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4bb4      	ldr	r3, [pc, #720]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1c:	4bb1      	ldr	r3, [pc, #708]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d071      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c28:	4bae      	ldr	r3, [pc, #696]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c4e:	4622      	mov	r2, r4
 8004c50:	462b      	mov	r3, r5
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c60:	0150      	lsls	r0, r2, #5
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4621      	mov	r1, r4
 8004c68:	1a51      	subs	r1, r2, r1
 8004c6a:	6439      	str	r1, [r7, #64]	; 0x40
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c72:	647b      	str	r3, [r7, #68]	; 0x44
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c80:	4649      	mov	r1, r9
 8004c82:	018b      	lsls	r3, r1, #6
 8004c84:	4641      	mov	r1, r8
 8004c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	018a      	lsls	r2, r1, #6
 8004c8e:	4641      	mov	r1, r8
 8004c90:	1a51      	subs	r1, r2, r1
 8004c92:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c94:	4649      	mov	r1, r9
 8004c96:	eb63 0301 	sbc.w	r3, r3, r1
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ca8:	4649      	mov	r1, r9
 8004caa:	00cb      	lsls	r3, r1, #3
 8004cac:	4641      	mov	r1, r8
 8004cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	00ca      	lsls	r2, r1, #3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	460a      	mov	r2, r1
 8004cc6:	eb42 0303 	adc.w	r3, r2, r3
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cd8:	4629      	mov	r1, r5
 8004cda:	024b      	lsls	r3, r1, #9
 8004cdc:	4621      	mov	r1, r4
 8004cde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	024a      	lsls	r2, r1, #9
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cf8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cfc:	f7fc f824 	bl	8000d48 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4613      	mov	r3, r2
 8004d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d0a:	e067      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0c:	4b75      	ldr	r3, [pc, #468]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d26:	2300      	movs	r3, #0
 8004d28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d2e:	4622      	mov	r2, r4
 8004d30:	462b      	mov	r3, r5
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f04f 0100 	mov.w	r1, #0
 8004d3a:	0159      	lsls	r1, r3, #5
 8004d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d40:	0150      	lsls	r0, r2, #5
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4621      	mov	r1, r4
 8004d48:	1a51      	subs	r1, r2, r1
 8004d4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d60:	4649      	mov	r1, r9
 8004d62:	018b      	lsls	r3, r1, #6
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	018a      	lsls	r2, r1, #6
 8004d6e:	4641      	mov	r1, r8
 8004d70:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d74:	4649      	mov	r1, r9
 8004d76:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d8e:	4692      	mov	sl, r2
 8004d90:	469b      	mov	fp, r3
 8004d92:	4623      	mov	r3, r4
 8004d94:	eb1a 0303 	adds.w	r3, sl, r3
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004dae:	4629      	mov	r1, r5
 8004db0:	028b      	lsls	r3, r1, #10
 8004db2:	4621      	mov	r1, r4
 8004db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db8:	4621      	mov	r1, r4
 8004dba:	028a      	lsls	r2, r1, #10
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	673b      	str	r3, [r7, #112]	; 0x70
 8004dc8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004dce:	f7fb ffbb 	bl	8000d48 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ddc:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	3301      	adds	r3, #1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dfe:	e0eb      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e00:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e0c:	4b35      	ldr	r3, [pc, #212]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d06b      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e18:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	2200      	movs	r2, #0
 8004e20:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e34:	4622      	mov	r2, r4
 8004e36:	462b      	mov	r3, r5
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	0159      	lsls	r1, r3, #5
 8004e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e46:	0150      	lsls	r0, r2, #5
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	1a51      	subs	r1, r2, r1
 8004e50:	61b9      	str	r1, [r7, #24]
 8004e52:	4629      	mov	r1, r5
 8004e54:	eb63 0301 	sbc.w	r3, r3, r1
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e66:	4659      	mov	r1, fp
 8004e68:	018b      	lsls	r3, r1, #6
 8004e6a:	4651      	mov	r1, sl
 8004e6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e70:	4651      	mov	r1, sl
 8004e72:	018a      	lsls	r2, r1, #6
 8004e74:	4651      	mov	r1, sl
 8004e76:	ebb2 0801 	subs.w	r8, r2, r1
 8004e7a:	4659      	mov	r1, fp
 8004e7c:	eb63 0901 	sbc.w	r9, r3, r1
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e94:	4690      	mov	r8, r2
 8004e96:	4699      	mov	r9, r3
 8004e98:	4623      	mov	r3, r4
 8004e9a:	eb18 0303 	adds.w	r3, r8, r3
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	eb49 0303 	adc.w	r3, r9, r3
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	024b      	lsls	r3, r1, #9
 8004eb8:	4621      	mov	r1, r4
 8004eba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	024a      	lsls	r2, r1, #9
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eca:	2200      	movs	r2, #0
 8004ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ece:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ed0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ed4:	f7fb ff38 	bl	8000d48 <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4613      	mov	r3, r2
 8004ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee2:	e065      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x420>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	00f42400 	.word	0x00f42400
 8004eec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef0:	4b3d      	ldr	r3, [pc, #244]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	099b      	lsrs	r3, r3, #6
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	4611      	mov	r1, r2
 8004efc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f00:	653b      	str	r3, [r7, #80]	; 0x50
 8004f02:	2300      	movs	r3, #0
 8004f04:	657b      	str	r3, [r7, #84]	; 0x54
 8004f06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	f04f 0000 	mov.w	r0, #0
 8004f12:	f04f 0100 	mov.w	r1, #0
 8004f16:	0159      	lsls	r1, r3, #5
 8004f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f1c:	0150      	lsls	r0, r2, #5
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4641      	mov	r1, r8
 8004f24:	1a51      	subs	r1, r2, r1
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	4649      	mov	r1, r9
 8004f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f3c:	4659      	mov	r1, fp
 8004f3e:	018b      	lsls	r3, r1, #6
 8004f40:	4651      	mov	r1, sl
 8004f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f46:	4651      	mov	r1, sl
 8004f48:	018a      	lsls	r2, r1, #6
 8004f4a:	4651      	mov	r1, sl
 8004f4c:	1a54      	subs	r4, r2, r1
 8004f4e:	4659      	mov	r1, fp
 8004f50:	eb63 0501 	sbc.w	r5, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	00eb      	lsls	r3, r5, #3
 8004f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f62:	00e2      	lsls	r2, r4, #3
 8004f64:	4614      	mov	r4, r2
 8004f66:	461d      	mov	r5, r3
 8004f68:	4643      	mov	r3, r8
 8004f6a:	18e3      	adds	r3, r4, r3
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	464b      	mov	r3, r9
 8004f70:	eb45 0303 	adc.w	r3, r5, r3
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f82:	4629      	mov	r1, r5
 8004f84:	028b      	lsls	r3, r1, #10
 8004f86:	4621      	mov	r1, r4
 8004f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	028a      	lsls	r2, r1, #10
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f98:	2200      	movs	r2, #0
 8004f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fa2:	f7fb fed1 	bl	8000d48 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4613      	mov	r3, r2
 8004fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	0f1b      	lsrs	r3, r3, #28
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fce:	e003      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	37b8      	adds	r7, #184	; 0xb8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	00f42400 	.word	0x00f42400

08004ff0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e28d      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8083 	beq.w	8005116 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005010:	4b94      	ldr	r3, [pc, #592]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b04      	cmp	r3, #4
 800501a:	d019      	beq.n	8005050 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800501c:	4b91      	ldr	r3, [pc, #580]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005024:	2b08      	cmp	r3, #8
 8005026:	d106      	bne.n	8005036 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005028:	4b8e      	ldr	r3, [pc, #568]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005034:	d00c      	beq.n	8005050 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b8b      	ldr	r3, [pc, #556]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d112      	bne.n	8005068 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b88      	ldr	r3, [pc, #544]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504e:	d10b      	bne.n	8005068 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	4b84      	ldr	r3, [pc, #528]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05b      	beq.n	8005114 <HAL_RCC_OscConfig+0x124>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d157      	bne.n	8005114 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e25a      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d106      	bne.n	8005080 <HAL_RCC_OscConfig+0x90>
 8005072:	4b7c      	ldr	r3, [pc, #496]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7b      	ldr	r2, [pc, #492]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e01d      	b.n	80050bc <HAL_RCC_OscConfig+0xcc>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0xb4>
 800508a:	4b76      	ldr	r3, [pc, #472]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a75      	ldr	r2, [pc, #468]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b73      	ldr	r3, [pc, #460]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a72      	ldr	r2, [pc, #456]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0xcc>
 80050a4:	4b6f      	ldr	r3, [pc, #444]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6e      	ldr	r2, [pc, #440]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80050aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b6c      	ldr	r3, [pc, #432]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a6b      	ldr	r2, [pc, #428]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80050b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fd fef8 	bl	8002eb8 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050cc:	f7fd fef4 	bl	8002eb8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e21f      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b61      	ldr	r3, [pc, #388]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0xdc>
 80050ea:	e014      	b.n	8005116 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd fee4 	bl	8002eb8 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f4:	f7fd fee0 	bl	8002eb8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e20b      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	4b57      	ldr	r3, [pc, #348]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x104>
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d06f      	beq.n	8005202 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005122:	4b50      	ldr	r3, [pc, #320]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b00      	cmp	r3, #0
 800512c:	d017      	beq.n	800515e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800512e:	4b4d      	ldr	r3, [pc, #308]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005136:	2b08      	cmp	r3, #8
 8005138:	d105      	bne.n	8005146 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800513a:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b47      	ldr	r3, [pc, #284]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d11c      	bne.n	800518c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005152:	4b44      	ldr	r3, [pc, #272]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d116      	bne.n	800518c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515e:	4b41      	ldr	r3, [pc, #260]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_RCC_OscConfig+0x186>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d001      	beq.n	8005176 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e1d3      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4937      	ldr	r1, [pc, #220]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518a:	e03a      	b.n	8005202 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005194:	4b34      	ldr	r3, [pc, #208]	; (8005268 <HAL_RCC_OscConfig+0x278>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fd fe8d 	bl	8002eb8 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a2:	f7fd fe89 	bl	8002eb8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1b4      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4925      	ldr	r1, [pc, #148]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
 80051d4:	e015      	b.n	8005202 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d6:	4b24      	ldr	r3, [pc, #144]	; (8005268 <HAL_RCC_OscConfig+0x278>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd fe6c 	bl	8002eb8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e4:	f7fd fe68 	bl	8002eb8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e193      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d036      	beq.n	800527c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005218:	2201      	movs	r2, #1
 800521a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fd fe4c 	bl	8002eb8 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005224:	f7fd fe48 	bl	8002eb8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e173      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x234>
 8005242:	e01b      	b.n	800527c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524a:	f7fd fe35 	bl	8002eb8 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005250:	e00e      	b.n	8005270 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005252:	f7fd fe31 	bl	8002eb8 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d907      	bls.n	8005270 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e15c      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
 8005264:	40023800 	.word	0x40023800
 8005268:	42470000 	.word	0x42470000
 800526c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005270:	4b8a      	ldr	r3, [pc, #552]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ea      	bne.n	8005252 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8097 	beq.w	80053b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800528e:	4b83      	ldr	r3, [pc, #524]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	4b7f      	ldr	r3, [pc, #508]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	4a7e      	ldr	r2, [pc, #504]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6413      	str	r3, [r2, #64]	; 0x40
 80052aa:	4b7c      	ldr	r3, [pc, #496]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ba:	4b79      	ldr	r3, [pc, #484]	; (80054a0 <HAL_RCC_OscConfig+0x4b0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d118      	bne.n	80052f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c6:	4b76      	ldr	r3, [pc, #472]	; (80054a0 <HAL_RCC_OscConfig+0x4b0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a75      	ldr	r2, [pc, #468]	; (80054a0 <HAL_RCC_OscConfig+0x4b0>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052d2:	f7fd fdf1 	bl	8002eb8 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052da:	f7fd fded 	bl	8002eb8 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e118      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ec:	4b6c      	ldr	r3, [pc, #432]	; (80054a0 <HAL_RCC_OscConfig+0x4b0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x31e>
 8005300:	4b66      	ldr	r3, [pc, #408]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	4a65      	ldr	r2, [pc, #404]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6713      	str	r3, [r2, #112]	; 0x70
 800530c:	e01c      	b.n	8005348 <HAL_RCC_OscConfig+0x358>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b05      	cmp	r3, #5
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x340>
 8005316:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a60      	ldr	r2, [pc, #384]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 800531c:	f043 0304 	orr.w	r3, r3, #4
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
 8005322:	4b5e      	ldr	r3, [pc, #376]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	4a5d      	ldr	r2, [pc, #372]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6713      	str	r3, [r2, #112]	; 0x70
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0x358>
 8005330:	4b5a      	ldr	r3, [pc, #360]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a59      	ldr	r2, [pc, #356]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
 800533c:	4b57      	ldr	r3, [pc, #348]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005340:	4a56      	ldr	r2, [pc, #344]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005342:	f023 0304 	bic.w	r3, r3, #4
 8005346:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fd fdb2 	bl	8002eb8 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	e00a      	b.n	800536e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fd fdae 	bl	8002eb8 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e0d7      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	4b4b      	ldr	r3, [pc, #300]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ee      	beq.n	8005358 <HAL_RCC_OscConfig+0x368>
 800537a:	e014      	b.n	80053a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fd fd9c 	bl	8002eb8 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005382:	e00a      	b.n	800539a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fd fd98 	bl	8002eb8 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e0c1      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539a:	4b40      	ldr	r3, [pc, #256]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1ee      	bne.n	8005384 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ac:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	4a3a      	ldr	r2, [pc, #232]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 80053b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80ad 	beq.w	800551c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053c2:	4b36      	ldr	r3, [pc, #216]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d060      	beq.n	8005490 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d145      	bne.n	8005462 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d6:	4b33      	ldr	r3, [pc, #204]	; (80054a4 <HAL_RCC_OscConfig+0x4b4>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fd fd6c 	bl	8002eb8 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fd fd68 	bl	8002eb8 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e093      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f6:	4b29      	ldr	r3, [pc, #164]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	019b      	lsls	r3, r3, #6
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	3b01      	subs	r3, #1
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	071b      	lsls	r3, r3, #28
 800542e:	491b      	ldr	r1, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <HAL_RCC_OscConfig+0x4b4>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543a:	f7fd fd3d 	bl	8002eb8 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005442:	f7fd fd39 	bl	8002eb8 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e064      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x452>
 8005460:	e05c      	b.n	800551c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <HAL_RCC_OscConfig+0x4b4>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fd26 	bl	8002eb8 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005470:	f7fd fd22 	bl	8002eb8 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e04d      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_OscConfig+0x4ac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x480>
 800548e:	e045      	b.n	800551c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e040      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
 800549c:	40023800 	.word	0x40023800
 80054a0:	40007000 	.word	0x40007000
 80054a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a8:	4b1f      	ldr	r3, [pc, #124]	; (8005528 <HAL_RCC_OscConfig+0x538>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d030      	beq.n	8005518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d129      	bne.n	8005518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d122      	bne.n	8005518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d119      	bne.n	8005518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d10f      	bne.n	8005518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d107      	bne.n	8005518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800

0800552c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e041      	b.n	80055c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fd f9d4 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f000 fadc 	bl	8005b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e046      	b.n	8005672 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a23      	ldr	r2, [pc, #140]	; (8005680 <HAL_TIM_Base_Start+0xb4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d022      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d01d      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1f      	ldr	r2, [pc, #124]	; (8005684 <HAL_TIM_Base_Start+0xb8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d018      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <HAL_TIM_Base_Start+0xbc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <HAL_TIM_Base_Start+0xc0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <HAL_TIM_Base_Start+0xc4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <HAL_TIM_Base_Start+0xc8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_Base_Start+0x70>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <HAL_TIM_Base_Start+0xcc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d111      	bne.n	8005660 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b06      	cmp	r3, #6
 800564c:	d010      	beq.n	8005670 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	e007      	b.n	8005670 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40001800 	.word	0x40001800

0800569c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e041      	b.n	8005732 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f839 	bl	800573a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f000 fa24 	bl	8005b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <HAL_TIM_OC_Start+0x24>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	e022      	b.n	80057ba <HAL_TIM_OC_Start+0x6a>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b04      	cmp	r3, #4
 8005778:	d109      	bne.n	800578e <HAL_TIM_OC_Start+0x3e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	bf14      	ite	ne
 8005786:	2301      	movne	r3, #1
 8005788:	2300      	moveq	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	e015      	b.n	80057ba <HAL_TIM_OC_Start+0x6a>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d109      	bne.n	80057a8 <HAL_TIM_OC_Start+0x58>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	bf14      	ite	ne
 80057a0:	2301      	movne	r3, #1
 80057a2:	2300      	moveq	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	e008      	b.n	80057ba <HAL_TIM_OC_Start+0x6a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e07c      	b.n	80058bc <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_OC_Start+0x82>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d0:	e013      	b.n	80057fa <HAL_TIM_OC_Start+0xaa>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_OC_Start+0x92>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e0:	e00b      	b.n	80057fa <HAL_TIM_OC_Start+0xaa>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_OC_Start+0xa2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f0:	e003      	b.n	80057fa <HAL_TIM_OC_Start+0xaa>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2201      	movs	r2, #1
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fc7a 	bl	80060fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <HAL_TIM_OC_Start+0x174>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_TIM_OC_Start+0xcc>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <HAL_TIM_OC_Start+0x178>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d101      	bne.n	8005820 <HAL_TIM_OC_Start+0xd0>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <HAL_TIM_OC_Start+0xd2>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005834:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a22      	ldr	r2, [pc, #136]	; (80058c4 <HAL_TIM_OC_Start+0x174>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <HAL_TIM_OC_Start+0x136>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005848:	d01d      	beq.n	8005886 <HAL_TIM_OC_Start+0x136>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <HAL_TIM_OC_Start+0x17c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <HAL_TIM_OC_Start+0x136>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_TIM_OC_Start+0x180>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_TIM_OC_Start+0x136>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <HAL_TIM_OC_Start+0x184>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_TIM_OC_Start+0x136>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a16      	ldr	r2, [pc, #88]	; (80058c8 <HAL_TIM_OC_Start+0x178>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_TIM_OC_Start+0x136>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <HAL_TIM_OC_Start+0x188>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_TIM_OC_Start+0x136>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a16      	ldr	r2, [pc, #88]	; (80058dc <HAL_TIM_OC_Start+0x18c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d111      	bne.n	80058aa <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b06      	cmp	r3, #6
 8005896:	d010      	beq.n	80058ba <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	e007      	b.n	80058ba <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40001800 	.word	0x40001800

080058e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e048      	b.n	8005990 <HAL_TIM_OC_ConfigChannel+0xb0>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b0c      	cmp	r3, #12
 800590a:	d839      	bhi.n	8005980 <HAL_TIM_OC_ConfigChannel+0xa0>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <HAL_TIM_OC_ConfigChannel+0x34>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005949 	.word	0x08005949
 8005918:	08005981 	.word	0x08005981
 800591c:	08005981 	.word	0x08005981
 8005920:	08005981 	.word	0x08005981
 8005924:	08005957 	.word	0x08005957
 8005928:	08005981 	.word	0x08005981
 800592c:	08005981 	.word	0x08005981
 8005930:	08005981 	.word	0x08005981
 8005934:	08005965 	.word	0x08005965
 8005938:	08005981 	.word	0x08005981
 800593c:	08005981 	.word	0x08005981
 8005940:	08005981 	.word	0x08005981
 8005944:	08005973 	.word	0x08005973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f98a 	bl	8005c68 <TIM_OC1_SetConfig>
      break;
 8005954:	e017      	b.n	8005986 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f9f3 	bl	8005d48 <TIM_OC2_SetConfig>
      break;
 8005962:	e010      	b.n	8005986 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa62 	bl	8005e34 <TIM_OC3_SetConfig>
      break;
 8005970:	e009      	b.n	8005986 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 facf 	bl	8005f1c <TIM_OC4_SetConfig>
      break;
 800597e:	e002      	b.n	8005986 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
      break;
 8005984:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_TIM_ConfigClockSource+0x1c>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e0b4      	b.n	8005b1e <HAL_TIM_ConfigClockSource+0x186>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ec:	d03e      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0xd4>
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f2:	f200 8087 	bhi.w	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fa:	f000 8086 	beq.w	8005b0a <HAL_TIM_ConfigClockSource+0x172>
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a02:	d87f      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b70      	cmp	r3, #112	; 0x70
 8005a06:	d01a      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0xa6>
 8005a08:	2b70      	cmp	r3, #112	; 0x70
 8005a0a:	d87b      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	2b60      	cmp	r3, #96	; 0x60
 8005a0e:	d050      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x11a>
 8005a10:	2b60      	cmp	r3, #96	; 0x60
 8005a12:	d877      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b50      	cmp	r3, #80	; 0x50
 8005a16:	d03c      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0xfa>
 8005a18:	2b50      	cmp	r3, #80	; 0x50
 8005a1a:	d873      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d058      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d86f      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b30      	cmp	r3, #48	; 0x30
 8005a26:	d064      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a28:	2b30      	cmp	r3, #48	; 0x30
 8005a2a:	d86b      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d060      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d867      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d05c      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d05a      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a3c:	e062      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6899      	ldr	r1, [r3, #8]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f000 fb35 	bl	80060bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	609a      	str	r2, [r3, #8]
      break;
 8005a6a:	e04f      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6899      	ldr	r1, [r3, #8]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f000 fb1e 	bl	80060bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a8e:	609a      	str	r2, [r3, #8]
      break;
 8005a90:	e03c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6859      	ldr	r1, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f000 fa92 	bl	8005fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2150      	movs	r1, #80	; 0x50
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 faeb 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 8005ab0:	e02c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f000 fab1 	bl	8006026 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2160      	movs	r1, #96	; 0x60
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fadb 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 8005ad0:	e01c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f000 fa72 	bl	8005fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2140      	movs	r1, #64	; 0x40
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 facb 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 8005af0:	e00c      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f000 fac2 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 8005b02:	e003      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
      break;
 8005b08:	e000      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a40      	ldr	r2, [pc, #256]	; (8005c3c <TIM_Base_SetConfig+0x114>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b46:	d00f      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a3d      	ldr	r2, [pc, #244]	; (8005c40 <TIM_Base_SetConfig+0x118>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a3c      	ldr	r2, [pc, #240]	; (8005c44 <TIM_Base_SetConfig+0x11c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a3b      	ldr	r2, [pc, #236]	; (8005c48 <TIM_Base_SetConfig+0x120>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3a      	ldr	r2, [pc, #232]	; (8005c4c <TIM_Base_SetConfig+0x124>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d108      	bne.n	8005b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2f      	ldr	r2, [pc, #188]	; (8005c3c <TIM_Base_SetConfig+0x114>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d02b      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b88:	d027      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2c      	ldr	r2, [pc, #176]	; (8005c40 <TIM_Base_SetConfig+0x118>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d023      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2b      	ldr	r2, [pc, #172]	; (8005c44 <TIM_Base_SetConfig+0x11c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01f      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <TIM_Base_SetConfig+0x120>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01b      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <TIM_Base_SetConfig+0x124>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d017      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a28      	ldr	r2, [pc, #160]	; (8005c50 <TIM_Base_SetConfig+0x128>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <TIM_Base_SetConfig+0x12c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00f      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a26      	ldr	r2, [pc, #152]	; (8005c58 <TIM_Base_SetConfig+0x130>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00b      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a25      	ldr	r2, [pc, #148]	; (8005c5c <TIM_Base_SetConfig+0x134>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d007      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a24      	ldr	r2, [pc, #144]	; (8005c60 <TIM_Base_SetConfig+0x138>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <TIM_Base_SetConfig+0x13c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d108      	bne.n	8005bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a0a      	ldr	r2, [pc, #40]	; (8005c3c <TIM_Base_SetConfig+0x114>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_Base_SetConfig+0xf8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <TIM_Base_SetConfig+0x124>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d103      	bne.n	8005c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	615a      	str	r2, [r3, #20]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40000c00 	.word	0x40000c00
 8005c4c:	40010400 	.word	0x40010400
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800
 8005c5c:	40001800 	.word	0x40001800
 8005c60:	40001c00 	.word	0x40001c00
 8005c64:	40002000 	.word	0x40002000

08005c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f023 0201 	bic.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 0302 	bic.w	r3, r3, #2
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a20      	ldr	r2, [pc, #128]	; (8005d40 <TIM_OC1_SetConfig+0xd8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC1_SetConfig+0x64>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <TIM_OC1_SetConfig+0xdc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10c      	bne.n	8005ce6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0308 	bic.w	r3, r3, #8
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0304 	bic.w	r3, r3, #4
 8005ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <TIM_OC1_SetConfig+0xd8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC1_SetConfig+0x8e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a14      	ldr	r2, [pc, #80]	; (8005d44 <TIM_OC1_SetConfig+0xdc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d111      	bne.n	8005d1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	621a      	str	r2, [r3, #32]
}
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40010400 	.word	0x40010400

08005d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0210 	bic.w	r2, r3, #16
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0320 	bic.w	r3, r3, #32
 8005d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <TIM_OC2_SetConfig+0xe4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_OC2_SetConfig+0x68>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <TIM_OC2_SetConfig+0xe8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10d      	bne.n	8005dcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <TIM_OC2_SetConfig+0xe4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC2_SetConfig+0x94>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <TIM_OC2_SetConfig+0xe8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d113      	bne.n	8005e04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40010400 	.word	0x40010400

08005e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <TIM_OC3_SetConfig+0xe0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC3_SetConfig+0x66>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <TIM_OC3_SetConfig+0xe4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10d      	bne.n	8005eb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a16      	ldr	r2, [pc, #88]	; (8005f14 <TIM_OC3_SetConfig+0xe0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC3_SetConfig+0x92>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <TIM_OC3_SetConfig+0xe4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d113      	bne.n	8005eee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	621a      	str	r2, [r3, #32]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400

08005f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	031b      	lsls	r3, r3, #12
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a12      	ldr	r2, [pc, #72]	; (8005fc0 <TIM_OC4_SetConfig+0xa4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_OC4_SetConfig+0x68>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <TIM_OC4_SetConfig+0xa8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d109      	bne.n	8005f98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	019b      	lsls	r3, r3, #6
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40010400 	.word	0x40010400

08005fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f023 0201 	bic.w	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f023 030a 	bic.w	r3, r3, #10
 8006004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006026:	b480      	push	{r7}
 8006028:	b087      	sub	sp, #28
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0210 	bic.w	r2, r3, #16
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f043 0307 	orr.w	r3, r3, #7
 80060a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	609a      	str	r2, [r3, #8]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	431a      	orrs	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 031f 	and.w	r3, r3, #31
 800610e:	2201      	movs	r2, #1
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1a      	ldr	r2, [r3, #32]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	43db      	mvns	r3, r3
 800611e:	401a      	ands	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1a      	ldr	r2, [r3, #32]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	fa01 f303 	lsl.w	r3, r1, r3
 8006134:	431a      	orrs	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800615c:	2302      	movs	r3, #2
 800615e:	e05a      	b.n	8006216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a21      	ldr	r2, [pc, #132]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d022      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ac:	d01d      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d018      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00e      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a18      	ldr	r2, [pc, #96]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a17      	ldr	r2, [pc, #92]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a15      	ldr	r2, [pc, #84]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d10c      	bne.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40010400 	.word	0x40010400
 8006238:	40014000 	.word	0x40014000
 800623c:	40001800 	.word	0x40001800

08006240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e03f      	b.n	80062d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fc fba2 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fed1 	bl	800702c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b08a      	sub	sp, #40	; 0x28
 80062de:	af02      	add	r7, sp, #8
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	603b      	str	r3, [r7, #0]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d17c      	bne.n	80063f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_UART_Transmit+0x2c>
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e075      	b.n	80063f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_UART_Transmit+0x3e>
 8006314:	2302      	movs	r3, #2
 8006316:	e06e      	b.n	80063f6 <HAL_UART_Transmit+0x11c>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2221      	movs	r2, #33	; 0x21
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800632e:	f7fc fdc3 	bl	8002eb8 <HAL_GetTick>
 8006332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006348:	d108      	bne.n	800635c <HAL_UART_Transmit+0x82>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e003      	b.n	8006364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800636c:	e02a      	b.n	80063c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2200      	movs	r2, #0
 8006376:	2180      	movs	r1, #128	; 0x80
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fc26 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e036      	b.n	80063f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800639c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	3302      	adds	r3, #2
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e007      	b.n	80063b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	3301      	adds	r3, #1
 80063b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1cf      	bne.n	800636e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2140      	movs	r1, #64	; 0x40
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fbf6 	bl	8006bca <UART_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e006      	b.n	80063f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b20      	cmp	r3, #32
 8006418:	d165      	bne.n	80064e6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_UART_Transmit_DMA+0x26>
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e05e      	b.n	80064e8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_UART_Transmit_DMA+0x38>
 8006434:	2302      	movs	r3, #2
 8006436:	e057      	b.n	80064e8 <HAL_UART_Transmit_DMA+0xe8>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	88fa      	ldrh	r2, [r7, #6]
 8006450:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2221      	movs	r2, #33	; 0x21
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	4a22      	ldr	r2, [pc, #136]	; (80064f0 <HAL_UART_Transmit_DMA+0xf0>)
 8006466:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646c:	4a21      	ldr	r2, [pc, #132]	; (80064f4 <HAL_UART_Transmit_DMA+0xf4>)
 800646e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006474:	4a20      	ldr	r2, [pc, #128]	; (80064f8 <HAL_UART_Transmit_DMA+0xf8>)
 8006476:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	2200      	movs	r2, #0
 800647e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	6819      	ldr	r1, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3304      	adds	r3, #4
 8006494:	461a      	mov	r2, r3
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	f7fd fcf4 	bl	8003e84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	617b      	str	r3, [r7, #20]
   return(result);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3314      	adds	r3, #20
 80064cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ce:	627a      	str	r2, [r7, #36]	; 0x24
 80064d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6a39      	ldr	r1, [r7, #32]
 80064d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	61fb      	str	r3, [r7, #28]
   return(result);
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3730      	adds	r7, #48	; 0x30
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	08006a81 	.word	0x08006a81
 80064f4:	08006b1b 	.word	0x08006b1b
 80064f8:	08006b37 	.word	0x08006b37

080064fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b0ba      	sub	sp, #232	; 0xe8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800653a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_UART_IRQHandler+0x66>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fcaa 	bl	8006eb4 <UART_Receive_IT>
      return;
 8006560:	e256      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80de 	beq.w	8006728 <HAL_UART_IRQHandler+0x22c>
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80d1 	beq.w	8006728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <HAL_UART_IRQHandler+0xae>
 8006592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f043 0201 	orr.w	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xd2>
 80065b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f043 0202 	orr.w	r2, r3, #2
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_UART_IRQHandler+0xf6>
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f043 0204 	orr.w	r2, r3, #4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <HAL_UART_IRQHandler+0x126>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800660a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f043 0208 	orr.w	r2, r3, #8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 81ed 	beq.w	8006a06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800662c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_UART_IRQHandler+0x14e>
 8006638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc35 	bl	8006eb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <HAL_UART_IRQHandler+0x17a>
 800666e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04f      	beq.n	8006716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fb3d 	bl	8006cf6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d141      	bne.n	800670e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3314      	adds	r3, #20
 8006690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1d9      	bne.n	800668a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	4a7d      	ldr	r2, [pc, #500]	; (80068d8 <HAL_UART_IRQHandler+0x3dc>)
 80066e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd fc92 	bl	8004014 <HAL_DMA_Abort_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e00e      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f9a4 	bl	8006a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e00a      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9a0 	bl	8006a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e006      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f99c 	bl	8006a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006722:	e170      	b.n	8006a06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	bf00      	nop
    return;
 8006726:	e16e      	b.n	8006a06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672c:	2b01      	cmp	r3, #1
 800672e:	f040 814a 	bne.w	80069c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8143 	beq.w	80069c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 813c 	beq.w	80069c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	f040 80b4 	bne.w	80068dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8140 	beq.w	8006a0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800678e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006792:	429a      	cmp	r2, r3
 8006794:	f080 8139 	bcs.w	8006a0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800679e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067aa:	f000 8088 	beq.w	80068be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1d9      	bne.n	80067ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800680a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800681e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006822:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e1      	bne.n	80067fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3314      	adds	r3, #20
 800683c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3314      	adds	r3, #20
 8006856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800685a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800685c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006860:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e3      	bne.n	8006836 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800688c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80068a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e3      	bne.n	800687c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fd fb3b 	bl	8003f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8ca 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068d4:	e099      	b.n	8006a0a <HAL_UART_IRQHandler+0x50e>
 80068d6:	bf00      	nop
 80068d8:	08006dbd 	.word	0x08006dbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 808b 	beq.w	8006a0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8086 	beq.w	8006a0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006926:	647a      	str	r2, [r7, #68]	; 0x44
 8006928:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800692c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e3      	bne.n	8006902 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3314      	adds	r3, #20
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	623b      	str	r3, [r7, #32]
   return(result);
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800695e:	633a      	str	r2, [r7, #48]	; 0x30
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e3      	bne.n	800693a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0310 	bic.w	r3, r3, #16
 8006996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069a4:	61fa      	str	r2, [r7, #28]
 80069a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	69b9      	ldr	r1, [r7, #24]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	617b      	str	r3, [r7, #20]
   return(result);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e3      	bne.n	8006980 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f852 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069c4:	e023      	b.n	8006a0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_UART_IRQHandler+0x4ea>
 80069d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa00 	bl	8006de4 <UART_Transmit_IT>
    return;
 80069e4:	e014      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <HAL_UART_IRQHandler+0x514>
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa40 	bl	8006e84 <UART_EndTransmit_IT>
    return;
 8006a04:	e004      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
    return;
 8006a06:	bf00      	nop
 8006a08:	e002      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
      return;
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
      return;
 8006a0e:	bf00      	nop
  }
}
 8006a10:	37e8      	adds	r7, #232	; 0xe8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop

08006a18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b090      	sub	sp, #64	; 0x40
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d137      	bne.n	8006b0c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af6:	61fa      	str	r2, [r7, #28]
 8006af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	69b9      	ldr	r1, [r7, #24]
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	617b      	str	r3, [r7, #20]
   return(result);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b0a:	e002      	b.n	8006b12 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b0e:	f7ff ff83 	bl	8006a18 <HAL_UART_TxCpltCallback>
}
 8006b12:	bf00      	nop
 8006b14:	3740      	adds	r7, #64	; 0x40
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ff7f 	bl	8006a2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b21      	cmp	r3, #33	; 0x21
 8006b68:	d108      	bne.n	8006b7c <UART_DMAError+0x46>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006b76:	68b8      	ldr	r0, [r7, #8]
 8006b78:	f000 f895 	bl	8006ca6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	bf0c      	ite	eq
 8006b8a:	2301      	moveq	r3, #1
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b22      	cmp	r3, #34	; 0x22
 8006b9c:	d108      	bne.n	8006bb0 <UART_DMAError+0x7a>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006baa:	68b8      	ldr	r0, [r7, #8]
 8006bac:	f000 f8a3 	bl	8006cf6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	f043 0210 	orr.w	r2, r3, #16
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bbc:	68b8      	ldr	r0, [r7, #8]
 8006bbe:	f7ff ff49 	bl	8006a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b090      	sub	sp, #64	; 0x40
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bda:	e050      	b.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d04c      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8006bea:	f7fc f965 	bl	8002eb8 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d241      	bcs.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c1a:	637a      	str	r2, [r7, #52]	; 0x34
 8006c1c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e5      	bne.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3314      	adds	r3, #20
 8006c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c4e:	623a      	str	r2, [r7, #32]
 8006c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	69f9      	ldr	r1, [r7, #28]
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e5      	bne.n	8006c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e00f      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4013      	ands	r3, r2
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	bf0c      	ite	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	2300      	movne	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d09f      	beq.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3740      	adds	r7, #64	; 0x40
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b089      	sub	sp, #36	; 0x24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	61ba      	str	r2, [r7, #24]
 8006cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	613b      	str	r3, [r7, #16]
   return(result);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e5      	bne.n	8006cae <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006cea:	bf00      	nop
 8006cec:	3724      	adds	r7, #36	; 0x24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b095      	sub	sp, #84	; 0x54
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d1e:	643a      	str	r2, [r7, #64]	; 0x40
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e5      	bne.n	8006cfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e5      	bne.n	8006d32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d119      	bne.n	8006da2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	330c      	adds	r3, #12
 8006d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f023 0310 	bic.w	r3, r3, #16
 8006d84:	647b      	str	r3, [r7, #68]	; 0x44
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d8e:	61ba      	str	r2, [r7, #24]
 8006d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6979      	ldr	r1, [r7, #20]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e5      	bne.n	8006d6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006db0:	bf00      	nop
 8006db2:	3754      	adds	r7, #84	; 0x54
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fe3c 	bl	8006a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ddc:	bf00      	nop
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b21      	cmp	r3, #33	; 0x21
 8006df6:	d13e      	bne.n	8006e76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e00:	d114      	bne.n	8006e2c <UART_Transmit_IT+0x48>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d110      	bne.n	8006e2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	1c9a      	adds	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	621a      	str	r2, [r3, #32]
 8006e2a:	e008      	b.n	8006e3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	1c59      	adds	r1, r3, #1
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6211      	str	r1, [r2, #32]
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10f      	bne.n	8006e72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e000      	b.n	8006e78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
  }
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff fdb7 	bl	8006a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08c      	sub	sp, #48	; 0x30
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b22      	cmp	r3, #34	; 0x22
 8006ec6:	f040 80ab 	bne.w	8007020 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed2:	d117      	bne.n	8006f04 <UART_Receive_IT+0x50>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d113      	bne.n	8006f04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	1c9a      	adds	r2, r3, #2
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28
 8006f02:	e026      	b.n	8006f52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f16:	d007      	beq.n	8006f28 <UART_Receive_IT+0x74>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <UART_Receive_IT+0x82>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	e008      	b.n	8006f48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d15a      	bne.n	800701c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0220 	bic.w	r2, r2, #32
 8006f74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695a      	ldr	r2, [r3, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d135      	bne.n	8007012 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f023 0310 	bic.w	r3, r3, #16
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fcc:	623a      	str	r2, [r7, #32]
 8006fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	69f9      	ldr	r1, [r7, #28]
 8006fd2:	6a3a      	ldr	r2, [r7, #32]
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e5      	bne.n	8006fac <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d10a      	bne.n	8007004 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fd2c 	bl	8006a68 <HAL_UARTEx_RxEventCallback>
 8007010:	e002      	b.n	8007018 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fd14 	bl	8006a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e002      	b.n	8007022 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e000      	b.n	8007022 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3730      	adds	r7, #48	; 0x30
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800702c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007030:	b0c0      	sub	sp, #256	; 0x100
 8007032:	af00      	add	r7, sp, #0
 8007034:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007048:	68d9      	ldr	r1, [r3, #12]
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	ea40 0301 	orr.w	r3, r0, r1
 8007054:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	431a      	orrs	r2, r3
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	431a      	orrs	r2, r3
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007084:	f021 010c 	bic.w	r1, r1, #12
 8007088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007092:	430b      	orrs	r3, r1
 8007094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a6:	6999      	ldr	r1, [r3, #24]
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	ea40 0301 	orr.w	r3, r0, r1
 80070b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b8f      	ldr	r3, [pc, #572]	; (80072f8 <UART_SetConfig+0x2cc>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d005      	beq.n	80070cc <UART_SetConfig+0xa0>
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b8d      	ldr	r3, [pc, #564]	; (80072fc <UART_SetConfig+0x2d0>)
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d104      	bne.n	80070d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070cc:	f7fd fd4c 	bl	8004b68 <HAL_RCC_GetPCLK2Freq>
 80070d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070d4:	e003      	b.n	80070de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070d6:	f7fd fd33 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 80070da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e8:	f040 810c 	bne.w	8007304 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070fe:	4622      	mov	r2, r4
 8007100:	462b      	mov	r3, r5
 8007102:	1891      	adds	r1, r2, r2
 8007104:	65b9      	str	r1, [r7, #88]	; 0x58
 8007106:	415b      	adcs	r3, r3
 8007108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800710a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800710e:	4621      	mov	r1, r4
 8007110:	eb12 0801 	adds.w	r8, r2, r1
 8007114:	4629      	mov	r1, r5
 8007116:	eb43 0901 	adc.w	r9, r3, r1
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800712a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800712e:	4690      	mov	r8, r2
 8007130:	4699      	mov	r9, r3
 8007132:	4623      	mov	r3, r4
 8007134:	eb18 0303 	adds.w	r3, r8, r3
 8007138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800713c:	462b      	mov	r3, r5
 800713e:	eb49 0303 	adc.w	r3, r9, r3
 8007142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007152:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007156:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800715a:	460b      	mov	r3, r1
 800715c:	18db      	adds	r3, r3, r3
 800715e:	653b      	str	r3, [r7, #80]	; 0x50
 8007160:	4613      	mov	r3, r2
 8007162:	eb42 0303 	adc.w	r3, r2, r3
 8007166:	657b      	str	r3, [r7, #84]	; 0x54
 8007168:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800716c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007170:	f7f9 fdea 	bl	8000d48 <__aeabi_uldivmod>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4b61      	ldr	r3, [pc, #388]	; (8007300 <UART_SetConfig+0x2d4>)
 800717a:	fba3 2302 	umull	r2, r3, r3, r2
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	011c      	lsls	r4, r3, #4
 8007182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007186:	2200      	movs	r2, #0
 8007188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800718c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007190:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007194:	4642      	mov	r2, r8
 8007196:	464b      	mov	r3, r9
 8007198:	1891      	adds	r1, r2, r2
 800719a:	64b9      	str	r1, [r7, #72]	; 0x48
 800719c:	415b      	adcs	r3, r3
 800719e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071a4:	4641      	mov	r1, r8
 80071a6:	eb12 0a01 	adds.w	sl, r2, r1
 80071aa:	4649      	mov	r1, r9
 80071ac:	eb43 0b01 	adc.w	fp, r3, r1
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071c4:	4692      	mov	sl, r2
 80071c6:	469b      	mov	fp, r3
 80071c8:	4643      	mov	r3, r8
 80071ca:	eb1a 0303 	adds.w	r3, sl, r3
 80071ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071d2:	464b      	mov	r3, r9
 80071d4:	eb4b 0303 	adc.w	r3, fp, r3
 80071d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071f0:	460b      	mov	r3, r1
 80071f2:	18db      	adds	r3, r3, r3
 80071f4:	643b      	str	r3, [r7, #64]	; 0x40
 80071f6:	4613      	mov	r3, r2
 80071f8:	eb42 0303 	adc.w	r3, r2, r3
 80071fc:	647b      	str	r3, [r7, #68]	; 0x44
 80071fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007202:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007206:	f7f9 fd9f 	bl	8000d48 <__aeabi_uldivmod>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4611      	mov	r1, r2
 8007210:	4b3b      	ldr	r3, [pc, #236]	; (8007300 <UART_SetConfig+0x2d4>)
 8007212:	fba3 2301 	umull	r2, r3, r3, r1
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	2264      	movs	r2, #100	; 0x64
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	1acb      	subs	r3, r1, r3
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007226:	4b36      	ldr	r3, [pc, #216]	; (8007300 <UART_SetConfig+0x2d4>)
 8007228:	fba3 2302 	umull	r2, r3, r3, r2
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007234:	441c      	add	r4, r3
 8007236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800723a:	2200      	movs	r2, #0
 800723c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007240:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007244:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	1891      	adds	r1, r2, r2
 800724e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007250:	415b      	adcs	r3, r3
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007258:	4641      	mov	r1, r8
 800725a:	1851      	adds	r1, r2, r1
 800725c:	6339      	str	r1, [r7, #48]	; 0x30
 800725e:	4649      	mov	r1, r9
 8007260:	414b      	adcs	r3, r1
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007270:	4659      	mov	r1, fp
 8007272:	00cb      	lsls	r3, r1, #3
 8007274:	4651      	mov	r1, sl
 8007276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800727a:	4651      	mov	r1, sl
 800727c:	00ca      	lsls	r2, r1, #3
 800727e:	4610      	mov	r0, r2
 8007280:	4619      	mov	r1, r3
 8007282:	4603      	mov	r3, r0
 8007284:	4642      	mov	r2, r8
 8007286:	189b      	adds	r3, r3, r2
 8007288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800728c:	464b      	mov	r3, r9
 800728e:	460a      	mov	r2, r1
 8007290:	eb42 0303 	adc.w	r3, r2, r3
 8007294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072ac:	460b      	mov	r3, r1
 80072ae:	18db      	adds	r3, r3, r3
 80072b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b2:	4613      	mov	r3, r2
 80072b4:	eb42 0303 	adc.w	r3, r2, r3
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072c2:	f7f9 fd41 	bl	8000d48 <__aeabi_uldivmod>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <UART_SetConfig+0x2d4>)
 80072cc:	fba3 1302 	umull	r1, r3, r3, r2
 80072d0:	095b      	lsrs	r3, r3, #5
 80072d2:	2164      	movs	r1, #100	; 0x64
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	3332      	adds	r3, #50	; 0x32
 80072de:	4a08      	ldr	r2, [pc, #32]	; (8007300 <UART_SetConfig+0x2d4>)
 80072e0:	fba2 2303 	umull	r2, r3, r2, r3
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	f003 0207 	and.w	r2, r3, #7
 80072ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4422      	add	r2, r4
 80072f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072f4:	e106      	b.n	8007504 <UART_SetConfig+0x4d8>
 80072f6:	bf00      	nop
 80072f8:	40011000 	.word	0x40011000
 80072fc:	40011400 	.word	0x40011400
 8007300:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007308:	2200      	movs	r2, #0
 800730a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800730e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007312:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007316:	4642      	mov	r2, r8
 8007318:	464b      	mov	r3, r9
 800731a:	1891      	adds	r1, r2, r2
 800731c:	6239      	str	r1, [r7, #32]
 800731e:	415b      	adcs	r3, r3
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
 8007322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007326:	4641      	mov	r1, r8
 8007328:	1854      	adds	r4, r2, r1
 800732a:	4649      	mov	r1, r9
 800732c:	eb43 0501 	adc.w	r5, r3, r1
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	00eb      	lsls	r3, r5, #3
 800733a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800733e:	00e2      	lsls	r2, r4, #3
 8007340:	4614      	mov	r4, r2
 8007342:	461d      	mov	r5, r3
 8007344:	4643      	mov	r3, r8
 8007346:	18e3      	adds	r3, r4, r3
 8007348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800734c:	464b      	mov	r3, r9
 800734e:	eb45 0303 	adc.w	r3, r5, r3
 8007352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007372:	4629      	mov	r1, r5
 8007374:	008b      	lsls	r3, r1, #2
 8007376:	4621      	mov	r1, r4
 8007378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737c:	4621      	mov	r1, r4
 800737e:	008a      	lsls	r2, r1, #2
 8007380:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007384:	f7f9 fce0 	bl	8000d48 <__aeabi_uldivmod>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4b60      	ldr	r3, [pc, #384]	; (8007510 <UART_SetConfig+0x4e4>)
 800738e:	fba3 2302 	umull	r2, r3, r3, r2
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	011c      	lsls	r4, r3, #4
 8007396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800739a:	2200      	movs	r2, #0
 800739c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	1891      	adds	r1, r2, r2
 80073ae:	61b9      	str	r1, [r7, #24]
 80073b0:	415b      	adcs	r3, r3
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b8:	4641      	mov	r1, r8
 80073ba:	1851      	adds	r1, r2, r1
 80073bc:	6139      	str	r1, [r7, #16]
 80073be:	4649      	mov	r1, r9
 80073c0:	414b      	adcs	r3, r1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073d0:	4659      	mov	r1, fp
 80073d2:	00cb      	lsls	r3, r1, #3
 80073d4:	4651      	mov	r1, sl
 80073d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073da:	4651      	mov	r1, sl
 80073dc:	00ca      	lsls	r2, r1, #3
 80073de:	4610      	mov	r0, r2
 80073e0:	4619      	mov	r1, r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	4642      	mov	r2, r8
 80073e6:	189b      	adds	r3, r3, r2
 80073e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073ec:	464b      	mov	r3, r9
 80073ee:	460a      	mov	r2, r1
 80073f0:	eb42 0303 	adc.w	r3, r2, r3
 80073f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	67bb      	str	r3, [r7, #120]	; 0x78
 8007402:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	f04f 0300 	mov.w	r3, #0
 800740c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007410:	4649      	mov	r1, r9
 8007412:	008b      	lsls	r3, r1, #2
 8007414:	4641      	mov	r1, r8
 8007416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800741a:	4641      	mov	r1, r8
 800741c:	008a      	lsls	r2, r1, #2
 800741e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007422:	f7f9 fc91 	bl	8000d48 <__aeabi_uldivmod>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4611      	mov	r1, r2
 800742c:	4b38      	ldr	r3, [pc, #224]	; (8007510 <UART_SetConfig+0x4e4>)
 800742e:	fba3 2301 	umull	r2, r3, r3, r1
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	2264      	movs	r2, #100	; 0x64
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	1acb      	subs	r3, r1, r3
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	3332      	adds	r3, #50	; 0x32
 8007440:	4a33      	ldr	r2, [pc, #204]	; (8007510 <UART_SetConfig+0x4e4>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800744c:	441c      	add	r4, r3
 800744e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007452:	2200      	movs	r2, #0
 8007454:	673b      	str	r3, [r7, #112]	; 0x70
 8007456:	677a      	str	r2, [r7, #116]	; 0x74
 8007458:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800745c:	4642      	mov	r2, r8
 800745e:	464b      	mov	r3, r9
 8007460:	1891      	adds	r1, r2, r2
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	415b      	adcs	r3, r3
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800746c:	4641      	mov	r1, r8
 800746e:	1851      	adds	r1, r2, r1
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	4649      	mov	r1, r9
 8007474:	414b      	adcs	r3, r1
 8007476:	607b      	str	r3, [r7, #4]
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007484:	4659      	mov	r1, fp
 8007486:	00cb      	lsls	r3, r1, #3
 8007488:	4651      	mov	r1, sl
 800748a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800748e:	4651      	mov	r1, sl
 8007490:	00ca      	lsls	r2, r1, #3
 8007492:	4610      	mov	r0, r2
 8007494:	4619      	mov	r1, r3
 8007496:	4603      	mov	r3, r0
 8007498:	4642      	mov	r2, r8
 800749a:	189b      	adds	r3, r3, r2
 800749c:	66bb      	str	r3, [r7, #104]	; 0x68
 800749e:	464b      	mov	r3, r9
 80074a0:	460a      	mov	r2, r1
 80074a2:	eb42 0303 	adc.w	r3, r2, r3
 80074a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	663b      	str	r3, [r7, #96]	; 0x60
 80074b2:	667a      	str	r2, [r7, #100]	; 0x64
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074c0:	4649      	mov	r1, r9
 80074c2:	008b      	lsls	r3, r1, #2
 80074c4:	4641      	mov	r1, r8
 80074c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ca:	4641      	mov	r1, r8
 80074cc:	008a      	lsls	r2, r1, #2
 80074ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074d2:	f7f9 fc39 	bl	8000d48 <__aeabi_uldivmod>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4b0d      	ldr	r3, [pc, #52]	; (8007510 <UART_SetConfig+0x4e4>)
 80074dc:	fba3 1302 	umull	r1, r3, r3, r2
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	2164      	movs	r1, #100	; 0x64
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	3332      	adds	r3, #50	; 0x32
 80074ee:	4a08      	ldr	r2, [pc, #32]	; (8007510 <UART_SetConfig+0x4e4>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	f003 020f 	and.w	r2, r3, #15
 80074fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4422      	add	r2, r4
 8007502:	609a      	str	r2, [r3, #8]
}
 8007504:	bf00      	nop
 8007506:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800750a:	46bd      	mov	sp, r7
 800750c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007510:	51eb851f 	.word	0x51eb851f

08007514 <arm_min_f32>:
 8007514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007518:	1e4f      	subs	r7, r1, #1
 800751a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800751e:	f100 0e04 	add.w	lr, r0, #4
 8007522:	edd0 7a00 	vldr	s15, [r0]
 8007526:	d058      	beq.n	80075da <arm_min_f32+0xc6>
 8007528:	3014      	adds	r0, #20
 800752a:	46c4      	mov	ip, r8
 800752c:	2604      	movs	r6, #4
 800752e:	2400      	movs	r4, #0
 8007530:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007534:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007538:	ed10 7a02 	vldr	s14, [r0, #-8]
 800753c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007540:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007548:	bf48      	it	mi
 800754a:	eef0 7a46 	vmovmi.f32	s15, s12
 800754e:	f1a6 0503 	sub.w	r5, r6, #3
 8007552:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007556:	bf48      	it	mi
 8007558:	462c      	movmi	r4, r5
 800755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755e:	bfc8      	it	gt
 8007560:	eef0 7a66 	vmovgt.f32	s15, s13
 8007564:	f1a6 0502 	sub.w	r5, r6, #2
 8007568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800756c:	bfc8      	it	gt
 800756e:	462c      	movgt	r4, r5
 8007570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007574:	bfc8      	it	gt
 8007576:	eef0 7a47 	vmovgt.f32	s15, s14
 800757a:	f106 35ff 	add.w	r5, r6, #4294967295
 800757e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007582:	bfc8      	it	gt
 8007584:	462c      	movgt	r4, r5
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	bfc8      	it	gt
 800758c:	4634      	movgt	r4, r6
 800758e:	bfc8      	it	gt
 8007590:	eef0 7a65 	vmovgt.f32	s15, s11
 8007594:	f1bc 0c01 	subs.w	ip, ip, #1
 8007598:	f106 0604 	add.w	r6, r6, #4
 800759c:	f100 0010 	add.w	r0, r0, #16
 80075a0:	d1c6      	bne.n	8007530 <arm_min_f32+0x1c>
 80075a2:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80075a6:	f017 0003 	ands.w	r0, r7, #3
 80075aa:	d018      	beq.n	80075de <arm_min_f32+0xca>
 80075ac:	1a08      	subs	r0, r1, r0
 80075ae:	ecbe 7a01 	vldmia	lr!, {s14}
 80075b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	bf48      	it	mi
 80075bc:	4604      	movmi	r4, r0
 80075be:	f100 0001 	add.w	r0, r0, #1
 80075c2:	bf58      	it	pl
 80075c4:	eeb0 7a67 	vmovpl.f32	s14, s15
 80075c8:	4288      	cmp	r0, r1
 80075ca:	eef0 7a47 	vmov.f32	s15, s14
 80075ce:	d1ee      	bne.n	80075ae <arm_min_f32+0x9a>
 80075d0:	ed82 7a00 	vstr	s14, [r2]
 80075d4:	601c      	str	r4, [r3, #0]
 80075d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075da:	4644      	mov	r4, r8
 80075dc:	e7e3      	b.n	80075a6 <arm_min_f32+0x92>
 80075de:	eeb0 7a67 	vmov.f32	s14, s15
 80075e2:	e7f5      	b.n	80075d0 <arm_min_f32+0xbc>

080075e4 <arm_mean_f32>:
 80075e4:	b430      	push	{r4, r5}
 80075e6:	088d      	lsrs	r5, r1, #2
 80075e8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8007648 <arm_mean_f32+0x64>
 80075ec:	d018      	beq.n	8007620 <arm_mean_f32+0x3c>
 80075ee:	f100 0310 	add.w	r3, r0, #16
 80075f2:	462c      	mov	r4, r5
 80075f4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80075f8:	ed53 5a03 	vldr	s11, [r3, #-12]
 80075fc:	ed13 6a02 	vldr	s12, [r3, #-8]
 8007600:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007608:	3c01      	subs	r4, #1
 800760a:	ee77 7a25 	vadd.f32	s15, s14, s11
 800760e:	f103 0310 	add.w	r3, r3, #16
 8007612:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761a:	d1eb      	bne.n	80075f4 <arm_mean_f32+0x10>
 800761c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007620:	f011 0303 	ands.w	r3, r1, #3
 8007624:	d005      	beq.n	8007632 <arm_mean_f32+0x4e>
 8007626:	ecb0 7a01 	vldmia	r0!, {s14}
 800762a:	3b01      	subs	r3, #1
 800762c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007630:	d1f9      	bne.n	8007626 <arm_mean_f32+0x42>
 8007632:	ee07 1a10 	vmov	s14, r1
 8007636:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800763a:	bc30      	pop	{r4, r5}
 800763c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8007640:	edc2 7a00 	vstr	s15, [r2]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	00000000 	.word	0x00000000

0800764c <arm_max_f32>:
 800764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007650:	1e4f      	subs	r7, r1, #1
 8007652:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8007656:	f100 0e04 	add.w	lr, r0, #4
 800765a:	edd0 7a00 	vldr	s15, [r0]
 800765e:	d058      	beq.n	8007712 <arm_max_f32+0xc6>
 8007660:	3014      	adds	r0, #20
 8007662:	46c4      	mov	ip, r8
 8007664:	2604      	movs	r6, #4
 8007666:	2400      	movs	r4, #0
 8007668:	ed10 6a04 	vldr	s12, [r0, #-16]
 800766c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007670:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007674:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007678:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	bfc8      	it	gt
 8007682:	eef0 7a46 	vmovgt.f32	s15, s12
 8007686:	f1a6 0503 	sub.w	r5, r6, #3
 800768a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800768e:	bfc8      	it	gt
 8007690:	462c      	movgt	r4, r5
 8007692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007696:	bf48      	it	mi
 8007698:	eef0 7a66 	vmovmi.f32	s15, s13
 800769c:	f1a6 0502 	sub.w	r5, r6, #2
 80076a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a4:	bf48      	it	mi
 80076a6:	462c      	movmi	r4, r5
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	bf48      	it	mi
 80076ae:	eef0 7a47 	vmovmi.f32	s15, s14
 80076b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80076b6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80076ba:	bf48      	it	mi
 80076bc:	462c      	movmi	r4, r5
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	bf48      	it	mi
 80076c4:	4634      	movmi	r4, r6
 80076c6:	bf48      	it	mi
 80076c8:	eef0 7a65 	vmovmi.f32	s15, s11
 80076cc:	f1bc 0c01 	subs.w	ip, ip, #1
 80076d0:	f106 0604 	add.w	r6, r6, #4
 80076d4:	f100 0010 	add.w	r0, r0, #16
 80076d8:	d1c6      	bne.n	8007668 <arm_max_f32+0x1c>
 80076da:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80076de:	f017 0003 	ands.w	r0, r7, #3
 80076e2:	d018      	beq.n	8007716 <arm_max_f32+0xca>
 80076e4:	1a08      	subs	r0, r1, r0
 80076e6:	ecbe 7a01 	vldmia	lr!, {s14}
 80076ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f2:	bfc8      	it	gt
 80076f4:	4604      	movgt	r4, r0
 80076f6:	f100 0001 	add.w	r0, r0, #1
 80076fa:	bfd8      	it	le
 80076fc:	eeb0 7a67 	vmovle.f32	s14, s15
 8007700:	4288      	cmp	r0, r1
 8007702:	eef0 7a47 	vmov.f32	s15, s14
 8007706:	d1ee      	bne.n	80076e6 <arm_max_f32+0x9a>
 8007708:	ed82 7a00 	vstr	s14, [r2]
 800770c:	601c      	str	r4, [r3, #0]
 800770e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007712:	4644      	mov	r4, r8
 8007714:	e7e3      	b.n	80076de <arm_max_f32+0x92>
 8007716:	eeb0 7a67 	vmov.f32	s14, s15
 800771a:	e7f5      	b.n	8007708 <arm_max_f32+0xbc>

0800771c <arm_rfft_fast_init_f32>:
 800771c:	084b      	lsrs	r3, r1, #1
 800771e:	2b80      	cmp	r3, #128	; 0x80
 8007720:	b410      	push	{r4}
 8007722:	8201      	strh	r1, [r0, #16]
 8007724:	8003      	strh	r3, [r0, #0]
 8007726:	d047      	beq.n	80077b8 <arm_rfft_fast_init_f32+0x9c>
 8007728:	d917      	bls.n	800775a <arm_rfft_fast_init_f32+0x3e>
 800772a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800772e:	d03d      	beq.n	80077ac <arm_rfft_fast_init_f32+0x90>
 8007730:	d929      	bls.n	8007786 <arm_rfft_fast_init_f32+0x6a>
 8007732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007736:	d020      	beq.n	800777a <arm_rfft_fast_init_f32+0x5e>
 8007738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800773c:	d113      	bne.n	8007766 <arm_rfft_fast_init_f32+0x4a>
 800773e:	4921      	ldr	r1, [pc, #132]	; (80077c4 <arm_rfft_fast_init_f32+0xa8>)
 8007740:	4a21      	ldr	r2, [pc, #132]	; (80077c8 <arm_rfft_fast_init_f32+0xac>)
 8007742:	4b22      	ldr	r3, [pc, #136]	; (80077cc <arm_rfft_fast_init_f32+0xb0>)
 8007744:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8007748:	8184      	strh	r4, [r0, #12]
 800774a:	6081      	str	r1, [r0, #8]
 800774c:	6042      	str	r2, [r0, #4]
 800774e:	6143      	str	r3, [r0, #20]
 8007750:	2000      	movs	r0, #0
 8007752:	b240      	sxtb	r0, r0
 8007754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	2b20      	cmp	r3, #32
 800775c:	d01c      	beq.n	8007798 <arm_rfft_fast_init_f32+0x7c>
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d006      	beq.n	8007770 <arm_rfft_fast_init_f32+0x54>
 8007762:	2b10      	cmp	r3, #16
 8007764:	d01d      	beq.n	80077a2 <arm_rfft_fast_init_f32+0x86>
 8007766:	20ff      	movs	r0, #255	; 0xff
 8007768:	b240      	sxtb	r0, r0
 800776a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	2438      	movs	r4, #56	; 0x38
 8007772:	4917      	ldr	r1, [pc, #92]	; (80077d0 <arm_rfft_fast_init_f32+0xb4>)
 8007774:	4a17      	ldr	r2, [pc, #92]	; (80077d4 <arm_rfft_fast_init_f32+0xb8>)
 8007776:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <arm_rfft_fast_init_f32+0xbc>)
 8007778:	e7e6      	b.n	8007748 <arm_rfft_fast_init_f32+0x2c>
 800777a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800777e:	4917      	ldr	r1, [pc, #92]	; (80077dc <arm_rfft_fast_init_f32+0xc0>)
 8007780:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <arm_rfft_fast_init_f32+0xc4>)
 8007782:	4b18      	ldr	r3, [pc, #96]	; (80077e4 <arm_rfft_fast_init_f32+0xc8>)
 8007784:	e7e0      	b.n	8007748 <arm_rfft_fast_init_f32+0x2c>
 8007786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778a:	d1ec      	bne.n	8007766 <arm_rfft_fast_init_f32+0x4a>
 800778c:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8007790:	4915      	ldr	r1, [pc, #84]	; (80077e8 <arm_rfft_fast_init_f32+0xcc>)
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <arm_rfft_fast_init_f32+0xd0>)
 8007794:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <arm_rfft_fast_init_f32+0xd4>)
 8007796:	e7d7      	b.n	8007748 <arm_rfft_fast_init_f32+0x2c>
 8007798:	2430      	movs	r4, #48	; 0x30
 800779a:	4916      	ldr	r1, [pc, #88]	; (80077f4 <arm_rfft_fast_init_f32+0xd8>)
 800779c:	4a16      	ldr	r2, [pc, #88]	; (80077f8 <arm_rfft_fast_init_f32+0xdc>)
 800779e:	4b17      	ldr	r3, [pc, #92]	; (80077fc <arm_rfft_fast_init_f32+0xe0>)
 80077a0:	e7d2      	b.n	8007748 <arm_rfft_fast_init_f32+0x2c>
 80077a2:	2414      	movs	r4, #20
 80077a4:	4916      	ldr	r1, [pc, #88]	; (8007800 <arm_rfft_fast_init_f32+0xe4>)
 80077a6:	4a17      	ldr	r2, [pc, #92]	; (8007804 <arm_rfft_fast_init_f32+0xe8>)
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <arm_rfft_fast_init_f32+0xec>)
 80077aa:	e7cd      	b.n	8007748 <arm_rfft_fast_init_f32+0x2c>
 80077ac:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80077b0:	4916      	ldr	r1, [pc, #88]	; (800780c <arm_rfft_fast_init_f32+0xf0>)
 80077b2:	4a17      	ldr	r2, [pc, #92]	; (8007810 <arm_rfft_fast_init_f32+0xf4>)
 80077b4:	4b17      	ldr	r3, [pc, #92]	; (8007814 <arm_rfft_fast_init_f32+0xf8>)
 80077b6:	e7c7      	b.n	8007748 <arm_rfft_fast_init_f32+0x2c>
 80077b8:	24d0      	movs	r4, #208	; 0xd0
 80077ba:	4917      	ldr	r1, [pc, #92]	; (8007818 <arm_rfft_fast_init_f32+0xfc>)
 80077bc:	4a17      	ldr	r2, [pc, #92]	; (800781c <arm_rfft_fast_init_f32+0x100>)
 80077be:	4b18      	ldr	r3, [pc, #96]	; (8007820 <arm_rfft_fast_init_f32+0x104>)
 80077c0:	e7c2      	b.n	8007748 <arm_rfft_fast_init_f32+0x2c>
 80077c2:	bf00      	nop
 80077c4:	0801c0b4 	.word	0x0801c0b4
 80077c8:	0800d2ac 	.word	0x0800d2ac
 80077cc:	0801341c 	.word	0x0801341c
 80077d0:	080113ac 	.word	0x080113ac
 80077d4:	0801de74 	.word	0x0801de74
 80077d8:	08020364 	.word	0x08020364
 80077dc:	08019d9c 	.word	0x08019d9c
 80077e0:	08017c9c 	.word	0x08017c9c
 80077e4:	0801141c 	.word	0x0801141c
 80077e8:	0801fff4 	.word	0x0801fff4
 80077ec:	0801741c 	.word	0x0801741c
 80077f0:	0801e074 	.word	0x0801e074
 80077f4:	0801ac54 	.word	0x0801ac54
 80077f8:	08019c9c 	.word	0x08019c9c
 80077fc:	080112ac 	.word	0x080112ac
 8007800:	0801abac 	.word	0x0801abac
 8007804:	08017c1c 	.word	0x08017c1c
 8007808:	0801abd4 	.word	0x0801abd4
 800780c:	0801e874 	.word	0x0801e874
 8007810:	0801b0b4 	.word	0x0801b0b4
 8007814:	0801ebf4 	.word	0x0801ebf4
 8007818:	08020564 	.word	0x08020564
 800781c:	0801acb4 	.word	0x0801acb4
 8007820:	0801fbf4 	.word	0x0801fbf4

08007824 <arm_rfft_fast_f32>:
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	8a06      	ldrh	r6, [r0, #16]
 800782a:	0876      	lsrs	r6, r6, #1
 800782c:	4607      	mov	r7, r0
 800782e:	4615      	mov	r5, r2
 8007830:	8006      	strh	r6, [r0, #0]
 8007832:	460c      	mov	r4, r1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d15c      	bne.n	80078f2 <arm_rfft_fast_f32+0xce>
 8007838:	461a      	mov	r2, r3
 800783a:	2301      	movs	r3, #1
 800783c:	f000 fbe6 	bl	800800c <arm_cfft_f32>
 8007840:	edd4 7a00 	vldr	s15, [r4]
 8007844:	ed94 7a01 	vldr	s14, [r4, #4]
 8007848:	883e      	ldrh	r6, [r7, #0]
 800784a:	6978      	ldr	r0, [r7, #20]
 800784c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007850:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007854:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8007858:	ee77 6a87 	vadd.f32	s13, s15, s14
 800785c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007860:	3e01      	subs	r6, #1
 8007862:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8007866:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800786a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800786e:	ed85 7a00 	vstr	s14, [r5]
 8007872:	edc5 7a01 	vstr	s15, [r5, #4]
 8007876:	3010      	adds	r0, #16
 8007878:	f105 0210 	add.w	r2, r5, #16
 800787c:	3b08      	subs	r3, #8
 800787e:	f104 0110 	add.w	r1, r4, #16
 8007882:	ed51 4a02 	vldr	s9, [r1, #-8]
 8007886:	ed93 5a02 	vldr	s10, [r3, #8]
 800788a:	ed11 7a01 	vldr	s14, [r1, #-4]
 800788e:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007892:	edd3 5a03 	vldr	s11, [r3, #12]
 8007896:	ed50 6a01 	vldr	s13, [r0, #-4]
 800789a:	ee75 7a64 	vsub.f32	s15, s10, s9
 800789e:	ee35 4a87 	vadd.f32	s8, s11, s14
 80078a2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80078a6:	ee77 5a65 	vsub.f32	s11, s14, s11
 80078aa:	ee66 4a27 	vmul.f32	s9, s12, s15
 80078ae:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80078b2:	ee34 5a85 	vadd.f32	s10, s9, s10
 80078b6:	ee26 6a04 	vmul.f32	s12, s12, s8
 80078ba:	ee66 6a84 	vmul.f32	s13, s13, s8
 80078be:	ee77 7a25 	vadd.f32	s15, s14, s11
 80078c2:	ee76 6a85 	vadd.f32	s13, s13, s10
 80078c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80078ca:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80078ce:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80078d2:	3e01      	subs	r6, #1
 80078d4:	ed42 6a02 	vstr	s13, [r2, #-8]
 80078d8:	ed42 7a01 	vstr	s15, [r2, #-4]
 80078dc:	f1a3 0308 	sub.w	r3, r3, #8
 80078e0:	f101 0108 	add.w	r1, r1, #8
 80078e4:	f100 0008 	add.w	r0, r0, #8
 80078e8:	f102 0208 	add.w	r2, r2, #8
 80078ec:	d1c9      	bne.n	8007882 <arm_rfft_fast_f32+0x5e>
 80078ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f2:	edd1 7a00 	vldr	s15, [r1]
 80078f6:	edd1 6a01 	vldr	s13, [r1, #4]
 80078fa:	6941      	ldr	r1, [r0, #20]
 80078fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007900:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007904:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8007908:	ee27 7a23 	vmul.f32	s14, s14, s7
 800790c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007910:	3e01      	subs	r6, #1
 8007912:	ed82 7a00 	vstr	s14, [r2]
 8007916:	edc2 7a01 	vstr	s15, [r2, #4]
 800791a:	00f0      	lsls	r0, r6, #3
 800791c:	b3ee      	cbz	r6, 800799a <arm_rfft_fast_f32+0x176>
 800791e:	3808      	subs	r0, #8
 8007920:	f101 0e10 	add.w	lr, r1, #16
 8007924:	4420      	add	r0, r4
 8007926:	f104 0110 	add.w	r1, r4, #16
 800792a:	f102 0c10 	add.w	ip, r2, #16
 800792e:	ed90 7a02 	vldr	s14, [r0, #8]
 8007932:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007936:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800793a:	ed90 4a03 	vldr	s8, [r0, #12]
 800793e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007942:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8007946:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800794a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800794e:	ee26 3a27 	vmul.f32	s6, s12, s15
 8007952:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007956:	ee35 5a44 	vsub.f32	s10, s10, s8
 800795a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800795e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007962:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007966:	ee26 6a24 	vmul.f32	s12, s12, s9
 800796a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800796e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007972:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8007976:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800797a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800797e:	3e01      	subs	r6, #1
 8007980:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8007984:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8007988:	f1a0 0008 	sub.w	r0, r0, #8
 800798c:	f101 0108 	add.w	r1, r1, #8
 8007990:	f10e 0e08 	add.w	lr, lr, #8
 8007994:	f10c 0c08 	add.w	ip, ip, #8
 8007998:	d1c9      	bne.n	800792e <arm_rfft_fast_f32+0x10a>
 800799a:	4638      	mov	r0, r7
 800799c:	4629      	mov	r1, r5
 800799e:	461a      	mov	r2, r3
 80079a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	2301      	movs	r3, #1
 80079a6:	f000 bb31 	b.w	800800c <arm_cfft_f32>
 80079aa:	bf00      	nop

080079ac <arm_cfft_radix8by2_f32>:
 80079ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	ed2d 8b08 	vpush	{d8-d11}
 80079b4:	f8b0 e000 	ldrh.w	lr, [r0]
 80079b8:	6842      	ldr	r2, [r0, #4]
 80079ba:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80079be:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80079c2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80079c6:	4607      	mov	r7, r0
 80079c8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80079cc:	f000 80af 	beq.w	8007b2e <arm_cfft_radix8by2_f32+0x182>
 80079d0:	3310      	adds	r3, #16
 80079d2:	18ce      	adds	r6, r1, r3
 80079d4:	3210      	adds	r2, #16
 80079d6:	4443      	add	r3, r8
 80079d8:	f101 0510 	add.w	r5, r1, #16
 80079dc:	f108 0410 	add.w	r4, r8, #16
 80079e0:	ed54 1a04 	vldr	s3, [r4, #-16]
 80079e4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80079e8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80079ec:	ed53 5a02 	vldr	s11, [r3, #-8]
 80079f0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80079f4:	ed54 6a03 	vldr	s13, [r4, #-12]
 80079f8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80079fc:	ed16 2a04 	vldr	s4, [r6, #-16]
 8007a00:	ed56 2a03 	vldr	s5, [r6, #-12]
 8007a04:	ed15 6a03 	vldr	s12, [r5, #-12]
 8007a08:	ed15 7a01 	vldr	s14, [r5, #-4]
 8007a0c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8007a10:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007a14:	ed56 0a02 	vldr	s1, [r6, #-8]
 8007a18:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007a1c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8007a20:	ee73 ba21 	vadd.f32	s23, s6, s3
 8007a24:	ee36 ba26 	vadd.f32	s22, s12, s13
 8007a28:	ee37 aa27 	vadd.f32	s20, s14, s15
 8007a2c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8007a30:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007a34:	ee31 8a05 	vadd.f32	s16, s2, s10
 8007a38:	ee74 aa80 	vadd.f32	s21, s9, s0
 8007a3c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8007a40:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007a44:	ed05 ba03 	vstr	s22, [r5, #-12]
 8007a48:	ed45 aa02 	vstr	s21, [r5, #-8]
 8007a4c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8007a50:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007a54:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007a58:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007a5c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007a60:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007a64:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007a68:	ed12 6a03 	vldr	s12, [r2, #-12]
 8007a6c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8007a70:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007a74:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007a78:	ee26 8a86 	vmul.f32	s16, s13, s12
 8007a7c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8007a80:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007a84:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007a88:	ee23 3a06 	vmul.f32	s6, s6, s12
 8007a8c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8007a90:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007a94:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007a98:	ee36 6a04 	vadd.f32	s12, s12, s8
 8007a9c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007aa0:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007aa4:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007aa8:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007aac:	ed44 2a04 	vstr	s5, [r4, #-16]
 8007ab0:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007ab4:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007abc:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8007ac0:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007ac4:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007ac8:	ee35 6a41 	vsub.f32	s12, s10, s2
 8007acc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007ad0:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007ad4:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007ad8:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8007adc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007ae0:	ee64 4a87 	vmul.f32	s9, s9, s14
 8007ae4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007ae8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007aec:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007af0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007af4:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007af8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007afc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007b00:	f1be 0e01 	subs.w	lr, lr, #1
 8007b04:	ed44 5a02 	vstr	s11, [r4, #-8]
 8007b08:	f105 0510 	add.w	r5, r5, #16
 8007b0c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8007b10:	f106 0610 	add.w	r6, r6, #16
 8007b14:	ed03 6a02 	vstr	s12, [r3, #-8]
 8007b18:	ed03 7a01 	vstr	s14, [r3, #-4]
 8007b1c:	f102 0210 	add.w	r2, r2, #16
 8007b20:	f104 0410 	add.w	r4, r4, #16
 8007b24:	f103 0310 	add.w	r3, r3, #16
 8007b28:	f47f af5a 	bne.w	80079e0 <arm_cfft_radix8by2_f32+0x34>
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	fa1f f48c 	uxth.w	r4, ip
 8007b32:	4608      	mov	r0, r1
 8007b34:	2302      	movs	r3, #2
 8007b36:	4621      	mov	r1, r4
 8007b38:	f000 fdd4 	bl	80086e4 <arm_radix8_butterfly_f32>
 8007b3c:	ecbd 8b08 	vpop	{d8-d11}
 8007b40:	4640      	mov	r0, r8
 8007b42:	4621      	mov	r1, r4
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	2302      	movs	r3, #2
 8007b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4c:	f000 bdca 	b.w	80086e4 <arm_radix8_butterfly_f32>

08007b50 <arm_cfft_radix8by4_f32>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ed2d 8b0a 	vpush	{d8-d12}
 8007b58:	8802      	ldrh	r2, [r0, #0]
 8007b5a:	ed91 6a00 	vldr	s12, [r1]
 8007b5e:	b08f      	sub	sp, #60	; 0x3c
 8007b60:	460f      	mov	r7, r1
 8007b62:	0852      	lsrs	r2, r2, #1
 8007b64:	0093      	lsls	r3, r2, #2
 8007b66:	900c      	str	r0, [sp, #48]	; 0x30
 8007b68:	9103      	str	r1, [sp, #12]
 8007b6a:	6841      	ldr	r1, [r0, #4]
 8007b6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007b70:	4638      	mov	r0, r7
 8007b72:	4418      	add	r0, r3
 8007b74:	4606      	mov	r6, r0
 8007b76:	9009      	str	r0, [sp, #36]	; 0x24
 8007b78:	4418      	add	r0, r3
 8007b7a:	edd0 6a00 	vldr	s13, [r0]
 8007b7e:	edd6 3a00 	vldr	s7, [r6]
 8007b82:	edd6 2a01 	vldr	s5, [r6, #4]
 8007b86:	edd0 7a01 	vldr	s15, [r0, #4]
 8007b8a:	900a      	str	r0, [sp, #40]	; 0x28
 8007b8c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007b90:	4604      	mov	r4, r0
 8007b92:	4625      	mov	r5, r4
 8007b94:	441c      	add	r4, r3
 8007b96:	ed94 4a00 	vldr	s8, [r4]
 8007b9a:	ed94 5a01 	vldr	s10, [r4, #4]
 8007b9e:	9401      	str	r4, [sp, #4]
 8007ba0:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	ee74 4a24 	vadd.f32	s9, s8, s9
 8007baa:	463e      	mov	r6, r7
 8007bac:	ee14 ea90 	vmov	lr, s9
 8007bb0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007bb4:	f846 eb08 	str.w	lr, [r6], #8
 8007bb8:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007bbc:	edd0 4a01 	vldr	s9, [r0, #4]
 8007bc0:	9604      	str	r6, [sp, #16]
 8007bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bc6:	9e01      	ldr	r6, [sp, #4]
 8007bc8:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8007bcc:	ed96 2a01 	vldr	s4, [r6, #4]
 8007bd0:	ee36 7a24 	vadd.f32	s14, s12, s9
 8007bd4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8007bd8:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8007bdc:	ee36 6a62 	vsub.f32	s12, s12, s5
 8007be0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007be4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007be8:	ee73 3a45 	vsub.f32	s7, s6, s10
 8007bec:	4604      	mov	r4, r0
 8007bee:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007bf2:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007bf6:	46a3      	mov	fp, r4
 8007bf8:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007bfc:	ee34 5a84 	vadd.f32	s10, s9, s8
 8007c00:	ee13 8a90 	vmov	r8, s7
 8007c04:	46a4      	mov	ip, r4
 8007c06:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8007c0a:	ed87 7a01 	vstr	s14, [r7, #4]
 8007c0e:	f84b 8b08 	str.w	r8, [fp], #8
 8007c12:	f1ac 0704 	sub.w	r7, ip, #4
 8007c16:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007c1a:	f101 0c08 	add.w	ip, r1, #8
 8007c1e:	462c      	mov	r4, r5
 8007c20:	f8cd c014 	str.w	ip, [sp, #20]
 8007c24:	ee15 ca90 	vmov	ip, s11
 8007c28:	f844 cb08 	str.w	ip, [r4], #8
 8007c2c:	9407      	str	r4, [sp, #28]
 8007c2e:	f101 0410 	add.w	r4, r1, #16
 8007c32:	ed85 6a01 	vstr	s12, [r5, #4]
 8007c36:	0852      	lsrs	r2, r2, #1
 8007c38:	9402      	str	r4, [sp, #8]
 8007c3a:	462c      	mov	r4, r5
 8007c3c:	f101 0518 	add.w	r5, r1, #24
 8007c40:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c42:	46b2      	mov	sl, r6
 8007c44:	9506      	str	r5, [sp, #24]
 8007c46:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8007c4a:	3a02      	subs	r2, #2
 8007c4c:	ee16 5a90 	vmov	r5, s13
 8007c50:	46b6      	mov	lr, r6
 8007c52:	4630      	mov	r0, r6
 8007c54:	0852      	lsrs	r2, r2, #1
 8007c56:	f84a 5b08 	str.w	r5, [sl], #8
 8007c5a:	f1a0 0604 	sub.w	r6, r0, #4
 8007c5e:	edce 7a01 	vstr	s15, [lr, #4]
 8007c62:	9208      	str	r2, [sp, #32]
 8007c64:	f000 8130 	beq.w	8007ec8 <arm_cfft_radix8by4_f32+0x378>
 8007c68:	4691      	mov	r9, r2
 8007c6a:	9a03      	ldr	r2, [sp, #12]
 8007c6c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007c70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007c74:	3b08      	subs	r3, #8
 8007c76:	f102 0510 	add.w	r5, r2, #16
 8007c7a:	f101 0c20 	add.w	ip, r1, #32
 8007c7e:	f1a4 020c 	sub.w	r2, r4, #12
 8007c82:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007c86:	4433      	add	r3, r6
 8007c88:	3410      	adds	r4, #16
 8007c8a:	4650      	mov	r0, sl
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8007c92:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007c96:	ed91 7a00 	vldr	s14, [r1]
 8007c9a:	edd0 7a00 	vldr	s15, [r0]
 8007c9e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007ca2:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007ca6:	edd0 6a01 	vldr	s13, [r0, #4]
 8007caa:	ed91 6a01 	vldr	s12, [r1, #4]
 8007cae:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007cb2:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007cb6:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007cba:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007cbe:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8007cc2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007cc6:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007cca:	edd1 4a01 	vldr	s9, [r1, #4]
 8007cce:	ed90 4a01 	vldr	s8, [r0, #4]
 8007cd2:	ee70 4a24 	vadd.f32	s9, s0, s9
 8007cd6:	ee76 aa05 	vadd.f32	s21, s12, s10
 8007cda:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007cde:	ee35 aac7 	vsub.f32	s20, s11, s14
 8007ce2:	ed45 4a01 	vstr	s9, [r5, #-4]
 8007ce6:	edd6 1a00 	vldr	s3, [r6]
 8007cea:	edd7 0a00 	vldr	s1, [r7]
 8007cee:	ed92 4a02 	vldr	s8, [r2, #8]
 8007cf2:	edd3 3a02 	vldr	s7, [r3, #8]
 8007cf6:	ed93 2a01 	vldr	s4, [r3, #4]
 8007cfa:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007cfe:	edd2 2a01 	vldr	s5, [r2, #4]
 8007d02:	ed57 9a01 	vldr	s19, [r7, #-4]
 8007d06:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8007d0a:	ee39 3a81 	vadd.f32	s6, s19, s2
 8007d0e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8007d12:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8007d16:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8007d1a:	ee7a aae6 	vsub.f32	s21, s21, s13
 8007d1e:	ee18 aa90 	vmov	sl, s17
 8007d22:	f847 a908 	str.w	sl, [r7], #-8
 8007d26:	edd2 8a01 	vldr	s17, [r2, #4]
 8007d2a:	ed93 9a01 	vldr	s18, [r3, #4]
 8007d2e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8007d32:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007d36:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007d3a:	ee74 0a63 	vsub.f32	s1, s8, s7
 8007d3e:	edc7 8a01 	vstr	s17, [r7, #4]
 8007d42:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007d46:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007d4a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8007d4e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8007d52:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007d56:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007d5a:	ee30 9a81 	vadd.f32	s18, s1, s2
 8007d5e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8007d62:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007d66:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007d6a:	ee69 baa8 	vmul.f32	s23, s19, s17
 8007d6e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8007d72:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007d76:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007d7a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8007d7e:	ee1c aa10 	vmov	sl, s24
 8007d82:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007d86:	f841 ab08 	str.w	sl, [r1], #8
 8007d8a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8007d8e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8007d92:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007d96:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007d9a:	ed01 aa01 	vstr	s20, [r1, #-4]
 8007d9e:	edc2 8a01 	vstr	s17, [r2, #4]
 8007da2:	ed82 ba02 	vstr	s22, [r2, #8]
 8007da6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007daa:	ee74 3a63 	vsub.f32	s7, s8, s7
 8007dae:	ee38 8a47 	vsub.f32	s16, s16, s14
 8007db2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007db6:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007dba:	ee33 3a42 	vsub.f32	s6, s6, s4
 8007dbe:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007dc2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007dc6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007dca:	ee63 8a04 	vmul.f32	s17, s6, s8
 8007dce:	ee28 aa24 	vmul.f32	s20, s16, s9
 8007dd2:	ee60 9a04 	vmul.f32	s19, s0, s8
 8007dd6:	ee28 8a04 	vmul.f32	s16, s16, s8
 8007dda:	ee20 0a24 	vmul.f32	s0, s0, s9
 8007dde:	ee63 3a84 	vmul.f32	s7, s7, s8
 8007de2:	ee39 4a68 	vsub.f32	s8, s18, s17
 8007de6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8007dea:	ee14 aa10 	vmov	sl, s8
 8007dee:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007df2:	ee63 4a24 	vmul.f32	s9, s6, s9
 8007df6:	ed44 9a02 	vstr	s19, [r4, #-8]
 8007dfa:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007dfe:	ed04 0a01 	vstr	s0, [r4, #-4]
 8007e02:	f846 a908 	str.w	sl, [r6], #-8
 8007e06:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007e0a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8007e0e:	edc6 3a01 	vstr	s7, [r6, #4]
 8007e12:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e1a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8007e1e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8007e22:	ee67 5a86 	vmul.f32	s11, s15, s12
 8007e26:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007e2a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8007e2e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007e32:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007e36:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007e3a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8007e3e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e46:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007e4a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8007e4e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8007e52:	ee15 aa90 	vmov	sl, s11
 8007e56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e5a:	f840 ab08 	str.w	sl, [r0], #8
 8007e5e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007e62:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007e66:	f1b9 0901 	subs.w	r9, r9, #1
 8007e6a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8007e6e:	f105 0508 	add.w	r5, r5, #8
 8007e72:	ed83 1a02 	vstr	s2, [r3, #8]
 8007e76:	edc3 2a01 	vstr	s5, [r3, #4]
 8007e7a:	f108 0808 	add.w	r8, r8, #8
 8007e7e:	f1a2 0208 	sub.w	r2, r2, #8
 8007e82:	f10c 0c10 	add.w	ip, ip, #16
 8007e86:	f104 0408 	add.w	r4, r4, #8
 8007e8a:	f10e 0e18 	add.w	lr, lr, #24
 8007e8e:	f1a3 0308 	sub.w	r3, r3, #8
 8007e92:	f47f aefc 	bne.w	8007c8e <arm_cfft_radix8by4_f32+0x13e>
 8007e96:	9908      	ldr	r1, [sp, #32]
 8007e98:	9802      	ldr	r0, [sp, #8]
 8007e9a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8007e9e:	00cb      	lsls	r3, r1, #3
 8007ea0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007ea4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007ea8:	9102      	str	r1, [sp, #8]
 8007eaa:	9904      	ldr	r1, [sp, #16]
 8007eac:	4419      	add	r1, r3
 8007eae:	9104      	str	r1, [sp, #16]
 8007eb0:	9905      	ldr	r1, [sp, #20]
 8007eb2:	4419      	add	r1, r3
 8007eb4:	9105      	str	r1, [sp, #20]
 8007eb6:	9907      	ldr	r1, [sp, #28]
 8007eb8:	449b      	add	fp, r3
 8007eba:	4419      	add	r1, r3
 8007ebc:	449a      	add	sl, r3
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	9107      	str	r1, [sp, #28]
 8007ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec6:	9306      	str	r3, [sp, #24]
 8007ec8:	9a04      	ldr	r2, [sp, #16]
 8007eca:	9807      	ldr	r0, [sp, #28]
 8007ecc:	edd2 3a00 	vldr	s7, [r2]
 8007ed0:	ed90 4a00 	vldr	s8, [r0]
 8007ed4:	eddb 7a00 	vldr	s15, [fp]
 8007ed8:	ed9a 3a00 	vldr	s6, [sl]
 8007edc:	edd2 4a01 	vldr	s9, [r2, #4]
 8007ee0:	ed90 7a01 	vldr	s14, [r0, #4]
 8007ee4:	ed9b 2a01 	vldr	s4, [fp, #4]
 8007ee8:	edda 5a01 	vldr	s11, [sl, #4]
 8007eec:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007ef0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ef2:	ee73 6a84 	vadd.f32	s13, s7, s8
 8007ef6:	ee34 6a87 	vadd.f32	s12, s9, s14
 8007efa:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8007efe:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8007f02:	ee33 5a05 	vadd.f32	s10, s6, s10
 8007f06:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007f0a:	ed82 5a00 	vstr	s10, [r2]
 8007f0e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8007f12:	edda 4a01 	vldr	s9, [sl, #4]
 8007f16:	ee36 5a05 	vadd.f32	s10, s12, s10
 8007f1a:	ee72 3a04 	vadd.f32	s7, s4, s8
 8007f1e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007f22:	ee77 4a67 	vsub.f32	s9, s14, s15
 8007f26:	ed82 5a01 	vstr	s10, [r2, #4]
 8007f2a:	9a05      	ldr	r2, [sp, #20]
 8007f2c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007f30:	edd2 1a00 	vldr	s3, [r2]
 8007f34:	edd2 2a01 	vldr	s5, [r2, #4]
 8007f38:	9a02      	ldr	r2, [sp, #8]
 8007f3a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8007f3e:	ee36 6a42 	vsub.f32	s12, s12, s4
 8007f42:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8007f46:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007f4a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007f4e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007f52:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007f56:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007f5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007f5e:	edcb 2a00 	vstr	s5, [fp]
 8007f62:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007f66:	edd2 3a01 	vldr	s7, [r2, #4]
 8007f6a:	ed92 5a00 	vldr	s10, [r2]
 8007f6e:	9a06      	ldr	r2, [sp, #24]
 8007f70:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007f74:	ee36 6a65 	vsub.f32	s12, s12, s11
 8007f78:	ee66 4a85 	vmul.f32	s9, s13, s10
 8007f7c:	ee26 5a05 	vmul.f32	s10, s12, s10
 8007f80:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007f84:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007f88:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007f8c:	ee34 6a86 	vadd.f32	s12, s9, s12
 8007f90:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f98:	edc0 6a01 	vstr	s13, [r0, #4]
 8007f9c:	ed80 6a00 	vstr	s12, [r0]
 8007fa0:	ed92 6a01 	vldr	s12, [r2, #4]
 8007fa4:	9803      	ldr	r0, [sp, #12]
 8007fa6:	ee77 7a43 	vsub.f32	s15, s14, s6
 8007faa:	ee75 5a84 	vadd.f32	s11, s11, s8
 8007fae:	ed92 7a00 	vldr	s14, [r2]
 8007fb2:	ee65 6a87 	vmul.f32	s13, s11, s14
 8007fb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007fba:	ee65 5a86 	vmul.f32	s11, s11, s12
 8007fbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007fc2:	ee77 5a65 	vsub.f32	s11, s14, s11
 8007fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fca:	edca 5a01 	vstr	s11, [sl, #4]
 8007fce:	edca 7a00 	vstr	s15, [sl]
 8007fd2:	6872      	ldr	r2, [r6, #4]
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	f000 fb84 	bl	80086e4 <arm_radix8_butterfly_f32>
 8007fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fde:	6872      	ldr	r2, [r6, #4]
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	2304      	movs	r3, #4
 8007fe4:	f000 fb7e 	bl	80086e4 <arm_radix8_butterfly_f32>
 8007fe8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fea:	6872      	ldr	r2, [r6, #4]
 8007fec:	4621      	mov	r1, r4
 8007fee:	2304      	movs	r3, #4
 8007ff0:	f000 fb78 	bl	80086e4 <arm_radix8_butterfly_f32>
 8007ff4:	9801      	ldr	r0, [sp, #4]
 8007ff6:	6872      	ldr	r2, [r6, #4]
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	2304      	movs	r3, #4
 8007ffc:	b00f      	add	sp, #60	; 0x3c
 8007ffe:	ecbd 8b0a 	vpop	{d8-d12}
 8008002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008006:	f000 bb6d 	b.w	80086e4 <arm_radix8_butterfly_f32>
 800800a:	bf00      	nop

0800800c <arm_cfft_f32>:
 800800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008010:	2a01      	cmp	r2, #1
 8008012:	4606      	mov	r6, r0
 8008014:	4617      	mov	r7, r2
 8008016:	460c      	mov	r4, r1
 8008018:	4698      	mov	r8, r3
 800801a:	8805      	ldrh	r5, [r0, #0]
 800801c:	d054      	beq.n	80080c8 <arm_cfft_f32+0xbc>
 800801e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008022:	d04c      	beq.n	80080be <arm_cfft_f32+0xb2>
 8008024:	d916      	bls.n	8008054 <arm_cfft_f32+0x48>
 8008026:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800802a:	d01a      	beq.n	8008062 <arm_cfft_f32+0x56>
 800802c:	d95c      	bls.n	80080e8 <arm_cfft_f32+0xdc>
 800802e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008032:	d044      	beq.n	80080be <arm_cfft_f32+0xb2>
 8008034:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008038:	d105      	bne.n	8008046 <arm_cfft_f32+0x3a>
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	6872      	ldr	r2, [r6, #4]
 8008040:	2301      	movs	r3, #1
 8008042:	f000 fb4f 	bl	80086e4 <arm_radix8_butterfly_f32>
 8008046:	f1b8 0f00 	cmp.w	r8, #0
 800804a:	d111      	bne.n	8008070 <arm_cfft_f32+0x64>
 800804c:	2f01      	cmp	r7, #1
 800804e:	d016      	beq.n	800807e <arm_cfft_f32+0x72>
 8008050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008054:	2d20      	cmp	r5, #32
 8008056:	d032      	beq.n	80080be <arm_cfft_f32+0xb2>
 8008058:	d94a      	bls.n	80080f0 <arm_cfft_f32+0xe4>
 800805a:	2d40      	cmp	r5, #64	; 0x40
 800805c:	d0ed      	beq.n	800803a <arm_cfft_f32+0x2e>
 800805e:	2d80      	cmp	r5, #128	; 0x80
 8008060:	d1f1      	bne.n	8008046 <arm_cfft_f32+0x3a>
 8008062:	4630      	mov	r0, r6
 8008064:	4621      	mov	r1, r4
 8008066:	f7ff fca1 	bl	80079ac <arm_cfft_radix8by2_f32>
 800806a:	f1b8 0f00 	cmp.w	r8, #0
 800806e:	d0ed      	beq.n	800804c <arm_cfft_f32+0x40>
 8008070:	4620      	mov	r0, r4
 8008072:	89b1      	ldrh	r1, [r6, #12]
 8008074:	68b2      	ldr	r2, [r6, #8]
 8008076:	f7f8 f8cb 	bl	8000210 <arm_bitreversal_32>
 800807a:	2f01      	cmp	r7, #1
 800807c:	d1e8      	bne.n	8008050 <arm_cfft_f32+0x44>
 800807e:	ee07 5a90 	vmov	s15, r5
 8008082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008086:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800808a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800808e:	2d00      	cmp	r5, #0
 8008090:	d0de      	beq.n	8008050 <arm_cfft_f32+0x44>
 8008092:	f104 0108 	add.w	r1, r4, #8
 8008096:	2300      	movs	r3, #0
 8008098:	3301      	adds	r3, #1
 800809a:	429d      	cmp	r5, r3
 800809c:	f101 0108 	add.w	r1, r1, #8
 80080a0:	ed11 7a04 	vldr	s14, [r1, #-16]
 80080a4:	ed51 7a03 	vldr	s15, [r1, #-12]
 80080a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80080ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80080b0:	ed01 7a04 	vstr	s14, [r1, #-16]
 80080b4:	ed41 7a03 	vstr	s15, [r1, #-12]
 80080b8:	d1ee      	bne.n	8008098 <arm_cfft_f32+0x8c>
 80080ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080be:	4630      	mov	r0, r6
 80080c0:	4621      	mov	r1, r4
 80080c2:	f7ff fd45 	bl	8007b50 <arm_cfft_radix8by4_f32>
 80080c6:	e7be      	b.n	8008046 <arm_cfft_f32+0x3a>
 80080c8:	b1ad      	cbz	r5, 80080f6 <arm_cfft_f32+0xea>
 80080ca:	f101 030c 	add.w	r3, r1, #12
 80080ce:	2200      	movs	r2, #0
 80080d0:	ed53 7a02 	vldr	s15, [r3, #-8]
 80080d4:	3201      	adds	r2, #1
 80080d6:	eef1 7a67 	vneg.f32	s15, s15
 80080da:	4295      	cmp	r5, r2
 80080dc:	ed43 7a02 	vstr	s15, [r3, #-8]
 80080e0:	f103 0308 	add.w	r3, r3, #8
 80080e4:	d1f4      	bne.n	80080d0 <arm_cfft_f32+0xc4>
 80080e6:	e79a      	b.n	800801e <arm_cfft_f32+0x12>
 80080e8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80080ec:	d0a5      	beq.n	800803a <arm_cfft_f32+0x2e>
 80080ee:	e7aa      	b.n	8008046 <arm_cfft_f32+0x3a>
 80080f0:	2d10      	cmp	r5, #16
 80080f2:	d0b6      	beq.n	8008062 <arm_cfft_f32+0x56>
 80080f4:	e7a7      	b.n	8008046 <arm_cfft_f32+0x3a>
 80080f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80080fa:	d894      	bhi.n	8008026 <arm_cfft_f32+0x1a>
 80080fc:	e7aa      	b.n	8008054 <arm_cfft_f32+0x48>
 80080fe:	bf00      	nop

08008100 <arm_fir_init_f32>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	9c04      	ldr	r4, [sp, #16]
 8008104:	6082      	str	r2, [r0, #8]
 8008106:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800810a:	3c01      	subs	r4, #1
 800810c:	4605      	mov	r5, r0
 800810e:	440c      	add	r4, r1
 8008110:	8001      	strh	r1, [r0, #0]
 8008112:	461e      	mov	r6, r3
 8008114:	00a2      	lsls	r2, r4, #2
 8008116:	4618      	mov	r0, r3
 8008118:	2100      	movs	r1, #0
 800811a:	f001 fc33 	bl	8009984 <memset>
 800811e:	606e      	str	r6, [r5, #4]
 8008120:	bd70      	pop	{r4, r5, r6, pc}
 8008122:	bf00      	nop

08008124 <arm_fir_f32>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	ed2d 8b10 	vpush	{d8-d15}
 800812c:	b089      	sub	sp, #36	; 0x24
 800812e:	4605      	mov	r5, r0
 8008130:	9003      	str	r0, [sp, #12]
 8008132:	8800      	ldrh	r0, [r0, #0]
 8008134:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	461e      	mov	r6, r3
 800813c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8008140:	3b01      	subs	r3, #1
 8008142:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8008146:	08f3      	lsrs	r3, r6, #3
 8008148:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800814c:	9001      	str	r0, [sp, #4]
 800814e:	4625      	mov	r5, r4
 8008150:	9400      	str	r4, [sp, #0]
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	f000 81ee 	beq.w	8008534 <arm_fir_f32+0x410>
 8008158:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 800815c:	469e      	mov	lr, r3
 800815e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8008162:	1f1e      	subs	r6, r3, #4
 8008164:	4604      	mov	r4, r0
 8008166:	9605      	str	r6, [sp, #20]
 8008168:	eb08 0003 	add.w	r0, r8, r3
 800816c:	f004 0a07 	and.w	sl, r4, #7
 8008170:	4613      	mov	r3, r2
 8008172:	f10c 0420 	add.w	r4, ip, #32
 8008176:	f8cd c018 	str.w	ip, [sp, #24]
 800817a:	4684      	mov	ip, r0
 800817c:	4648      	mov	r0, r9
 800817e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008182:	9107      	str	r1, [sp, #28]
 8008184:	f105 0720 	add.w	r7, r5, #32
 8008188:	f101 0620 	add.w	r6, r1, #32
 800818c:	f102 0520 	add.w	r5, r2, #32
 8008190:	4652      	mov	r2, sl
 8008192:	469a      	mov	sl, r3
 8008194:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8008198:	f847 3c20 	str.w	r3, [r7, #-32]
 800819c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80081a0:	f847 3c1c 	str.w	r3, [r7, #-28]
 80081a4:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80081a8:	f847 3c18 	str.w	r3, [r7, #-24]
 80081ac:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80081b0:	f847 3c14 	str.w	r3, [r7, #-20]
 80081b4:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80081b8:	f847 3c10 	str.w	r3, [r7, #-16]
 80081bc:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80081c0:	f847 3c0c 	str.w	r3, [r7, #-12]
 80081c4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80081c8:	f847 3c08 	str.w	r3, [r7, #-8]
 80081cc:	eddf 3af1 	vldr	s7, [pc, #964]	; 8008594 <arm_fir_f32+0x470>
 80081d0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80081d4:	f847 3c04 	str.w	r3, [r7, #-4]
 80081d8:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 80081dc:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 80081e0:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80081e4:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 80081e8:	ed14 1a04 	vldr	s2, [r4, #-16]
 80081ec:	ed54 0a03 	vldr	s1, [r4, #-12]
 80081f0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80081f4:	1f21      	subs	r1, r4, #4
 80081f6:	eef0 8a63 	vmov.f32	s17, s7
 80081fa:	eef0 9a63 	vmov.f32	s19, s7
 80081fe:	eef0 aa63 	vmov.f32	s21, s7
 8008202:	eef0 ba63 	vmov.f32	s23, s7
 8008206:	eeb0 ca63 	vmov.f32	s24, s7
 800820a:	eef0 ca63 	vmov.f32	s25, s7
 800820e:	eeb0 da63 	vmov.f32	s26, s7
 8008212:	2800      	cmp	r0, #0
 8008214:	f000 81e8 	beq.w	80085e8 <arm_fir_f32+0x4c4>
 8008218:	f108 0120 	add.w	r1, r8, #32
 800821c:	f104 031c 	add.w	r3, r4, #28
 8008220:	4683      	mov	fp, r0
 8008222:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8008226:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 800822a:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800822e:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8008232:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8008236:	ed11 6a04 	vldr	s12, [r1, #-16]
 800823a:	ed51 6a03 	vldr	s13, [r1, #-12]
 800823e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8008242:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008246:	ee23 fa04 	vmul.f32	s30, s6, s8
 800824a:	ee62 ea84 	vmul.f32	s29, s5, s8
 800824e:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8008252:	ee22 ea04 	vmul.f32	s28, s4, s8
 8008256:	ee61 da84 	vmul.f32	s27, s3, s8
 800825a:	ee21 ba04 	vmul.f32	s22, s2, s8
 800825e:	ee20 aa84 	vmul.f32	s20, s1, s8
 8008262:	ee20 9a04 	vmul.f32	s18, s0, s8
 8008266:	ee28 4a04 	vmul.f32	s8, s16, s8
 800826a:	ee62 fa24 	vmul.f32	s31, s4, s9
 800826e:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8008272:	ee7b baad 	vadd.f32	s23, s23, s27
 8008276:	ee21 eaa4 	vmul.f32	s28, s3, s9
 800827a:	ee61 da24 	vmul.f32	s27, s2, s9
 800827e:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8008282:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8008286:	ee20 baa4 	vmul.f32	s22, s1, s9
 800828a:	ee20 aa24 	vmul.f32	s20, s0, s9
 800828e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8008292:	ee7c caae 	vadd.f32	s25, s25, s29
 8008296:	ee22 faa4 	vmul.f32	s30, s5, s9
 800829a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800829e:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 80082a2:	ee28 9a24 	vmul.f32	s18, s16, s9
 80082a6:	ee73 3a84 	vadd.f32	s7, s7, s8
 80082aa:	ee63 4a24 	vmul.f32	s9, s6, s9
 80082ae:	ee22 4a05 	vmul.f32	s8, s4, s10
 80082b2:	ee61 ea05 	vmul.f32	s29, s2, s10
 80082b6:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 80082ba:	ee3d da0f 	vadd.f32	s26, s26, s30
 80082be:	ee7c caaf 	vadd.f32	s25, s25, s31
 80082c2:	ee20 fa85 	vmul.f32	s30, s1, s10
 80082c6:	ee61 fa85 	vmul.f32	s31, s3, s10
 80082ca:	ee3c ea0e 	vadd.f32	s28, s24, s28
 80082ce:	ee7b daad 	vadd.f32	s27, s23, s27
 80082d2:	ee3a ba8b 	vadd.f32	s22, s21, s22
 80082d6:	ee60 ba05 	vmul.f32	s23, s0, s10
 80082da:	ee68 aa05 	vmul.f32	s21, s16, s10
 80082de:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80082e2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80082e6:	ee73 3aa4 	vadd.f32	s7, s7, s9
 80082ea:	ee63 4a05 	vmul.f32	s9, s6, s10
 80082ee:	ee22 5a85 	vmul.f32	s10, s5, s10
 80082f2:	ee21 9a25 	vmul.f32	s18, s2, s11
 80082f6:	ee20 ca25 	vmul.f32	s24, s0, s11
 80082fa:	ee3d da04 	vadd.f32	s26, s26, s8
 80082fe:	ee7c caaf 	vadd.f32	s25, s25, s31
 8008302:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8008306:	ee3e ea2e 	vadd.f32	s28, s28, s29
 800830a:	ed53 1a04 	vldr	s3, [r3, #-16]
 800830e:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8008312:	ee7d da8f 	vadd.f32	s27, s27, s30
 8008316:	ee3b ba2b 	vadd.f32	s22, s22, s23
 800831a:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800831e:	ee68 ba25 	vmul.f32	s23, s16, s11
 8008322:	ee63 aa25 	vmul.f32	s21, s6, s11
 8008326:	ee78 8aa4 	vadd.f32	s17, s17, s9
 800832a:	ee73 3a85 	vadd.f32	s7, s7, s10
 800832e:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8008332:	ee62 5a25 	vmul.f32	s11, s4, s11
 8008336:	ee61 4a06 	vmul.f32	s9, s2, s12
 800833a:	ee60 9a86 	vmul.f32	s19, s1, s12
 800833e:	ee60 fa06 	vmul.f32	s31, s0, s12
 8008342:	ed13 1a03 	vldr	s2, [r3, #-12]
 8008346:	ee23 fa06 	vmul.f32	s30, s6, s12
 800834a:	ee3d da04 	vadd.f32	s26, s26, s8
 800834e:	ee7c ca89 	vadd.f32	s25, s25, s18
 8008352:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8008356:	ee28 9a06 	vmul.f32	s18, s16, s12
 800835a:	ee7d da8c 	vadd.f32	s27, s27, s24
 800835e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8008362:	ee22 ca86 	vmul.f32	s24, s5, s12
 8008366:	ee3a aa2a 	vadd.f32	s20, s20, s21
 800836a:	ee78 8a85 	vadd.f32	s17, s17, s10
 800836e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8008372:	ee62 5a06 	vmul.f32	s11, s4, s12
 8008376:	ee21 6a86 	vmul.f32	s12, s3, s12
 800837a:	ee20 4a26 	vmul.f32	s8, s0, s13
 800837e:	ee63 ea26 	vmul.f32	s29, s6, s13
 8008382:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8008386:	ee22 5a26 	vmul.f32	s10, s4, s13
 800838a:	ee3d da24 	vadd.f32	s26, s26, s9
 800838e:	ee7c caa9 	vadd.f32	s25, s25, s19
 8008392:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8008396:	ee3e ea2f 	vadd.f32	s28, s28, s31
 800839a:	ed53 0a02 	vldr	s1, [r3, #-8]
 800839e:	ee68 fa26 	vmul.f32	s31, s16, s13
 80083a2:	ee7d da89 	vadd.f32	s27, s27, s18
 80083a6:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80083aa:	ee78 8aa5 	vadd.f32	s17, s17, s11
 80083ae:	ee22 faa6 	vmul.f32	s30, s5, s13
 80083b2:	ee73 3a86 	vadd.f32	s7, s7, s12
 80083b6:	ee21 6aa6 	vmul.f32	s12, s3, s13
 80083ba:	ee61 6a26 	vmul.f32	s13, s2, s13
 80083be:	ee60 aa07 	vmul.f32	s21, s0, s14
 80083c2:	ee28 ca07 	vmul.f32	s24, s16, s14
 80083c6:	ee63 ba07 	vmul.f32	s23, s6, s14
 80083ca:	ee7a 9a05 	vadd.f32	s19, s20, s10
 80083ce:	ee78 8a86 	vadd.f32	s17, s17, s12
 80083d2:	ee3d da24 	vadd.f32	s26, s26, s9
 80083d6:	ee7c ca84 	vadd.f32	s25, s25, s8
 80083da:	ee7d daae 	vadd.f32	s27, s27, s29
 80083de:	ee22 9a07 	vmul.f32	s18, s4, s14
 80083e2:	ee62 ea87 	vmul.f32	s29, s5, s14
 80083e6:	ee61 5a87 	vmul.f32	s11, s3, s14
 80083ea:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80083ee:	ed13 0a01 	vldr	s0, [r3, #-4]
 80083f2:	ee61 6a07 	vmul.f32	s13, s2, s14
 80083f6:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80083fa:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80083fe:	ee20 7a87 	vmul.f32	s14, s1, s14
 8008402:	ee68 4a27 	vmul.f32	s9, s16, s15
 8008406:	ee3d da2a 	vadd.f32	s26, s26, s21
 800840a:	ee7c ca8c 	vadd.f32	s25, s25, s24
 800840e:	ee23 8a27 	vmul.f32	s16, s6, s15
 8008412:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8008416:	ee22 4aa7 	vmul.f32	s8, s5, s15
 800841a:	ee22 aa27 	vmul.f32	s20, s4, s15
 800841e:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8008422:	ee21 6a27 	vmul.f32	s12, s2, s15
 8008426:	ee78 6aa6 	vadd.f32	s13, s17, s13
 800842a:	ee7d daae 	vadd.f32	s27, s27, s29
 800842e:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8008432:	ee3b ba09 	vadd.f32	s22, s22, s18
 8008436:	ee79 9aa5 	vadd.f32	s19, s19, s11
 800843a:	ee73 3a87 	vadd.f32	s7, s7, s14
 800843e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008442:	f1bb 0b01 	subs.w	fp, fp, #1
 8008446:	f101 0120 	add.w	r1, r1, #32
 800844a:	ee3d da24 	vadd.f32	s26, s26, s9
 800844e:	ee7c ca88 	vadd.f32	s25, s25, s16
 8008452:	ee3e ca04 	vadd.f32	s24, s28, s8
 8008456:	ee7d ba8a 	vadd.f32	s23, s27, s20
 800845a:	ee7b aa05 	vadd.f32	s21, s22, s10
 800845e:	ee79 9a86 	vadd.f32	s19, s19, s12
 8008462:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8008466:	ee73 3aa7 	vadd.f32	s7, s7, s15
 800846a:	f103 0320 	add.w	r3, r3, #32
 800846e:	f47f aed8 	bne.w	8008222 <arm_fir_f32+0xfe>
 8008472:	eb09 0104 	add.w	r1, r9, r4
 8008476:	46e3      	mov	fp, ip
 8008478:	b3a2      	cbz	r2, 80084e4 <arm_fir_f32+0x3c0>
 800847a:	4613      	mov	r3, r2
 800847c:	ecbb 6a01 	vldmia	fp!, {s12}
 8008480:	ecf1 7a01 	vldmia	r1!, {s15}
 8008484:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008488:	ee22 4a86 	vmul.f32	s8, s5, s12
 800848c:	ee62 4a06 	vmul.f32	s9, s4, s12
 8008490:	ee21 5a86 	vmul.f32	s10, s3, s12
 8008494:	ee61 5a06 	vmul.f32	s11, s2, s12
 8008498:	ee60 6a86 	vmul.f32	s13, s1, s12
 800849c:	ee20 7a06 	vmul.f32	s14, s0, s12
 80084a0:	ee27 6a86 	vmul.f32	s12, s15, s12
 80084a4:	3b01      	subs	r3, #1
 80084a6:	ee3d da03 	vadd.f32	s26, s26, s6
 80084aa:	ee7c ca84 	vadd.f32	s25, s25, s8
 80084ae:	eeb0 3a62 	vmov.f32	s6, s5
 80084b2:	ee3c ca24 	vadd.f32	s24, s24, s9
 80084b6:	eef0 2a42 	vmov.f32	s5, s4
 80084ba:	ee7b ba85 	vadd.f32	s23, s23, s10
 80084be:	eeb0 2a61 	vmov.f32	s4, s3
 80084c2:	ee7a aaa5 	vadd.f32	s21, s21, s11
 80084c6:	eef0 1a41 	vmov.f32	s3, s2
 80084ca:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80084ce:	eeb0 1a60 	vmov.f32	s2, s1
 80084d2:	ee78 8a87 	vadd.f32	s17, s17, s14
 80084d6:	eef0 0a40 	vmov.f32	s1, s0
 80084da:	ee73 3a86 	vadd.f32	s7, s7, s12
 80084de:	eeb0 0a67 	vmov.f32	s0, s15
 80084e2:	d1cb      	bne.n	800847c <arm_fir_f32+0x358>
 80084e4:	f1be 0e01 	subs.w	lr, lr, #1
 80084e8:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 80084ec:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 80084f0:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 80084f4:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 80084f8:	ed45 aa04 	vstr	s21, [r5, #-16]
 80084fc:	ed45 9a03 	vstr	s19, [r5, #-12]
 8008500:	ed45 8a02 	vstr	s17, [r5, #-8]
 8008504:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008508:	f107 0720 	add.w	r7, r7, #32
 800850c:	f106 0620 	add.w	r6, r6, #32
 8008510:	f104 0420 	add.w	r4, r4, #32
 8008514:	f105 0520 	add.w	r5, r5, #32
 8008518:	f47f ae3c 	bne.w	8008194 <arm_fir_f32+0x70>
 800851c:	9b02      	ldr	r3, [sp, #8]
 800851e:	9800      	ldr	r0, [sp, #0]
 8008520:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008524:	9907      	ldr	r1, [sp, #28]
 8008526:	015b      	lsls	r3, r3, #5
 8008528:	4652      	mov	r2, sl
 800852a:	4418      	add	r0, r3
 800852c:	9000      	str	r0, [sp, #0]
 800852e:	4419      	add	r1, r3
 8008530:	449c      	add	ip, r3
 8008532:	441a      	add	r2, r3
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	f013 0e07 	ands.w	lr, r3, #7
 800853a:	d01f      	beq.n	800857c <arm_fir_f32+0x458>
 800853c:	9f00      	ldr	r7, [sp, #0]
 800853e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008542:	4676      	mov	r6, lr
 8008544:	4665      	mov	r5, ip
 8008546:	f851 3b04 	ldr.w	r3, [r1], #4
 800854a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008594 <arm_fir_f32+0x470>
 800854e:	f847 3b04 	str.w	r3, [r7], #4
 8008552:	4644      	mov	r4, r8
 8008554:	464b      	mov	r3, r9
 8008556:	4628      	mov	r0, r5
 8008558:	ecb0 7a01 	vldmia	r0!, {s14}
 800855c:	ecf4 7a01 	vldmia	r4!, {s15}
 8008560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008564:	3b01      	subs	r3, #1
 8008566:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800856a:	d1f5      	bne.n	8008558 <arm_fir_f32+0x434>
 800856c:	3e01      	subs	r6, #1
 800856e:	ece2 6a01 	vstmia	r2!, {s13}
 8008572:	f105 0504 	add.w	r5, r5, #4
 8008576:	d1e6      	bne.n	8008546 <arm_fir_f32+0x422>
 8008578:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	1e59      	subs	r1, r3, #1
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	088e      	lsrs	r6, r1, #2
 8008584:	685c      	ldr	r4, [r3, #4]
 8008586:	d020      	beq.n	80085ca <arm_fir_f32+0x4a6>
 8008588:	f104 0210 	add.w	r2, r4, #16
 800858c:	f10c 0310 	add.w	r3, ip, #16
 8008590:	4630      	mov	r0, r6
 8008592:	e001      	b.n	8008598 <arm_fir_f32+0x474>
 8008594:	00000000 	.word	0x00000000
 8008598:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800859c:	f842 5c10 	str.w	r5, [r2, #-16]
 80085a0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80085a4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80085a8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80085ac:	f842 5c08 	str.w	r5, [r2, #-8]
 80085b0:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80085b4:	f842 5c04 	str.w	r5, [r2, #-4]
 80085b8:	3801      	subs	r0, #1
 80085ba:	f103 0310 	add.w	r3, r3, #16
 80085be:	f102 0210 	add.w	r2, r2, #16
 80085c2:	d1e9      	bne.n	8008598 <arm_fir_f32+0x474>
 80085c4:	0133      	lsls	r3, r6, #4
 80085c6:	441c      	add	r4, r3
 80085c8:	449c      	add	ip, r3
 80085ca:	f011 0303 	ands.w	r3, r1, #3
 80085ce:	d006      	beq.n	80085de <arm_fir_f32+0x4ba>
 80085d0:	4622      	mov	r2, r4
 80085d2:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085d6:	f842 1b04 	str.w	r1, [r2], #4
 80085da:	3b01      	subs	r3, #1
 80085dc:	d1f9      	bne.n	80085d2 <arm_fir_f32+0x4ae>
 80085de:	b009      	add	sp, #36	; 0x24
 80085e0:	ecbd 8b10 	vpop	{d8-d15}
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	46c3      	mov	fp, r8
 80085ea:	e745      	b.n	8008478 <arm_fir_f32+0x354>

080085ec <arm_offset_f32>:
 80085ec:	b470      	push	{r4, r5, r6}
 80085ee:	0896      	lsrs	r6, r2, #2
 80085f0:	d025      	beq.n	800863e <arm_offset_f32+0x52>
 80085f2:	f100 0410 	add.w	r4, r0, #16
 80085f6:	f101 0310 	add.w	r3, r1, #16
 80085fa:	4635      	mov	r5, r6
 80085fc:	ed14 6a04 	vldr	s12, [r4, #-16]
 8008600:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008604:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008608:	ed54 7a01 	vldr	s15, [r4, #-4]
 800860c:	ee36 6a00 	vadd.f32	s12, s12, s0
 8008610:	ee76 6a80 	vadd.f32	s13, s13, s0
 8008614:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008618:	ee77 7a80 	vadd.f32	s15, s15, s0
 800861c:	3d01      	subs	r5, #1
 800861e:	ed03 6a04 	vstr	s12, [r3, #-16]
 8008622:	ed43 6a03 	vstr	s13, [r3, #-12]
 8008626:	ed03 7a02 	vstr	s14, [r3, #-8]
 800862a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800862e:	f104 0410 	add.w	r4, r4, #16
 8008632:	f103 0310 	add.w	r3, r3, #16
 8008636:	d1e1      	bne.n	80085fc <arm_offset_f32+0x10>
 8008638:	0136      	lsls	r6, r6, #4
 800863a:	4430      	add	r0, r6
 800863c:	4431      	add	r1, r6
 800863e:	f012 0203 	ands.w	r2, r2, #3
 8008642:	d007      	beq.n	8008654 <arm_offset_f32+0x68>
 8008644:	ecf0 7a01 	vldmia	r0!, {s15}
 8008648:	ee77 7a80 	vadd.f32	s15, s15, s0
 800864c:	3a01      	subs	r2, #1
 800864e:	ece1 7a01 	vstmia	r1!, {s15}
 8008652:	d1f7      	bne.n	8008644 <arm_offset_f32+0x58>
 8008654:	bc70      	pop	{r4, r5, r6}
 8008656:	4770      	bx	lr

08008658 <arm_mult_f32>:
 8008658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800865a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800865e:	d033      	beq.n	80086c8 <arm_mult_f32+0x70>
 8008660:	f100 0610 	add.w	r6, r0, #16
 8008664:	f101 0510 	add.w	r5, r1, #16
 8008668:	f102 0410 	add.w	r4, r2, #16
 800866c:	4677      	mov	r7, lr
 800866e:	ed16 6a04 	vldr	s12, [r6, #-16]
 8008672:	ed55 4a04 	vldr	s9, [r5, #-16]
 8008676:	ed56 6a02 	vldr	s13, [r6, #-8]
 800867a:	ed15 5a02 	vldr	s10, [r5, #-8]
 800867e:	ed16 7a03 	vldr	s14, [r6, #-12]
 8008682:	ed55 5a03 	vldr	s11, [r5, #-12]
 8008686:	ed56 7a01 	vldr	s15, [r6, #-4]
 800868a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800868e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008692:	ed04 6a04 	vstr	s12, [r4, #-16]
 8008696:	ed15 6a01 	vldr	s12, [r5, #-4]
 800869a:	ed44 6a02 	vstr	s13, [r4, #-8]
 800869e:	ee27 7a25 	vmul.f32	s14, s14, s11
 80086a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80086a6:	3f01      	subs	r7, #1
 80086a8:	ed04 7a03 	vstr	s14, [r4, #-12]
 80086ac:	ed44 7a01 	vstr	s15, [r4, #-4]
 80086b0:	f106 0610 	add.w	r6, r6, #16
 80086b4:	f105 0510 	add.w	r5, r5, #16
 80086b8:	f104 0410 	add.w	r4, r4, #16
 80086bc:	d1d7      	bne.n	800866e <arm_mult_f32+0x16>
 80086be:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80086c2:	4420      	add	r0, r4
 80086c4:	4421      	add	r1, r4
 80086c6:	4422      	add	r2, r4
 80086c8:	f013 0303 	ands.w	r3, r3, #3
 80086cc:	d009      	beq.n	80086e2 <arm_mult_f32+0x8a>
 80086ce:	ecf0 7a01 	vldmia	r0!, {s15}
 80086d2:	ecb1 7a01 	vldmia	r1!, {s14}
 80086d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086da:	3b01      	subs	r3, #1
 80086dc:	ece2 7a01 	vstmia	r2!, {s15}
 80086e0:	d1f5      	bne.n	80086ce <arm_mult_f32+0x76>
 80086e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086e4 <arm_radix8_butterfly_f32>:
 80086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	ed2d 8b10 	vpush	{d8-d15}
 80086ec:	b09d      	sub	sp, #116	; 0x74
 80086ee:	461c      	mov	r4, r3
 80086f0:	ed9f bac8 	vldr	s22, [pc, #800]	; 8008a14 <arm_radix8_butterfly_f32+0x330>
 80086f4:	921a      	str	r2, [sp, #104]	; 0x68
 80086f6:	1d03      	adds	r3, r0, #4
 80086f8:	4682      	mov	sl, r0
 80086fa:	4689      	mov	r9, r1
 80086fc:	468b      	mov	fp, r1
 80086fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8008700:	9400      	str	r4, [sp, #0]
 8008702:	469e      	mov	lr, r3
 8008704:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008708:	005a      	lsls	r2, r3, #1
 800870a:	18d6      	adds	r6, r2, r3
 800870c:	18f5      	adds	r5, r6, r3
 800870e:	9203      	str	r2, [sp, #12]
 8008710:	195a      	adds	r2, r3, r5
 8008712:	18d0      	adds	r0, r2, r3
 8008714:	00df      	lsls	r7, r3, #3
 8008716:	1819      	adds	r1, r3, r0
 8008718:	463c      	mov	r4, r7
 800871a:	9701      	str	r7, [sp, #4]
 800871c:	4457      	add	r7, sl
 800871e:	930c      	str	r3, [sp, #48]	; 0x30
 8008720:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800872a:	eb07 0c04 	add.w	ip, r7, r4
 800872e:	9c00      	ldr	r4, [sp, #0]
 8008730:	9302      	str	r3, [sp, #8]
 8008732:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8008736:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800873a:	3204      	adds	r2, #4
 800873c:	3104      	adds	r1, #4
 800873e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8008742:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008746:	f04f 0800 	mov.w	r8, #0
 800874a:	eddc 7a00 	vldr	s15, [ip]
 800874e:	edd7 6a00 	vldr	s13, [r7]
 8008752:	edd6 3a00 	vldr	s7, [r6]
 8008756:	ed5e aa01 	vldr	s21, [lr, #-4]
 800875a:	edd5 4a00 	vldr	s9, [r5]
 800875e:	ed90 2a00 	vldr	s4, [r0]
 8008762:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008766:	ed51 0a01 	vldr	s1, [r1, #-4]
 800876a:	ee77 8a82 	vadd.f32	s17, s15, s4
 800876e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8008772:	ee76 1a87 	vadd.f32	s3, s13, s14
 8008776:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800877a:	ee31 6a84 	vadd.f32	s12, s3, s8
 800877e:	ee33 5a28 	vadd.f32	s10, s6, s17
 8008782:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008786:	ee75 6a06 	vadd.f32	s13, s10, s12
 800878a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800878e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8008792:	ed85 5a00 	vstr	s10, [r5]
 8008796:	ed96 1a01 	vldr	s2, [r6, #4]
 800879a:	edd7 5a01 	vldr	s11, [r7, #4]
 800879e:	ed92 aa00 	vldr	s20, [r2]
 80087a2:	ed91 6a00 	vldr	s12, [r1]
 80087a6:	ed9e 9a00 	vldr	s18, [lr]
 80087aa:	ed95 5a01 	vldr	s10, [r5, #4]
 80087ae:	eddc 6a01 	vldr	s13, [ip, #4]
 80087b2:	edd0 9a01 	vldr	s19, [r0, #4]
 80087b6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80087ba:	ee71 2a46 	vsub.f32	s5, s2, s12
 80087be:	ee75 3aca 	vsub.f32	s7, s11, s20
 80087c2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80087c6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80087ca:	ee37 7a20 	vadd.f32	s14, s14, s1
 80087ce:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80087d2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80087d6:	ee79 3a05 	vadd.f32	s7, s18, s10
 80087da:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80087de:	ee39 5a45 	vsub.f32	s10, s18, s10
 80087e2:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80087e6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80087ea:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80087ee:	ee31 6a06 	vadd.f32	s12, s2, s12
 80087f2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80087f6:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80087fa:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80087fe:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008802:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008806:	ee36 0a88 	vadd.f32	s0, s13, s16
 800880a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800880e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008812:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8008816:	ee75 6a62 	vsub.f32	s13, s10, s5
 800881a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800881e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008822:	ee33 1a89 	vadd.f32	s2, s7, s18
 8008826:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800882a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800882e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8008832:	ee32 5a27 	vadd.f32	s10, s4, s15
 8008836:	ee72 7a67 	vsub.f32	s15, s4, s15
 800883a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800883e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8008842:	ee31 9a28 	vadd.f32	s18, s2, s17
 8008846:	ee33 6a46 	vsub.f32	s12, s6, s12
 800884a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800884e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8008852:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008856:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800885a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800885e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8008862:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008866:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800886a:	ee74 4a85 	vadd.f32	s9, s9, s10
 800886e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008872:	44d8      	add	r8, fp
 8008874:	45c1      	cmp	r9, r8
 8008876:	ed8e 9a00 	vstr	s18, [lr]
 800887a:	ed85 1a01 	vstr	s2, [r5, #4]
 800887e:	449e      	add	lr, r3
 8008880:	ed8c 8a00 	vstr	s16, [ip]
 8008884:	441d      	add	r5, r3
 8008886:	ed80 6a00 	vstr	s12, [r0]
 800888a:	edcc 0a01 	vstr	s1, [ip, #4]
 800888e:	ed80 4a01 	vstr	s8, [r0, #4]
 8008892:	449c      	add	ip, r3
 8008894:	ed87 2a00 	vstr	s4, [r7]
 8008898:	4418      	add	r0, r3
 800889a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800889e:	ed42 2a01 	vstr	s5, [r2, #-4]
 80088a2:	ed86 7a00 	vstr	s14, [r6]
 80088a6:	ed87 3a01 	vstr	s6, [r7, #4]
 80088aa:	edc1 4a00 	vstr	s9, [r1]
 80088ae:	441f      	add	r7, r3
 80088b0:	edc2 5a00 	vstr	s11, [r2]
 80088b4:	4419      	add	r1, r3
 80088b6:	edc6 6a01 	vstr	s13, [r6, #4]
 80088ba:	441a      	add	r2, r3
 80088bc:	441e      	add	r6, r3
 80088be:	f63f af44 	bhi.w	800874a <arm_radix8_butterfly_f32+0x66>
 80088c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088c4:	2907      	cmp	r1, #7
 80088c6:	4620      	mov	r0, r4
 80088c8:	f240 81e9 	bls.w	8008c9e <arm_radix8_butterfly_f32+0x5ba>
 80088cc:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80088d0:	193e      	adds	r6, r7, r4
 80088d2:	1935      	adds	r5, r6, r4
 80088d4:	9c03      	ldr	r4, [sp, #12]
 80088d6:	9000      	str	r0, [sp, #0]
 80088d8:	4622      	mov	r2, r4
 80088da:	3201      	adds	r2, #1
 80088dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80088e0:	9900      	ldr	r1, [sp, #0]
 80088e2:	1828      	adds	r0, r5, r0
 80088e4:	eb00 0e01 	add.w	lr, r0, r1
 80088e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088ea:	440a      	add	r2, r1
 80088ec:	eb04 0c01 	add.w	ip, r4, r1
 80088f0:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80088f4:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80088f8:	9a00      	ldr	r2, [sp, #0]
 80088fa:	940f      	str	r4, [sp, #60]	; 0x3c
 80088fc:	00ed      	lsls	r5, r5, #3
 80088fe:	9511      	str	r5, [sp, #68]	; 0x44
 8008900:	00d5      	lsls	r5, r2, #3
 8008902:	950d      	str	r5, [sp, #52]	; 0x34
 8008904:	9d01      	ldr	r5, [sp, #4]
 8008906:	3508      	adds	r5, #8
 8008908:	9516      	str	r5, [sp, #88]	; 0x58
 800890a:	9d02      	ldr	r5, [sp, #8]
 800890c:	3508      	adds	r5, #8
 800890e:	0114      	lsls	r4, r2, #4
 8008910:	9517      	str	r5, [sp, #92]	; 0x5c
 8008912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008914:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008916:	940e      	str	r4, [sp, #56]	; 0x38
 8008918:	00c0      	lsls	r0, r0, #3
 800891a:	9010      	str	r0, [sp, #64]	; 0x40
 800891c:	18aa      	adds	r2, r5, r2
 800891e:	9207      	str	r2, [sp, #28]
 8008920:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008922:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008924:	18aa      	adds	r2, r5, r2
 8008926:	9208      	str	r2, [sp, #32]
 8008928:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800892a:	18aa      	adds	r2, r5, r2
 800892c:	9209      	str	r2, [sp, #36]	; 0x24
 800892e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008932:	f10e 0204 	add.w	r2, lr, #4
 8008936:	920a      	str	r2, [sp, #40]	; 0x28
 8008938:	00c9      	lsls	r1, r1, #3
 800893a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800893c:	310c      	adds	r1, #12
 800893e:	00f6      	lsls	r6, r6, #3
 8008940:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8008944:	9114      	str	r1, [sp, #80]	; 0x50
 8008946:	18a9      	adds	r1, r5, r2
 8008948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800894a:	9612      	str	r6, [sp, #72]	; 0x48
 800894c:	00ff      	lsls	r7, r7, #3
 800894e:	19ae      	adds	r6, r5, r6
 8008950:	3008      	adds	r0, #8
 8008952:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8008956:	9606      	str	r6, [sp, #24]
 8008958:	9019      	str	r0, [sp, #100]	; 0x64
 800895a:	18aa      	adds	r2, r5, r2
 800895c:	0164      	lsls	r4, r4, #5
 800895e:	19ee      	adds	r6, r5, r7
 8008960:	f10c 000c 	add.w	r0, ip, #12
 8008964:	9713      	str	r7, [sp, #76]	; 0x4c
 8008966:	9604      	str	r6, [sp, #16]
 8008968:	9015      	str	r0, [sp, #84]	; 0x54
 800896a:	9103      	str	r1, [sp, #12]
 800896c:	9205      	str	r2, [sp, #20]
 800896e:	f104 0208 	add.w	r2, r4, #8
 8008972:	9218      	str	r2, [sp, #96]	; 0x60
 8008974:	f04f 0801 	mov.w	r8, #1
 8008978:	2200      	movs	r2, #0
 800897a:	f102 0108 	add.w	r1, r2, #8
 800897e:	460f      	mov	r7, r1
 8008980:	910b      	str	r1, [sp, #44]	; 0x2c
 8008982:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008984:	188e      	adds	r6, r1, r2
 8008986:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008988:	188d      	adds	r5, r1, r2
 800898a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800898c:	188c      	adds	r4, r1, r2
 800898e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008990:	1888      	adds	r0, r1, r2
 8008992:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008994:	eb01 0c02 	add.w	ip, r1, r2
 8008998:	9915      	ldr	r1, [sp, #84]	; 0x54
 800899a:	440a      	add	r2, r1
 800899c:	9903      	ldr	r1, [sp, #12]
 800899e:	edd1 fa00 	vldr	s31, [r1]
 80089a2:	9905      	ldr	r1, [sp, #20]
 80089a4:	ed91 fa00 	vldr	s30, [r1]
 80089a8:	9904      	ldr	r1, [sp, #16]
 80089aa:	edd1 ea00 	vldr	s29, [r1]
 80089ae:	9906      	ldr	r1, [sp, #24]
 80089b0:	ed91 ea00 	vldr	s28, [r1]
 80089b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089b6:	edd1 da00 	vldr	s27, [r1]
 80089ba:	9908      	ldr	r1, [sp, #32]
 80089bc:	ed91 da00 	vldr	s26, [r1]
 80089c0:	9907      	ldr	r1, [sp, #28]
 80089c2:	edd1 ca00 	vldr	s25, [r1]
 80089c6:	9903      	ldr	r1, [sp, #12]
 80089c8:	ed91 ca01 	vldr	s24, [r1, #4]
 80089cc:	9905      	ldr	r1, [sp, #20]
 80089ce:	edd1 ba01 	vldr	s23, [r1, #4]
 80089d2:	9904      	ldr	r1, [sp, #16]
 80089d4:	edd1 aa01 	vldr	s21, [r1, #4]
 80089d8:	9906      	ldr	r1, [sp, #24]
 80089da:	ed91 aa01 	vldr	s20, [r1, #4]
 80089de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089e0:	edd1 7a01 	vldr	s15, [r1, #4]
 80089e4:	9908      	ldr	r1, [sp, #32]
 80089e6:	edcd 7a00 	vstr	s15, [sp]
 80089ea:	edd1 7a01 	vldr	s15, [r1, #4]
 80089ee:	9907      	ldr	r1, [sp, #28]
 80089f0:	edcd 7a01 	vstr	s15, [sp, #4]
 80089f4:	edd1 7a01 	vldr	s15, [r1, #4]
 80089f8:	eb0a 0e07 	add.w	lr, sl, r7
 80089fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80089fe:	edcd 7a02 	vstr	s15, [sp, #8]
 8008a02:	eb0c 010a 	add.w	r1, ip, sl
 8008a06:	4456      	add	r6, sl
 8008a08:	4455      	add	r5, sl
 8008a0a:	4454      	add	r4, sl
 8008a0c:	4450      	add	r0, sl
 8008a0e:	4452      	add	r2, sl
 8008a10:	46c4      	mov	ip, r8
 8008a12:	e001      	b.n	8008a18 <arm_radix8_butterfly_f32+0x334>
 8008a14:	3f3504f3 	.word	0x3f3504f3
 8008a18:	ed96 5a00 	vldr	s10, [r6]
 8008a1c:	ed52 9a01 	vldr	s19, [r2, #-4]
 8008a20:	ed11 6a01 	vldr	s12, [r1, #-4]
 8008a24:	edd0 7a00 	vldr	s15, [r0]
 8008a28:	ed17 7a01 	vldr	s14, [r7, #-4]
 8008a2c:	edde 3a00 	vldr	s7, [lr]
 8008a30:	ed94 3a00 	vldr	s6, [r4]
 8008a34:	ed95 2a00 	vldr	s4, [r5]
 8008a38:	ed9e 0a01 	vldr	s0, [lr, #4]
 8008a3c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008a40:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008a44:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008a48:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008a4c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008a50:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008a54:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008a58:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a60:	ed8e 6a00 	vstr	s12, [lr]
 8008a64:	edd0 8a01 	vldr	s17, [r0, #4]
 8008a68:	ed95 9a01 	vldr	s18, [r5, #4]
 8008a6c:	edd1 2a00 	vldr	s5, [r1]
 8008a70:	ed97 7a00 	vldr	s14, [r7]
 8008a74:	edd4 0a01 	vldr	s1, [r4, #4]
 8008a78:	ed96 6a01 	vldr	s12, [r6, #4]
 8008a7c:	edd2 5a00 	vldr	s11, [r2]
 8008a80:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008a84:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008a88:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008a8c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8008a90:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008a94:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008a98:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008a9c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008aa0:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008aa4:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008aa8:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008aac:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008ab0:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008ab4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008ab8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008abc:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008ac0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008ac4:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008ac8:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008acc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008ad0:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008ad4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008ad8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008adc:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008ae0:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008ae4:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008ae8:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008aec:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008af0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008af4:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008af8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008afc:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008b00:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008b04:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008b08:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008b0c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008b10:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8008b14:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008b18:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008b1c:	ee72 4a24 	vadd.f32	s9, s4, s9
 8008b20:	ee30 4a60 	vsub.f32	s8, s0, s1
 8008b24:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008b28:	ee30 0a20 	vadd.f32	s0, s0, s1
 8008b2c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008b30:	ee36 6a03 	vadd.f32	s12, s12, s6
 8008b34:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008b38:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8008b3c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8008b40:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8008b44:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8008b48:	ee39 1a01 	vadd.f32	s2, s18, s2
 8008b4c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8008b50:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8008b54:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8008b58:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8008b5c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8008b60:	ee35 3a03 	vadd.f32	s6, s10, s6
 8008b64:	ee72 6a66 	vsub.f32	s13, s4, s13
 8008b68:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8008b6c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8008b70:	ed9d 4a02 	vldr	s8, [sp, #8]
 8008b74:	ed8e 1a01 	vstr	s2, [lr, #4]
 8008b78:	ee77 3a63 	vsub.f32	s7, s14, s7
 8008b7c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008b80:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008b84:	ed86 3a00 	vstr	s6, [r6]
 8008b88:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008b8c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8008b90:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8008b94:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008b98:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008b9c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8008ba0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008ba4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008ba8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008bac:	ee64 8a28 	vmul.f32	s17, s8, s17
 8008bb0:	ed9d 4a00 	vldr	s8, [sp]
 8008bb4:	edc6 6a01 	vstr	s13, [r6, #4]
 8008bb8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008bbc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8008bc0:	ee64 9a29 	vmul.f32	s19, s8, s19
 8008bc4:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008bc8:	ee30 7a87 	vadd.f32	s14, s1, s14
 8008bcc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008bd0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8008bd4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8008bd8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8008bdc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8008be0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008be4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008be8:	ee75 1a21 	vadd.f32	s3, s10, s3
 8008bec:	ee30 0a68 	vsub.f32	s0, s0, s17
 8008bf0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8008bf4:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008bf8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008bfc:	44dc      	add	ip, fp
 8008bfe:	45e1      	cmp	r9, ip
 8008c00:	ed84 9a00 	vstr	s18, [r4]
 8008c04:	edc4 3a01 	vstr	s7, [r4, #4]
 8008c08:	449e      	add	lr, r3
 8008c0a:	ed02 7a01 	vstr	s14, [r2, #-4]
 8008c0e:	edc2 2a00 	vstr	s5, [r2]
 8008c12:	441e      	add	r6, r3
 8008c14:	ed85 2a00 	vstr	s4, [r5]
 8008c18:	ed85 8a01 	vstr	s16, [r5, #4]
 8008c1c:	441c      	add	r4, r3
 8008c1e:	ed47 1a01 	vstr	s3, [r7, #-4]
 8008c22:	ed87 0a00 	vstr	s0, [r7]
 8008c26:	441a      	add	r2, r3
 8008c28:	ed41 4a01 	vstr	s9, [r1, #-4]
 8008c2c:	edc1 9a00 	vstr	s19, [r1]
 8008c30:	441d      	add	r5, r3
 8008c32:	edc0 0a00 	vstr	s1, [r0]
 8008c36:	441f      	add	r7, r3
 8008c38:	ed80 6a01 	vstr	s12, [r0, #4]
 8008c3c:	4419      	add	r1, r3
 8008c3e:	4418      	add	r0, r3
 8008c40:	f63f aeea 	bhi.w	8008a18 <arm_radix8_butterfly_f32+0x334>
 8008c44:	9a03      	ldr	r2, [sp, #12]
 8008c46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c48:	440a      	add	r2, r1
 8008c4a:	9203      	str	r2, [sp, #12]
 8008c4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c4e:	9a05      	ldr	r2, [sp, #20]
 8008c50:	440a      	add	r2, r1
 8008c52:	9205      	str	r2, [sp, #20]
 8008c54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c56:	9a04      	ldr	r2, [sp, #16]
 8008c58:	440a      	add	r2, r1
 8008c5a:	9204      	str	r2, [sp, #16]
 8008c5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008c5e:	9a06      	ldr	r2, [sp, #24]
 8008c60:	440a      	add	r2, r1
 8008c62:	9206      	str	r2, [sp, #24]
 8008c64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c68:	440a      	add	r2, r1
 8008c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c6c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c6e:	9a08      	ldr	r2, [sp, #32]
 8008c70:	440a      	add	r2, r1
 8008c72:	9208      	str	r2, [sp, #32]
 8008c74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c76:	9a07      	ldr	r2, [sp, #28]
 8008c78:	440a      	add	r2, r1
 8008c7a:	9207      	str	r2, [sp, #28]
 8008c7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c80:	f108 0801 	add.w	r8, r8, #1
 8008c84:	3208      	adds	r2, #8
 8008c86:	4588      	cmp	r8, r1
 8008c88:	920a      	str	r2, [sp, #40]	; 0x28
 8008c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c8c:	f47f ae75 	bne.w	800897a <arm_radix8_butterfly_f32+0x296>
 8008c90:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	46c3      	mov	fp, r8
 8008c98:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8008c9c:	e532      	b.n	8008704 <arm_radix8_butterfly_f32+0x20>
 8008c9e:	b01d      	add	sp, #116	; 0x74
 8008ca0:	ecbd 8b10 	vpop	{d8-d15}
 8008ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ca8 <__cvt>:
 8008ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	ec55 4b10 	vmov	r4, r5, d0
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	460e      	mov	r6, r1
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	462b      	mov	r3, r5
 8008cb8:	bfbb      	ittet	lt
 8008cba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cbe:	461d      	movlt	r5, r3
 8008cc0:	2300      	movge	r3, #0
 8008cc2:	232d      	movlt	r3, #45	; 0x2d
 8008cc4:	700b      	strb	r3, [r1, #0]
 8008cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ccc:	4691      	mov	r9, r2
 8008cce:	f023 0820 	bic.w	r8, r3, #32
 8008cd2:	bfbc      	itt	lt
 8008cd4:	4622      	movlt	r2, r4
 8008cd6:	4614      	movlt	r4, r2
 8008cd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cdc:	d005      	beq.n	8008cea <__cvt+0x42>
 8008cde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ce2:	d100      	bne.n	8008ce6 <__cvt+0x3e>
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	2102      	movs	r1, #2
 8008ce8:	e000      	b.n	8008cec <__cvt+0x44>
 8008cea:	2103      	movs	r1, #3
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	ab02      	add	r3, sp, #8
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	ec45 4b10 	vmov	d0, r4, r5
 8008cf8:	4653      	mov	r3, sl
 8008cfa:	4632      	mov	r2, r6
 8008cfc:	f000 ff4c 	bl	8009b98 <_dtoa_r>
 8008d00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d04:	4607      	mov	r7, r0
 8008d06:	d102      	bne.n	8008d0e <__cvt+0x66>
 8008d08:	f019 0f01 	tst.w	r9, #1
 8008d0c:	d022      	beq.n	8008d54 <__cvt+0xac>
 8008d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d12:	eb07 0906 	add.w	r9, r7, r6
 8008d16:	d110      	bne.n	8008d3a <__cvt+0x92>
 8008d18:	783b      	ldrb	r3, [r7, #0]
 8008d1a:	2b30      	cmp	r3, #48	; 0x30
 8008d1c:	d10a      	bne.n	8008d34 <__cvt+0x8c>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2300      	movs	r3, #0
 8008d22:	4620      	mov	r0, r4
 8008d24:	4629      	mov	r1, r5
 8008d26:	f7f7 ff4f 	bl	8000bc8 <__aeabi_dcmpeq>
 8008d2a:	b918      	cbnz	r0, 8008d34 <__cvt+0x8c>
 8008d2c:	f1c6 0601 	rsb	r6, r6, #1
 8008d30:	f8ca 6000 	str.w	r6, [sl]
 8008d34:	f8da 3000 	ldr.w	r3, [sl]
 8008d38:	4499      	add	r9, r3
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 ff41 	bl	8000bc8 <__aeabi_dcmpeq>
 8008d46:	b108      	cbz	r0, 8008d4c <__cvt+0xa4>
 8008d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d4c:	2230      	movs	r2, #48	; 0x30
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	454b      	cmp	r3, r9
 8008d52:	d307      	bcc.n	8008d64 <__cvt+0xbc>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d58:	1bdb      	subs	r3, r3, r7
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	b004      	add	sp, #16
 8008d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d64:	1c59      	adds	r1, r3, #1
 8008d66:	9103      	str	r1, [sp, #12]
 8008d68:	701a      	strb	r2, [r3, #0]
 8008d6a:	e7f0      	b.n	8008d4e <__cvt+0xa6>

08008d6c <__exponent>:
 8008d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2900      	cmp	r1, #0
 8008d72:	bfb8      	it	lt
 8008d74:	4249      	neglt	r1, r1
 8008d76:	f803 2b02 	strb.w	r2, [r3], #2
 8008d7a:	bfb4      	ite	lt
 8008d7c:	222d      	movlt	r2, #45	; 0x2d
 8008d7e:	222b      	movge	r2, #43	; 0x2b
 8008d80:	2909      	cmp	r1, #9
 8008d82:	7042      	strb	r2, [r0, #1]
 8008d84:	dd2a      	ble.n	8008ddc <__exponent+0x70>
 8008d86:	f10d 0207 	add.w	r2, sp, #7
 8008d8a:	4617      	mov	r7, r2
 8008d8c:	260a      	movs	r6, #10
 8008d8e:	4694      	mov	ip, r2
 8008d90:	fb91 f5f6 	sdiv	r5, r1, r6
 8008d94:	fb06 1415 	mls	r4, r6, r5, r1
 8008d98:	3430      	adds	r4, #48	; 0x30
 8008d9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008d9e:	460c      	mov	r4, r1
 8008da0:	2c63      	cmp	r4, #99	; 0x63
 8008da2:	f102 32ff 	add.w	r2, r2, #4294967295
 8008da6:	4629      	mov	r1, r5
 8008da8:	dcf1      	bgt.n	8008d8e <__exponent+0x22>
 8008daa:	3130      	adds	r1, #48	; 0x30
 8008dac:	f1ac 0402 	sub.w	r4, ip, #2
 8008db0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008db4:	1c41      	adds	r1, r0, #1
 8008db6:	4622      	mov	r2, r4
 8008db8:	42ba      	cmp	r2, r7
 8008dba:	d30a      	bcc.n	8008dd2 <__exponent+0x66>
 8008dbc:	f10d 0209 	add.w	r2, sp, #9
 8008dc0:	eba2 020c 	sub.w	r2, r2, ip
 8008dc4:	42bc      	cmp	r4, r7
 8008dc6:	bf88      	it	hi
 8008dc8:	2200      	movhi	r2, #0
 8008dca:	4413      	add	r3, r2
 8008dcc:	1a18      	subs	r0, r3, r0
 8008dce:	b003      	add	sp, #12
 8008dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008dd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008dda:	e7ed      	b.n	8008db8 <__exponent+0x4c>
 8008ddc:	2330      	movs	r3, #48	; 0x30
 8008dde:	3130      	adds	r1, #48	; 0x30
 8008de0:	7083      	strb	r3, [r0, #2]
 8008de2:	70c1      	strb	r1, [r0, #3]
 8008de4:	1d03      	adds	r3, r0, #4
 8008de6:	e7f1      	b.n	8008dcc <__exponent+0x60>

08008de8 <_printf_float>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	ed2d 8b02 	vpush	{d8}
 8008df0:	b08d      	sub	sp, #52	; 0x34
 8008df2:	460c      	mov	r4, r1
 8008df4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008df8:	4616      	mov	r6, r2
 8008dfa:	461f      	mov	r7, r3
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	f000 fdc9 	bl	8009994 <_localeconv_r>
 8008e02:	f8d0 a000 	ldr.w	sl, [r0]
 8008e06:	4650      	mov	r0, sl
 8008e08:	f7f7 fab2 	bl	8000370 <strlen>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	f8d8 3000 	ldr.w	r3, [r8]
 8008e18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e1c:	3307      	adds	r3, #7
 8008e1e:	f023 0307 	bic.w	r3, r3, #7
 8008e22:	f103 0208 	add.w	r2, r3, #8
 8008e26:	f8c8 2000 	str.w	r2, [r8]
 8008e2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e38:	ee08 0a10 	vmov	s16, r0
 8008e3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e44:	4b9e      	ldr	r3, [pc, #632]	; (80090c0 <_printf_float+0x2d8>)
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4a:	f7f7 feef 	bl	8000c2c <__aeabi_dcmpun>
 8008e4e:	bb88      	cbnz	r0, 8008eb4 <_printf_float+0xcc>
 8008e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e54:	4b9a      	ldr	r3, [pc, #616]	; (80090c0 <_printf_float+0x2d8>)
 8008e56:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5a:	f7f7 fec9 	bl	8000bf0 <__aeabi_dcmple>
 8008e5e:	bb48      	cbnz	r0, 8008eb4 <_printf_float+0xcc>
 8008e60:	2200      	movs	r2, #0
 8008e62:	2300      	movs	r3, #0
 8008e64:	4640      	mov	r0, r8
 8008e66:	4649      	mov	r1, r9
 8008e68:	f7f7 feb8 	bl	8000bdc <__aeabi_dcmplt>
 8008e6c:	b110      	cbz	r0, 8008e74 <_printf_float+0x8c>
 8008e6e:	232d      	movs	r3, #45	; 0x2d
 8008e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e74:	4a93      	ldr	r2, [pc, #588]	; (80090c4 <_printf_float+0x2dc>)
 8008e76:	4b94      	ldr	r3, [pc, #592]	; (80090c8 <_printf_float+0x2e0>)
 8008e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e7c:	bf94      	ite	ls
 8008e7e:	4690      	movls	r8, r2
 8008e80:	4698      	movhi	r8, r3
 8008e82:	2303      	movs	r3, #3
 8008e84:	6123      	str	r3, [r4, #16]
 8008e86:	9b05      	ldr	r3, [sp, #20]
 8008e88:	f023 0304 	bic.w	r3, r3, #4
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	f04f 0900 	mov.w	r9, #0
 8008e92:	9700      	str	r7, [sp, #0]
 8008e94:	4633      	mov	r3, r6
 8008e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f000 f9da 	bl	8009254 <_printf_common>
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f040 8090 	bne.w	8008fc6 <_printf_float+0x1de>
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eaa:	b00d      	add	sp, #52	; 0x34
 8008eac:	ecbd 8b02 	vpop	{d8}
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	4649      	mov	r1, r9
 8008ebc:	f7f7 feb6 	bl	8000c2c <__aeabi_dcmpun>
 8008ec0:	b140      	cbz	r0, 8008ed4 <_printf_float+0xec>
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bfbc      	itt	lt
 8008ec8:	232d      	movlt	r3, #45	; 0x2d
 8008eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ece:	4a7f      	ldr	r2, [pc, #508]	; (80090cc <_printf_float+0x2e4>)
 8008ed0:	4b7f      	ldr	r3, [pc, #508]	; (80090d0 <_printf_float+0x2e8>)
 8008ed2:	e7d1      	b.n	8008e78 <_printf_float+0x90>
 8008ed4:	6863      	ldr	r3, [r4, #4]
 8008ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008eda:	9206      	str	r2, [sp, #24]
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	d13f      	bne.n	8008f60 <_printf_float+0x178>
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	6063      	str	r3, [r4, #4]
 8008ee4:	9b05      	ldr	r3, [sp, #20]
 8008ee6:	6861      	ldr	r1, [r4, #4]
 8008ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008eec:	2300      	movs	r3, #0
 8008eee:	9303      	str	r3, [sp, #12]
 8008ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8008ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ef6:	ab09      	add	r3, sp, #36	; 0x24
 8008ef8:	ec49 8b10 	vmov	d0, r8, r9
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f04:	4628      	mov	r0, r5
 8008f06:	f7ff fecf 	bl	8008ca8 <__cvt>
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f0e:	2b47      	cmp	r3, #71	; 0x47
 8008f10:	4680      	mov	r8, r0
 8008f12:	d108      	bne.n	8008f26 <_printf_float+0x13e>
 8008f14:	1cc8      	adds	r0, r1, #3
 8008f16:	db02      	blt.n	8008f1e <_printf_float+0x136>
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	4299      	cmp	r1, r3
 8008f1c:	dd41      	ble.n	8008fa2 <_printf_float+0x1ba>
 8008f1e:	f1ab 0302 	sub.w	r3, fp, #2
 8008f22:	fa5f fb83 	uxtb.w	fp, r3
 8008f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f2a:	d820      	bhi.n	8008f6e <_printf_float+0x186>
 8008f2c:	3901      	subs	r1, #1
 8008f2e:	465a      	mov	r2, fp
 8008f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f34:	9109      	str	r1, [sp, #36]	; 0x24
 8008f36:	f7ff ff19 	bl	8008d6c <__exponent>
 8008f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f3c:	1813      	adds	r3, r2, r0
 8008f3e:	2a01      	cmp	r2, #1
 8008f40:	4681      	mov	r9, r0
 8008f42:	6123      	str	r3, [r4, #16]
 8008f44:	dc02      	bgt.n	8008f4c <_printf_float+0x164>
 8008f46:	6822      	ldr	r2, [r4, #0]
 8008f48:	07d2      	lsls	r2, r2, #31
 8008f4a:	d501      	bpl.n	8008f50 <_printf_float+0x168>
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d09c      	beq.n	8008e92 <_printf_float+0xaa>
 8008f58:	232d      	movs	r3, #45	; 0x2d
 8008f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5e:	e798      	b.n	8008e92 <_printf_float+0xaa>
 8008f60:	9a06      	ldr	r2, [sp, #24]
 8008f62:	2a47      	cmp	r2, #71	; 0x47
 8008f64:	d1be      	bne.n	8008ee4 <_printf_float+0xfc>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1bc      	bne.n	8008ee4 <_printf_float+0xfc>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7b9      	b.n	8008ee2 <_printf_float+0xfa>
 8008f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f72:	d118      	bne.n	8008fa6 <_printf_float+0x1be>
 8008f74:	2900      	cmp	r1, #0
 8008f76:	6863      	ldr	r3, [r4, #4]
 8008f78:	dd0b      	ble.n	8008f92 <_printf_float+0x1aa>
 8008f7a:	6121      	str	r1, [r4, #16]
 8008f7c:	b913      	cbnz	r3, 8008f84 <_printf_float+0x19c>
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	07d0      	lsls	r0, r2, #31
 8008f82:	d502      	bpl.n	8008f8a <_printf_float+0x1a2>
 8008f84:	3301      	adds	r3, #1
 8008f86:	440b      	add	r3, r1
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f8c:	f04f 0900 	mov.w	r9, #0
 8008f90:	e7de      	b.n	8008f50 <_printf_float+0x168>
 8008f92:	b913      	cbnz	r3, 8008f9a <_printf_float+0x1b2>
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	07d2      	lsls	r2, r2, #31
 8008f98:	d501      	bpl.n	8008f9e <_printf_float+0x1b6>
 8008f9a:	3302      	adds	r3, #2
 8008f9c:	e7f4      	b.n	8008f88 <_printf_float+0x1a0>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e7f2      	b.n	8008f88 <_printf_float+0x1a0>
 8008fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa8:	4299      	cmp	r1, r3
 8008faa:	db05      	blt.n	8008fb8 <_printf_float+0x1d0>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	6121      	str	r1, [r4, #16]
 8008fb0:	07d8      	lsls	r0, r3, #31
 8008fb2:	d5ea      	bpl.n	8008f8a <_printf_float+0x1a2>
 8008fb4:	1c4b      	adds	r3, r1, #1
 8008fb6:	e7e7      	b.n	8008f88 <_printf_float+0x1a0>
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	bfd4      	ite	le
 8008fbc:	f1c1 0202 	rsble	r2, r1, #2
 8008fc0:	2201      	movgt	r2, #1
 8008fc2:	4413      	add	r3, r2
 8008fc4:	e7e0      	b.n	8008f88 <_printf_float+0x1a0>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	055a      	lsls	r2, r3, #21
 8008fca:	d407      	bmi.n	8008fdc <_printf_float+0x1f4>
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	4642      	mov	r2, r8
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	47b8      	blx	r7
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	d12c      	bne.n	8009034 <_printf_float+0x24c>
 8008fda:	e764      	b.n	8008ea6 <_printf_float+0xbe>
 8008fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008fe0:	f240 80e0 	bls.w	80091a4 <_printf_float+0x3bc>
 8008fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2300      	movs	r3, #0
 8008fec:	f7f7 fdec 	bl	8000bc8 <__aeabi_dcmpeq>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d034      	beq.n	800905e <_printf_float+0x276>
 8008ff4:	4a37      	ldr	r2, [pc, #220]	; (80090d4 <_printf_float+0x2ec>)
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	47b8      	blx	r7
 8008ffe:	3001      	adds	r0, #1
 8009000:	f43f af51 	beq.w	8008ea6 <_printf_float+0xbe>
 8009004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009008:	429a      	cmp	r2, r3
 800900a:	db02      	blt.n	8009012 <_printf_float+0x22a>
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	07d8      	lsls	r0, r3, #31
 8009010:	d510      	bpl.n	8009034 <_printf_float+0x24c>
 8009012:	ee18 3a10 	vmov	r3, s16
 8009016:	4652      	mov	r2, sl
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	47b8      	blx	r7
 800901e:	3001      	adds	r0, #1
 8009020:	f43f af41 	beq.w	8008ea6 <_printf_float+0xbe>
 8009024:	f04f 0800 	mov.w	r8, #0
 8009028:	f104 091a 	add.w	r9, r4, #26
 800902c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800902e:	3b01      	subs	r3, #1
 8009030:	4543      	cmp	r3, r8
 8009032:	dc09      	bgt.n	8009048 <_printf_float+0x260>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	079b      	lsls	r3, r3, #30
 8009038:	f100 8107 	bmi.w	800924a <_printf_float+0x462>
 800903c:	68e0      	ldr	r0, [r4, #12]
 800903e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009040:	4298      	cmp	r0, r3
 8009042:	bfb8      	it	lt
 8009044:	4618      	movlt	r0, r3
 8009046:	e730      	b.n	8008eaa <_printf_float+0xc2>
 8009048:	2301      	movs	r3, #1
 800904a:	464a      	mov	r2, r9
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f af27 	beq.w	8008ea6 <_printf_float+0xbe>
 8009058:	f108 0801 	add.w	r8, r8, #1
 800905c:	e7e6      	b.n	800902c <_printf_float+0x244>
 800905e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	dc39      	bgt.n	80090d8 <_printf_float+0x2f0>
 8009064:	4a1b      	ldr	r2, [pc, #108]	; (80090d4 <_printf_float+0x2ec>)
 8009066:	2301      	movs	r3, #1
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f af19 	beq.w	8008ea6 <_printf_float+0xbe>
 8009074:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009078:	4313      	orrs	r3, r2
 800907a:	d102      	bne.n	8009082 <_printf_float+0x29a>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	07d9      	lsls	r1, r3, #31
 8009080:	d5d8      	bpl.n	8009034 <_printf_float+0x24c>
 8009082:	ee18 3a10 	vmov	r3, s16
 8009086:	4652      	mov	r2, sl
 8009088:	4631      	mov	r1, r6
 800908a:	4628      	mov	r0, r5
 800908c:	47b8      	blx	r7
 800908e:	3001      	adds	r0, #1
 8009090:	f43f af09 	beq.w	8008ea6 <_printf_float+0xbe>
 8009094:	f04f 0900 	mov.w	r9, #0
 8009098:	f104 0a1a 	add.w	sl, r4, #26
 800909c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909e:	425b      	negs	r3, r3
 80090a0:	454b      	cmp	r3, r9
 80090a2:	dc01      	bgt.n	80090a8 <_printf_float+0x2c0>
 80090a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a6:	e792      	b.n	8008fce <_printf_float+0x1e6>
 80090a8:	2301      	movs	r3, #1
 80090aa:	4652      	mov	r2, sl
 80090ac:	4631      	mov	r1, r6
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b8      	blx	r7
 80090b2:	3001      	adds	r0, #1
 80090b4:	f43f aef7 	beq.w	8008ea6 <_printf_float+0xbe>
 80090b8:	f109 0901 	add.w	r9, r9, #1
 80090bc:	e7ee      	b.n	800909c <_printf_float+0x2b4>
 80090be:	bf00      	nop
 80090c0:	7fefffff 	.word	0x7fefffff
 80090c4:	08020704 	.word	0x08020704
 80090c8:	08020708 	.word	0x08020708
 80090cc:	0802070c 	.word	0x0802070c
 80090d0:	08020710 	.word	0x08020710
 80090d4:	08020714 	.word	0x08020714
 80090d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090dc:	429a      	cmp	r2, r3
 80090de:	bfa8      	it	ge
 80090e0:	461a      	movge	r2, r3
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	4691      	mov	r9, r2
 80090e6:	dc37      	bgt.n	8009158 <_printf_float+0x370>
 80090e8:	f04f 0b00 	mov.w	fp, #0
 80090ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090f0:	f104 021a 	add.w	r2, r4, #26
 80090f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	eba3 0309 	sub.w	r3, r3, r9
 80090fc:	455b      	cmp	r3, fp
 80090fe:	dc33      	bgt.n	8009168 <_printf_float+0x380>
 8009100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009104:	429a      	cmp	r2, r3
 8009106:	db3b      	blt.n	8009180 <_printf_float+0x398>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	07da      	lsls	r2, r3, #31
 800910c:	d438      	bmi.n	8009180 <_printf_float+0x398>
 800910e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009112:	eba2 0903 	sub.w	r9, r2, r3
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	1ad2      	subs	r2, r2, r3
 800911a:	4591      	cmp	r9, r2
 800911c:	bfa8      	it	ge
 800911e:	4691      	movge	r9, r2
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	dc35      	bgt.n	8009192 <_printf_float+0x3aa>
 8009126:	f04f 0800 	mov.w	r8, #0
 800912a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800912e:	f104 0a1a 	add.w	sl, r4, #26
 8009132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	eba3 0309 	sub.w	r3, r3, r9
 800913c:	4543      	cmp	r3, r8
 800913e:	f77f af79 	ble.w	8009034 <_printf_float+0x24c>
 8009142:	2301      	movs	r3, #1
 8009144:	4652      	mov	r2, sl
 8009146:	4631      	mov	r1, r6
 8009148:	4628      	mov	r0, r5
 800914a:	47b8      	blx	r7
 800914c:	3001      	adds	r0, #1
 800914e:	f43f aeaa 	beq.w	8008ea6 <_printf_float+0xbe>
 8009152:	f108 0801 	add.w	r8, r8, #1
 8009156:	e7ec      	b.n	8009132 <_printf_float+0x34a>
 8009158:	4613      	mov	r3, r2
 800915a:	4631      	mov	r1, r6
 800915c:	4642      	mov	r2, r8
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	d1c0      	bne.n	80090e8 <_printf_float+0x300>
 8009166:	e69e      	b.n	8008ea6 <_printf_float+0xbe>
 8009168:	2301      	movs	r3, #1
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	9205      	str	r2, [sp, #20]
 8009170:	47b8      	blx	r7
 8009172:	3001      	adds	r0, #1
 8009174:	f43f ae97 	beq.w	8008ea6 <_printf_float+0xbe>
 8009178:	9a05      	ldr	r2, [sp, #20]
 800917a:	f10b 0b01 	add.w	fp, fp, #1
 800917e:	e7b9      	b.n	80090f4 <_printf_float+0x30c>
 8009180:	ee18 3a10 	vmov	r3, s16
 8009184:	4652      	mov	r2, sl
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	d1be      	bne.n	800910e <_printf_float+0x326>
 8009190:	e689      	b.n	8008ea6 <_printf_float+0xbe>
 8009192:	9a05      	ldr	r2, [sp, #20]
 8009194:	464b      	mov	r3, r9
 8009196:	4442      	add	r2, r8
 8009198:	4631      	mov	r1, r6
 800919a:	4628      	mov	r0, r5
 800919c:	47b8      	blx	r7
 800919e:	3001      	adds	r0, #1
 80091a0:	d1c1      	bne.n	8009126 <_printf_float+0x33e>
 80091a2:	e680      	b.n	8008ea6 <_printf_float+0xbe>
 80091a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091a6:	2a01      	cmp	r2, #1
 80091a8:	dc01      	bgt.n	80091ae <_printf_float+0x3c6>
 80091aa:	07db      	lsls	r3, r3, #31
 80091ac:	d53a      	bpl.n	8009224 <_printf_float+0x43c>
 80091ae:	2301      	movs	r3, #1
 80091b0:	4642      	mov	r2, r8
 80091b2:	4631      	mov	r1, r6
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b8      	blx	r7
 80091b8:	3001      	adds	r0, #1
 80091ba:	f43f ae74 	beq.w	8008ea6 <_printf_float+0xbe>
 80091be:	ee18 3a10 	vmov	r3, s16
 80091c2:	4652      	mov	r2, sl
 80091c4:	4631      	mov	r1, r6
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	f43f ae6b 	beq.w	8008ea6 <_printf_float+0xbe>
 80091d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80091dc:	f7f7 fcf4 	bl	8000bc8 <__aeabi_dcmpeq>
 80091e0:	b9d8      	cbnz	r0, 800921a <_printf_float+0x432>
 80091e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091e6:	f108 0201 	add.w	r2, r8, #1
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	d10e      	bne.n	8009212 <_printf_float+0x42a>
 80091f4:	e657      	b.n	8008ea6 <_printf_float+0xbe>
 80091f6:	2301      	movs	r3, #1
 80091f8:	4652      	mov	r2, sl
 80091fa:	4631      	mov	r1, r6
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b8      	blx	r7
 8009200:	3001      	adds	r0, #1
 8009202:	f43f ae50 	beq.w	8008ea6 <_printf_float+0xbe>
 8009206:	f108 0801 	add.w	r8, r8, #1
 800920a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800920c:	3b01      	subs	r3, #1
 800920e:	4543      	cmp	r3, r8
 8009210:	dcf1      	bgt.n	80091f6 <_printf_float+0x40e>
 8009212:	464b      	mov	r3, r9
 8009214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009218:	e6da      	b.n	8008fd0 <_printf_float+0x1e8>
 800921a:	f04f 0800 	mov.w	r8, #0
 800921e:	f104 0a1a 	add.w	sl, r4, #26
 8009222:	e7f2      	b.n	800920a <_printf_float+0x422>
 8009224:	2301      	movs	r3, #1
 8009226:	4642      	mov	r2, r8
 8009228:	e7df      	b.n	80091ea <_printf_float+0x402>
 800922a:	2301      	movs	r3, #1
 800922c:	464a      	mov	r2, r9
 800922e:	4631      	mov	r1, r6
 8009230:	4628      	mov	r0, r5
 8009232:	47b8      	blx	r7
 8009234:	3001      	adds	r0, #1
 8009236:	f43f ae36 	beq.w	8008ea6 <_printf_float+0xbe>
 800923a:	f108 0801 	add.w	r8, r8, #1
 800923e:	68e3      	ldr	r3, [r4, #12]
 8009240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009242:	1a5b      	subs	r3, r3, r1
 8009244:	4543      	cmp	r3, r8
 8009246:	dcf0      	bgt.n	800922a <_printf_float+0x442>
 8009248:	e6f8      	b.n	800903c <_printf_float+0x254>
 800924a:	f04f 0800 	mov.w	r8, #0
 800924e:	f104 0919 	add.w	r9, r4, #25
 8009252:	e7f4      	b.n	800923e <_printf_float+0x456>

08009254 <_printf_common>:
 8009254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	4616      	mov	r6, r2
 800925a:	4699      	mov	r9, r3
 800925c:	688a      	ldr	r2, [r1, #8]
 800925e:	690b      	ldr	r3, [r1, #16]
 8009260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009264:	4293      	cmp	r3, r2
 8009266:	bfb8      	it	lt
 8009268:	4613      	movlt	r3, r2
 800926a:	6033      	str	r3, [r6, #0]
 800926c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009270:	4607      	mov	r7, r0
 8009272:	460c      	mov	r4, r1
 8009274:	b10a      	cbz	r2, 800927a <_printf_common+0x26>
 8009276:	3301      	adds	r3, #1
 8009278:	6033      	str	r3, [r6, #0]
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	0699      	lsls	r1, r3, #26
 800927e:	bf42      	ittt	mi
 8009280:	6833      	ldrmi	r3, [r6, #0]
 8009282:	3302      	addmi	r3, #2
 8009284:	6033      	strmi	r3, [r6, #0]
 8009286:	6825      	ldr	r5, [r4, #0]
 8009288:	f015 0506 	ands.w	r5, r5, #6
 800928c:	d106      	bne.n	800929c <_printf_common+0x48>
 800928e:	f104 0a19 	add.w	sl, r4, #25
 8009292:	68e3      	ldr	r3, [r4, #12]
 8009294:	6832      	ldr	r2, [r6, #0]
 8009296:	1a9b      	subs	r3, r3, r2
 8009298:	42ab      	cmp	r3, r5
 800929a:	dc26      	bgt.n	80092ea <_printf_common+0x96>
 800929c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092a0:	1e13      	subs	r3, r2, #0
 80092a2:	6822      	ldr	r2, [r4, #0]
 80092a4:	bf18      	it	ne
 80092a6:	2301      	movne	r3, #1
 80092a8:	0692      	lsls	r2, r2, #26
 80092aa:	d42b      	bmi.n	8009304 <_printf_common+0xb0>
 80092ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092b0:	4649      	mov	r1, r9
 80092b2:	4638      	mov	r0, r7
 80092b4:	47c0      	blx	r8
 80092b6:	3001      	adds	r0, #1
 80092b8:	d01e      	beq.n	80092f8 <_printf_common+0xa4>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	6922      	ldr	r2, [r4, #16]
 80092be:	f003 0306 	and.w	r3, r3, #6
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	bf02      	ittt	eq
 80092c6:	68e5      	ldreq	r5, [r4, #12]
 80092c8:	6833      	ldreq	r3, [r6, #0]
 80092ca:	1aed      	subeq	r5, r5, r3
 80092cc:	68a3      	ldr	r3, [r4, #8]
 80092ce:	bf0c      	ite	eq
 80092d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092d4:	2500      	movne	r5, #0
 80092d6:	4293      	cmp	r3, r2
 80092d8:	bfc4      	itt	gt
 80092da:	1a9b      	subgt	r3, r3, r2
 80092dc:	18ed      	addgt	r5, r5, r3
 80092de:	2600      	movs	r6, #0
 80092e0:	341a      	adds	r4, #26
 80092e2:	42b5      	cmp	r5, r6
 80092e4:	d11a      	bne.n	800931c <_printf_common+0xc8>
 80092e6:	2000      	movs	r0, #0
 80092e8:	e008      	b.n	80092fc <_printf_common+0xa8>
 80092ea:	2301      	movs	r3, #1
 80092ec:	4652      	mov	r2, sl
 80092ee:	4649      	mov	r1, r9
 80092f0:	4638      	mov	r0, r7
 80092f2:	47c0      	blx	r8
 80092f4:	3001      	adds	r0, #1
 80092f6:	d103      	bne.n	8009300 <_printf_common+0xac>
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009300:	3501      	adds	r5, #1
 8009302:	e7c6      	b.n	8009292 <_printf_common+0x3e>
 8009304:	18e1      	adds	r1, r4, r3
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	2030      	movs	r0, #48	; 0x30
 800930a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800930e:	4422      	add	r2, r4
 8009310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009318:	3302      	adds	r3, #2
 800931a:	e7c7      	b.n	80092ac <_printf_common+0x58>
 800931c:	2301      	movs	r3, #1
 800931e:	4622      	mov	r2, r4
 8009320:	4649      	mov	r1, r9
 8009322:	4638      	mov	r0, r7
 8009324:	47c0      	blx	r8
 8009326:	3001      	adds	r0, #1
 8009328:	d0e6      	beq.n	80092f8 <_printf_common+0xa4>
 800932a:	3601      	adds	r6, #1
 800932c:	e7d9      	b.n	80092e2 <_printf_common+0x8e>
	...

08009330 <_printf_i>:
 8009330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009334:	7e0f      	ldrb	r7, [r1, #24]
 8009336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009338:	2f78      	cmp	r7, #120	; 0x78
 800933a:	4691      	mov	r9, r2
 800933c:	4680      	mov	r8, r0
 800933e:	460c      	mov	r4, r1
 8009340:	469a      	mov	sl, r3
 8009342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009346:	d807      	bhi.n	8009358 <_printf_i+0x28>
 8009348:	2f62      	cmp	r7, #98	; 0x62
 800934a:	d80a      	bhi.n	8009362 <_printf_i+0x32>
 800934c:	2f00      	cmp	r7, #0
 800934e:	f000 80d4 	beq.w	80094fa <_printf_i+0x1ca>
 8009352:	2f58      	cmp	r7, #88	; 0x58
 8009354:	f000 80c0 	beq.w	80094d8 <_printf_i+0x1a8>
 8009358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800935c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009360:	e03a      	b.n	80093d8 <_printf_i+0xa8>
 8009362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009366:	2b15      	cmp	r3, #21
 8009368:	d8f6      	bhi.n	8009358 <_printf_i+0x28>
 800936a:	a101      	add	r1, pc, #4	; (adr r1, 8009370 <_printf_i+0x40>)
 800936c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009370:	080093c9 	.word	0x080093c9
 8009374:	080093dd 	.word	0x080093dd
 8009378:	08009359 	.word	0x08009359
 800937c:	08009359 	.word	0x08009359
 8009380:	08009359 	.word	0x08009359
 8009384:	08009359 	.word	0x08009359
 8009388:	080093dd 	.word	0x080093dd
 800938c:	08009359 	.word	0x08009359
 8009390:	08009359 	.word	0x08009359
 8009394:	08009359 	.word	0x08009359
 8009398:	08009359 	.word	0x08009359
 800939c:	080094e1 	.word	0x080094e1
 80093a0:	08009409 	.word	0x08009409
 80093a4:	0800949b 	.word	0x0800949b
 80093a8:	08009359 	.word	0x08009359
 80093ac:	08009359 	.word	0x08009359
 80093b0:	08009503 	.word	0x08009503
 80093b4:	08009359 	.word	0x08009359
 80093b8:	08009409 	.word	0x08009409
 80093bc:	08009359 	.word	0x08009359
 80093c0:	08009359 	.word	0x08009359
 80093c4:	080094a3 	.word	0x080094a3
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	602a      	str	r2, [r5, #0]
 80093d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093d8:	2301      	movs	r3, #1
 80093da:	e09f      	b.n	800951c <_printf_i+0x1ec>
 80093dc:	6820      	ldr	r0, [r4, #0]
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	0607      	lsls	r7, r0, #24
 80093e2:	f103 0104 	add.w	r1, r3, #4
 80093e6:	6029      	str	r1, [r5, #0]
 80093e8:	d501      	bpl.n	80093ee <_printf_i+0xbe>
 80093ea:	681e      	ldr	r6, [r3, #0]
 80093ec:	e003      	b.n	80093f6 <_printf_i+0xc6>
 80093ee:	0646      	lsls	r6, r0, #25
 80093f0:	d5fb      	bpl.n	80093ea <_printf_i+0xba>
 80093f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	da03      	bge.n	8009402 <_printf_i+0xd2>
 80093fa:	232d      	movs	r3, #45	; 0x2d
 80093fc:	4276      	negs	r6, r6
 80093fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009402:	485a      	ldr	r0, [pc, #360]	; (800956c <_printf_i+0x23c>)
 8009404:	230a      	movs	r3, #10
 8009406:	e012      	b.n	800942e <_printf_i+0xfe>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	6820      	ldr	r0, [r4, #0]
 800940c:	1d19      	adds	r1, r3, #4
 800940e:	6029      	str	r1, [r5, #0]
 8009410:	0605      	lsls	r5, r0, #24
 8009412:	d501      	bpl.n	8009418 <_printf_i+0xe8>
 8009414:	681e      	ldr	r6, [r3, #0]
 8009416:	e002      	b.n	800941e <_printf_i+0xee>
 8009418:	0641      	lsls	r1, r0, #25
 800941a:	d5fb      	bpl.n	8009414 <_printf_i+0xe4>
 800941c:	881e      	ldrh	r6, [r3, #0]
 800941e:	4853      	ldr	r0, [pc, #332]	; (800956c <_printf_i+0x23c>)
 8009420:	2f6f      	cmp	r7, #111	; 0x6f
 8009422:	bf0c      	ite	eq
 8009424:	2308      	moveq	r3, #8
 8009426:	230a      	movne	r3, #10
 8009428:	2100      	movs	r1, #0
 800942a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800942e:	6865      	ldr	r5, [r4, #4]
 8009430:	60a5      	str	r5, [r4, #8]
 8009432:	2d00      	cmp	r5, #0
 8009434:	bfa2      	ittt	ge
 8009436:	6821      	ldrge	r1, [r4, #0]
 8009438:	f021 0104 	bicge.w	r1, r1, #4
 800943c:	6021      	strge	r1, [r4, #0]
 800943e:	b90e      	cbnz	r6, 8009444 <_printf_i+0x114>
 8009440:	2d00      	cmp	r5, #0
 8009442:	d04b      	beq.n	80094dc <_printf_i+0x1ac>
 8009444:	4615      	mov	r5, r2
 8009446:	fbb6 f1f3 	udiv	r1, r6, r3
 800944a:	fb03 6711 	mls	r7, r3, r1, r6
 800944e:	5dc7      	ldrb	r7, [r0, r7]
 8009450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009454:	4637      	mov	r7, r6
 8009456:	42bb      	cmp	r3, r7
 8009458:	460e      	mov	r6, r1
 800945a:	d9f4      	bls.n	8009446 <_printf_i+0x116>
 800945c:	2b08      	cmp	r3, #8
 800945e:	d10b      	bne.n	8009478 <_printf_i+0x148>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	07de      	lsls	r6, r3, #31
 8009464:	d508      	bpl.n	8009478 <_printf_i+0x148>
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	6861      	ldr	r1, [r4, #4]
 800946a:	4299      	cmp	r1, r3
 800946c:	bfde      	ittt	le
 800946e:	2330      	movle	r3, #48	; 0x30
 8009470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009478:	1b52      	subs	r2, r2, r5
 800947a:	6122      	str	r2, [r4, #16]
 800947c:	f8cd a000 	str.w	sl, [sp]
 8009480:	464b      	mov	r3, r9
 8009482:	aa03      	add	r2, sp, #12
 8009484:	4621      	mov	r1, r4
 8009486:	4640      	mov	r0, r8
 8009488:	f7ff fee4 	bl	8009254 <_printf_common>
 800948c:	3001      	adds	r0, #1
 800948e:	d14a      	bne.n	8009526 <_printf_i+0x1f6>
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	b004      	add	sp, #16
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	f043 0320 	orr.w	r3, r3, #32
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	4833      	ldr	r0, [pc, #204]	; (8009570 <_printf_i+0x240>)
 80094a4:	2778      	movs	r7, #120	; 0x78
 80094a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	6829      	ldr	r1, [r5, #0]
 80094ae:	061f      	lsls	r7, r3, #24
 80094b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80094b4:	d402      	bmi.n	80094bc <_printf_i+0x18c>
 80094b6:	065f      	lsls	r7, r3, #25
 80094b8:	bf48      	it	mi
 80094ba:	b2b6      	uxthmi	r6, r6
 80094bc:	07df      	lsls	r7, r3, #31
 80094be:	bf48      	it	mi
 80094c0:	f043 0320 	orrmi.w	r3, r3, #32
 80094c4:	6029      	str	r1, [r5, #0]
 80094c6:	bf48      	it	mi
 80094c8:	6023      	strmi	r3, [r4, #0]
 80094ca:	b91e      	cbnz	r6, 80094d4 <_printf_i+0x1a4>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	f023 0320 	bic.w	r3, r3, #32
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	2310      	movs	r3, #16
 80094d6:	e7a7      	b.n	8009428 <_printf_i+0xf8>
 80094d8:	4824      	ldr	r0, [pc, #144]	; (800956c <_printf_i+0x23c>)
 80094da:	e7e4      	b.n	80094a6 <_printf_i+0x176>
 80094dc:	4615      	mov	r5, r2
 80094de:	e7bd      	b.n	800945c <_printf_i+0x12c>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	6826      	ldr	r6, [r4, #0]
 80094e4:	6961      	ldr	r1, [r4, #20]
 80094e6:	1d18      	adds	r0, r3, #4
 80094e8:	6028      	str	r0, [r5, #0]
 80094ea:	0635      	lsls	r5, r6, #24
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	d501      	bpl.n	80094f4 <_printf_i+0x1c4>
 80094f0:	6019      	str	r1, [r3, #0]
 80094f2:	e002      	b.n	80094fa <_printf_i+0x1ca>
 80094f4:	0670      	lsls	r0, r6, #25
 80094f6:	d5fb      	bpl.n	80094f0 <_printf_i+0x1c0>
 80094f8:	8019      	strh	r1, [r3, #0]
 80094fa:	2300      	movs	r3, #0
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	4615      	mov	r5, r2
 8009500:	e7bc      	b.n	800947c <_printf_i+0x14c>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	1d1a      	adds	r2, r3, #4
 8009506:	602a      	str	r2, [r5, #0]
 8009508:	681d      	ldr	r5, [r3, #0]
 800950a:	6862      	ldr	r2, [r4, #4]
 800950c:	2100      	movs	r1, #0
 800950e:	4628      	mov	r0, r5
 8009510:	f7f6 fede 	bl	80002d0 <memchr>
 8009514:	b108      	cbz	r0, 800951a <_printf_i+0x1ea>
 8009516:	1b40      	subs	r0, r0, r5
 8009518:	6060      	str	r0, [r4, #4]
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	6123      	str	r3, [r4, #16]
 800951e:	2300      	movs	r3, #0
 8009520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009524:	e7aa      	b.n	800947c <_printf_i+0x14c>
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	462a      	mov	r2, r5
 800952a:	4649      	mov	r1, r9
 800952c:	4640      	mov	r0, r8
 800952e:	47d0      	blx	sl
 8009530:	3001      	adds	r0, #1
 8009532:	d0ad      	beq.n	8009490 <_printf_i+0x160>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	079b      	lsls	r3, r3, #30
 8009538:	d413      	bmi.n	8009562 <_printf_i+0x232>
 800953a:	68e0      	ldr	r0, [r4, #12]
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	4298      	cmp	r0, r3
 8009540:	bfb8      	it	lt
 8009542:	4618      	movlt	r0, r3
 8009544:	e7a6      	b.n	8009494 <_printf_i+0x164>
 8009546:	2301      	movs	r3, #1
 8009548:	4632      	mov	r2, r6
 800954a:	4649      	mov	r1, r9
 800954c:	4640      	mov	r0, r8
 800954e:	47d0      	blx	sl
 8009550:	3001      	adds	r0, #1
 8009552:	d09d      	beq.n	8009490 <_printf_i+0x160>
 8009554:	3501      	adds	r5, #1
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	9903      	ldr	r1, [sp, #12]
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	42ab      	cmp	r3, r5
 800955e:	dcf2      	bgt.n	8009546 <_printf_i+0x216>
 8009560:	e7eb      	b.n	800953a <_printf_i+0x20a>
 8009562:	2500      	movs	r5, #0
 8009564:	f104 0619 	add.w	r6, r4, #25
 8009568:	e7f5      	b.n	8009556 <_printf_i+0x226>
 800956a:	bf00      	nop
 800956c:	08020716 	.word	0x08020716
 8009570:	08020727 	.word	0x08020727

08009574 <std>:
 8009574:	2300      	movs	r3, #0
 8009576:	b510      	push	{r4, lr}
 8009578:	4604      	mov	r4, r0
 800957a:	e9c0 3300 	strd	r3, r3, [r0]
 800957e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009582:	6083      	str	r3, [r0, #8]
 8009584:	8181      	strh	r1, [r0, #12]
 8009586:	6643      	str	r3, [r0, #100]	; 0x64
 8009588:	81c2      	strh	r2, [r0, #14]
 800958a:	6183      	str	r3, [r0, #24]
 800958c:	4619      	mov	r1, r3
 800958e:	2208      	movs	r2, #8
 8009590:	305c      	adds	r0, #92	; 0x5c
 8009592:	f000 f9f7 	bl	8009984 <memset>
 8009596:	4b0d      	ldr	r3, [pc, #52]	; (80095cc <std+0x58>)
 8009598:	6263      	str	r3, [r4, #36]	; 0x24
 800959a:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <std+0x5c>)
 800959c:	62a3      	str	r3, [r4, #40]	; 0x28
 800959e:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <std+0x60>)
 80095a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095a2:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <std+0x64>)
 80095a4:	6323      	str	r3, [r4, #48]	; 0x30
 80095a6:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <std+0x68>)
 80095a8:	6224      	str	r4, [r4, #32]
 80095aa:	429c      	cmp	r4, r3
 80095ac:	d006      	beq.n	80095bc <std+0x48>
 80095ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80095b2:	4294      	cmp	r4, r2
 80095b4:	d002      	beq.n	80095bc <std+0x48>
 80095b6:	33d0      	adds	r3, #208	; 0xd0
 80095b8:	429c      	cmp	r4, r3
 80095ba:	d105      	bne.n	80095c8 <std+0x54>
 80095bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c4:	f000 ba5a 	b.w	8009a7c <__retarget_lock_init_recursive>
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	bf00      	nop
 80095cc:	080097d5 	.word	0x080097d5
 80095d0:	080097f7 	.word	0x080097f7
 80095d4:	0800982f 	.word	0x0800982f
 80095d8:	08009853 	.word	0x08009853
 80095dc:	20002488 	.word	0x20002488

080095e0 <stdio_exit_handler>:
 80095e0:	4a02      	ldr	r2, [pc, #8]	; (80095ec <stdio_exit_handler+0xc>)
 80095e2:	4903      	ldr	r1, [pc, #12]	; (80095f0 <stdio_exit_handler+0x10>)
 80095e4:	4803      	ldr	r0, [pc, #12]	; (80095f4 <stdio_exit_handler+0x14>)
 80095e6:	f000 b869 	b.w	80096bc <_fwalk_sglue>
 80095ea:	bf00      	nop
 80095ec:	200000e8 	.word	0x200000e8
 80095f0:	0800b409 	.word	0x0800b409
 80095f4:	200000f4 	.word	0x200000f4

080095f8 <cleanup_stdio>:
 80095f8:	6841      	ldr	r1, [r0, #4]
 80095fa:	4b0c      	ldr	r3, [pc, #48]	; (800962c <cleanup_stdio+0x34>)
 80095fc:	4299      	cmp	r1, r3
 80095fe:	b510      	push	{r4, lr}
 8009600:	4604      	mov	r4, r0
 8009602:	d001      	beq.n	8009608 <cleanup_stdio+0x10>
 8009604:	f001 ff00 	bl	800b408 <_fflush_r>
 8009608:	68a1      	ldr	r1, [r4, #8]
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <cleanup_stdio+0x38>)
 800960c:	4299      	cmp	r1, r3
 800960e:	d002      	beq.n	8009616 <cleanup_stdio+0x1e>
 8009610:	4620      	mov	r0, r4
 8009612:	f001 fef9 	bl	800b408 <_fflush_r>
 8009616:	68e1      	ldr	r1, [r4, #12]
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <cleanup_stdio+0x3c>)
 800961a:	4299      	cmp	r1, r3
 800961c:	d004      	beq.n	8009628 <cleanup_stdio+0x30>
 800961e:	4620      	mov	r0, r4
 8009620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009624:	f001 bef0 	b.w	800b408 <_fflush_r>
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	20002488 	.word	0x20002488
 8009630:	200024f0 	.word	0x200024f0
 8009634:	20002558 	.word	0x20002558

08009638 <global_stdio_init.part.0>:
 8009638:	b510      	push	{r4, lr}
 800963a:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <global_stdio_init.part.0+0x30>)
 800963c:	4c0b      	ldr	r4, [pc, #44]	; (800966c <global_stdio_init.part.0+0x34>)
 800963e:	4a0c      	ldr	r2, [pc, #48]	; (8009670 <global_stdio_init.part.0+0x38>)
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	4620      	mov	r0, r4
 8009644:	2200      	movs	r2, #0
 8009646:	2104      	movs	r1, #4
 8009648:	f7ff ff94 	bl	8009574 <std>
 800964c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009650:	2201      	movs	r2, #1
 8009652:	2109      	movs	r1, #9
 8009654:	f7ff ff8e 	bl	8009574 <std>
 8009658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800965c:	2202      	movs	r2, #2
 800965e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009662:	2112      	movs	r1, #18
 8009664:	f7ff bf86 	b.w	8009574 <std>
 8009668:	200025c0 	.word	0x200025c0
 800966c:	20002488 	.word	0x20002488
 8009670:	080095e1 	.word	0x080095e1

08009674 <__sfp_lock_acquire>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__sfp_lock_acquire+0x8>)
 8009676:	f000 ba02 	b.w	8009a7e <__retarget_lock_acquire_recursive>
 800967a:	bf00      	nop
 800967c:	200025c9 	.word	0x200025c9

08009680 <__sfp_lock_release>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__sfp_lock_release+0x8>)
 8009682:	f000 b9fd 	b.w	8009a80 <__retarget_lock_release_recursive>
 8009686:	bf00      	nop
 8009688:	200025c9 	.word	0x200025c9

0800968c <__sinit>:
 800968c:	b510      	push	{r4, lr}
 800968e:	4604      	mov	r4, r0
 8009690:	f7ff fff0 	bl	8009674 <__sfp_lock_acquire>
 8009694:	6a23      	ldr	r3, [r4, #32]
 8009696:	b11b      	cbz	r3, 80096a0 <__sinit+0x14>
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	f7ff bff0 	b.w	8009680 <__sfp_lock_release>
 80096a0:	4b04      	ldr	r3, [pc, #16]	; (80096b4 <__sinit+0x28>)
 80096a2:	6223      	str	r3, [r4, #32]
 80096a4:	4b04      	ldr	r3, [pc, #16]	; (80096b8 <__sinit+0x2c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f5      	bne.n	8009698 <__sinit+0xc>
 80096ac:	f7ff ffc4 	bl	8009638 <global_stdio_init.part.0>
 80096b0:	e7f2      	b.n	8009698 <__sinit+0xc>
 80096b2:	bf00      	nop
 80096b4:	080095f9 	.word	0x080095f9
 80096b8:	200025c0 	.word	0x200025c0

080096bc <_fwalk_sglue>:
 80096bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c0:	4607      	mov	r7, r0
 80096c2:	4688      	mov	r8, r1
 80096c4:	4614      	mov	r4, r2
 80096c6:	2600      	movs	r6, #0
 80096c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096cc:	f1b9 0901 	subs.w	r9, r9, #1
 80096d0:	d505      	bpl.n	80096de <_fwalk_sglue+0x22>
 80096d2:	6824      	ldr	r4, [r4, #0]
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	d1f7      	bne.n	80096c8 <_fwalk_sglue+0xc>
 80096d8:	4630      	mov	r0, r6
 80096da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d907      	bls.n	80096f4 <_fwalk_sglue+0x38>
 80096e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096e8:	3301      	adds	r3, #1
 80096ea:	d003      	beq.n	80096f4 <_fwalk_sglue+0x38>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4638      	mov	r0, r7
 80096f0:	47c0      	blx	r8
 80096f2:	4306      	orrs	r6, r0
 80096f4:	3568      	adds	r5, #104	; 0x68
 80096f6:	e7e9      	b.n	80096cc <_fwalk_sglue+0x10>

080096f8 <iprintf>:
 80096f8:	b40f      	push	{r0, r1, r2, r3}
 80096fa:	b507      	push	{r0, r1, r2, lr}
 80096fc:	4906      	ldr	r1, [pc, #24]	; (8009718 <iprintf+0x20>)
 80096fe:	ab04      	add	r3, sp, #16
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	f853 2b04 	ldr.w	r2, [r3], #4
 8009706:	6881      	ldr	r1, [r0, #8]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	f001 fcdd 	bl	800b0c8 <_vfiprintf_r>
 800970e:	b003      	add	sp, #12
 8009710:	f85d eb04 	ldr.w	lr, [sp], #4
 8009714:	b004      	add	sp, #16
 8009716:	4770      	bx	lr
 8009718:	20000140 	.word	0x20000140

0800971c <_puts_r>:
 800971c:	6a03      	ldr	r3, [r0, #32]
 800971e:	b570      	push	{r4, r5, r6, lr}
 8009720:	6884      	ldr	r4, [r0, #8]
 8009722:	4605      	mov	r5, r0
 8009724:	460e      	mov	r6, r1
 8009726:	b90b      	cbnz	r3, 800972c <_puts_r+0x10>
 8009728:	f7ff ffb0 	bl	800968c <__sinit>
 800972c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800972e:	07db      	lsls	r3, r3, #31
 8009730:	d405      	bmi.n	800973e <_puts_r+0x22>
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	0598      	lsls	r0, r3, #22
 8009736:	d402      	bmi.n	800973e <_puts_r+0x22>
 8009738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800973a:	f000 f9a0 	bl	8009a7e <__retarget_lock_acquire_recursive>
 800973e:	89a3      	ldrh	r3, [r4, #12]
 8009740:	0719      	lsls	r1, r3, #28
 8009742:	d513      	bpl.n	800976c <_puts_r+0x50>
 8009744:	6923      	ldr	r3, [r4, #16]
 8009746:	b18b      	cbz	r3, 800976c <_puts_r+0x50>
 8009748:	3e01      	subs	r6, #1
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009750:	3b01      	subs	r3, #1
 8009752:	60a3      	str	r3, [r4, #8]
 8009754:	b9e9      	cbnz	r1, 8009792 <_puts_r+0x76>
 8009756:	2b00      	cmp	r3, #0
 8009758:	da2e      	bge.n	80097b8 <_puts_r+0x9c>
 800975a:	4622      	mov	r2, r4
 800975c:	210a      	movs	r1, #10
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f87b 	bl	800985a <__swbuf_r>
 8009764:	3001      	adds	r0, #1
 8009766:	d007      	beq.n	8009778 <_puts_r+0x5c>
 8009768:	250a      	movs	r5, #10
 800976a:	e007      	b.n	800977c <_puts_r+0x60>
 800976c:	4621      	mov	r1, r4
 800976e:	4628      	mov	r0, r5
 8009770:	f000 f8b0 	bl	80098d4 <__swsetup_r>
 8009774:	2800      	cmp	r0, #0
 8009776:	d0e7      	beq.n	8009748 <_puts_r+0x2c>
 8009778:	f04f 35ff 	mov.w	r5, #4294967295
 800977c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800977e:	07da      	lsls	r2, r3, #31
 8009780:	d405      	bmi.n	800978e <_puts_r+0x72>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	059b      	lsls	r3, r3, #22
 8009786:	d402      	bmi.n	800978e <_puts_r+0x72>
 8009788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800978a:	f000 f979 	bl	8009a80 <__retarget_lock_release_recursive>
 800978e:	4628      	mov	r0, r5
 8009790:	bd70      	pop	{r4, r5, r6, pc}
 8009792:	2b00      	cmp	r3, #0
 8009794:	da04      	bge.n	80097a0 <_puts_r+0x84>
 8009796:	69a2      	ldr	r2, [r4, #24]
 8009798:	429a      	cmp	r2, r3
 800979a:	dc06      	bgt.n	80097aa <_puts_r+0x8e>
 800979c:	290a      	cmp	r1, #10
 800979e:	d004      	beq.n	80097aa <_puts_r+0x8e>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	6022      	str	r2, [r4, #0]
 80097a6:	7019      	strb	r1, [r3, #0]
 80097a8:	e7cf      	b.n	800974a <_puts_r+0x2e>
 80097aa:	4622      	mov	r2, r4
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f854 	bl	800985a <__swbuf_r>
 80097b2:	3001      	adds	r0, #1
 80097b4:	d1c9      	bne.n	800974a <_puts_r+0x2e>
 80097b6:	e7df      	b.n	8009778 <_puts_r+0x5c>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	250a      	movs	r5, #10
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	6022      	str	r2, [r4, #0]
 80097c0:	701d      	strb	r5, [r3, #0]
 80097c2:	e7db      	b.n	800977c <_puts_r+0x60>

080097c4 <puts>:
 80097c4:	4b02      	ldr	r3, [pc, #8]	; (80097d0 <puts+0xc>)
 80097c6:	4601      	mov	r1, r0
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	f7ff bfa7 	b.w	800971c <_puts_r>
 80097ce:	bf00      	nop
 80097d0:	20000140 	.word	0x20000140

080097d4 <__sread>:
 80097d4:	b510      	push	{r4, lr}
 80097d6:	460c      	mov	r4, r1
 80097d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097dc:	f000 f900 	bl	80099e0 <_read_r>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	bfab      	itete	ge
 80097e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097e6:	89a3      	ldrhlt	r3, [r4, #12]
 80097e8:	181b      	addge	r3, r3, r0
 80097ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097ee:	bfac      	ite	ge
 80097f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80097f2:	81a3      	strhlt	r3, [r4, #12]
 80097f4:	bd10      	pop	{r4, pc}

080097f6 <__swrite>:
 80097f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097fa:	461f      	mov	r7, r3
 80097fc:	898b      	ldrh	r3, [r1, #12]
 80097fe:	05db      	lsls	r3, r3, #23
 8009800:	4605      	mov	r5, r0
 8009802:	460c      	mov	r4, r1
 8009804:	4616      	mov	r6, r2
 8009806:	d505      	bpl.n	8009814 <__swrite+0x1e>
 8009808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980c:	2302      	movs	r3, #2
 800980e:	2200      	movs	r2, #0
 8009810:	f000 f8d4 	bl	80099bc <_lseek_r>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800981a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	4632      	mov	r2, r6
 8009822:	463b      	mov	r3, r7
 8009824:	4628      	mov	r0, r5
 8009826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800982a:	f000 b8eb 	b.w	8009a04 <_write_r>

0800982e <__sseek>:
 800982e:	b510      	push	{r4, lr}
 8009830:	460c      	mov	r4, r1
 8009832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009836:	f000 f8c1 	bl	80099bc <_lseek_r>
 800983a:	1c43      	adds	r3, r0, #1
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	bf15      	itete	ne
 8009840:	6560      	strne	r0, [r4, #84]	; 0x54
 8009842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800984a:	81a3      	strheq	r3, [r4, #12]
 800984c:	bf18      	it	ne
 800984e:	81a3      	strhne	r3, [r4, #12]
 8009850:	bd10      	pop	{r4, pc}

08009852 <__sclose>:
 8009852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009856:	f000 b8a1 	b.w	800999c <_close_r>

0800985a <__swbuf_r>:
 800985a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985c:	460e      	mov	r6, r1
 800985e:	4614      	mov	r4, r2
 8009860:	4605      	mov	r5, r0
 8009862:	b118      	cbz	r0, 800986c <__swbuf_r+0x12>
 8009864:	6a03      	ldr	r3, [r0, #32]
 8009866:	b90b      	cbnz	r3, 800986c <__swbuf_r+0x12>
 8009868:	f7ff ff10 	bl	800968c <__sinit>
 800986c:	69a3      	ldr	r3, [r4, #24]
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	071a      	lsls	r2, r3, #28
 8009874:	d525      	bpl.n	80098c2 <__swbuf_r+0x68>
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	b31b      	cbz	r3, 80098c2 <__swbuf_r+0x68>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	6922      	ldr	r2, [r4, #16]
 800987e:	1a98      	subs	r0, r3, r2
 8009880:	6963      	ldr	r3, [r4, #20]
 8009882:	b2f6      	uxtb	r6, r6
 8009884:	4283      	cmp	r3, r0
 8009886:	4637      	mov	r7, r6
 8009888:	dc04      	bgt.n	8009894 <__swbuf_r+0x3a>
 800988a:	4621      	mov	r1, r4
 800988c:	4628      	mov	r0, r5
 800988e:	f001 fdbb 	bl	800b408 <_fflush_r>
 8009892:	b9e0      	cbnz	r0, 80098ce <__swbuf_r+0x74>
 8009894:	68a3      	ldr	r3, [r4, #8]
 8009896:	3b01      	subs	r3, #1
 8009898:	60a3      	str	r3, [r4, #8]
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	6022      	str	r2, [r4, #0]
 80098a0:	701e      	strb	r6, [r3, #0]
 80098a2:	6962      	ldr	r2, [r4, #20]
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d004      	beq.n	80098b4 <__swbuf_r+0x5a>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	07db      	lsls	r3, r3, #31
 80098ae:	d506      	bpl.n	80098be <__swbuf_r+0x64>
 80098b0:	2e0a      	cmp	r6, #10
 80098b2:	d104      	bne.n	80098be <__swbuf_r+0x64>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f001 fda6 	bl	800b408 <_fflush_r>
 80098bc:	b938      	cbnz	r0, 80098ce <__swbuf_r+0x74>
 80098be:	4638      	mov	r0, r7
 80098c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c2:	4621      	mov	r1, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 f805 	bl	80098d4 <__swsetup_r>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d0d5      	beq.n	800987a <__swbuf_r+0x20>
 80098ce:	f04f 37ff 	mov.w	r7, #4294967295
 80098d2:	e7f4      	b.n	80098be <__swbuf_r+0x64>

080098d4 <__swsetup_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4b2a      	ldr	r3, [pc, #168]	; (8009980 <__swsetup_r+0xac>)
 80098d8:	4605      	mov	r5, r0
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	460c      	mov	r4, r1
 80098de:	b118      	cbz	r0, 80098e8 <__swsetup_r+0x14>
 80098e0:	6a03      	ldr	r3, [r0, #32]
 80098e2:	b90b      	cbnz	r3, 80098e8 <__swsetup_r+0x14>
 80098e4:	f7ff fed2 	bl	800968c <__sinit>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098ee:	0718      	lsls	r0, r3, #28
 80098f0:	d422      	bmi.n	8009938 <__swsetup_r+0x64>
 80098f2:	06d9      	lsls	r1, r3, #27
 80098f4:	d407      	bmi.n	8009906 <__swsetup_r+0x32>
 80098f6:	2309      	movs	r3, #9
 80098f8:	602b      	str	r3, [r5, #0]
 80098fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	e034      	b.n	8009970 <__swsetup_r+0x9c>
 8009906:	0758      	lsls	r0, r3, #29
 8009908:	d512      	bpl.n	8009930 <__swsetup_r+0x5c>
 800990a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800990c:	b141      	cbz	r1, 8009920 <__swsetup_r+0x4c>
 800990e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009912:	4299      	cmp	r1, r3
 8009914:	d002      	beq.n	800991c <__swsetup_r+0x48>
 8009916:	4628      	mov	r0, r5
 8009918:	f000 ff30 	bl	800a77c <_free_r>
 800991c:	2300      	movs	r3, #0
 800991e:	6363      	str	r3, [r4, #52]	; 0x34
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009926:	81a3      	strh	r3, [r4, #12]
 8009928:	2300      	movs	r3, #0
 800992a:	6063      	str	r3, [r4, #4]
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f043 0308 	orr.w	r3, r3, #8
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	6923      	ldr	r3, [r4, #16]
 800993a:	b94b      	cbnz	r3, 8009950 <__swsetup_r+0x7c>
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009946:	d003      	beq.n	8009950 <__swsetup_r+0x7c>
 8009948:	4621      	mov	r1, r4
 800994a:	4628      	mov	r0, r5
 800994c:	f001 fdaa 	bl	800b4a4 <__smakebuf_r>
 8009950:	89a0      	ldrh	r0, [r4, #12]
 8009952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009956:	f010 0301 	ands.w	r3, r0, #1
 800995a:	d00a      	beq.n	8009972 <__swsetup_r+0x9e>
 800995c:	2300      	movs	r3, #0
 800995e:	60a3      	str	r3, [r4, #8]
 8009960:	6963      	ldr	r3, [r4, #20]
 8009962:	425b      	negs	r3, r3
 8009964:	61a3      	str	r3, [r4, #24]
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	b943      	cbnz	r3, 800997c <__swsetup_r+0xa8>
 800996a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800996e:	d1c4      	bne.n	80098fa <__swsetup_r+0x26>
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	0781      	lsls	r1, r0, #30
 8009974:	bf58      	it	pl
 8009976:	6963      	ldrpl	r3, [r4, #20]
 8009978:	60a3      	str	r3, [r4, #8]
 800997a:	e7f4      	b.n	8009966 <__swsetup_r+0x92>
 800997c:	2000      	movs	r0, #0
 800997e:	e7f7      	b.n	8009970 <__swsetup_r+0x9c>
 8009980:	20000140 	.word	0x20000140

08009984 <memset>:
 8009984:	4402      	add	r2, r0
 8009986:	4603      	mov	r3, r0
 8009988:	4293      	cmp	r3, r2
 800998a:	d100      	bne.n	800998e <memset+0xa>
 800998c:	4770      	bx	lr
 800998e:	f803 1b01 	strb.w	r1, [r3], #1
 8009992:	e7f9      	b.n	8009988 <memset+0x4>

08009994 <_localeconv_r>:
 8009994:	4800      	ldr	r0, [pc, #0]	; (8009998 <_localeconv_r+0x4>)
 8009996:	4770      	bx	lr
 8009998:	20000234 	.word	0x20000234

0800999c <_close_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d06      	ldr	r5, [pc, #24]	; (80099b8 <_close_r+0x1c>)
 80099a0:	2300      	movs	r3, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	f7f9 f979 	bl	8002c9e <_close>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_close_r+0x1a>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_close_r+0x1a>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	200025c4 	.word	0x200025c4

080099bc <_lseek_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	; (80099dc <_lseek_r+0x20>)
 80099c0:	4604      	mov	r4, r0
 80099c2:	4608      	mov	r0, r1
 80099c4:	4611      	mov	r1, r2
 80099c6:	2200      	movs	r2, #0
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f7f9 f98e 	bl	8002cec <_lseek>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_lseek_r+0x1e>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_lseek_r+0x1e>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	200025c4 	.word	0x200025c4

080099e0 <_read_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	; (8009a00 <_read_r+0x20>)
 80099e4:	4604      	mov	r4, r0
 80099e6:	4608      	mov	r0, r1
 80099e8:	4611      	mov	r1, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7f9 f91c 	bl	8002c2c <_read>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_read_r+0x1e>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_read_r+0x1e>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	200025c4 	.word	0x200025c4

08009a04 <_write_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d07      	ldr	r5, [pc, #28]	; (8009a24 <_write_r+0x20>)
 8009a08:	4604      	mov	r4, r0
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	602a      	str	r2, [r5, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f7f9 f927 	bl	8002c66 <_write>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_write_r+0x1e>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_write_r+0x1e>
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	200025c4 	.word	0x200025c4

08009a28 <__errno>:
 8009a28:	4b01      	ldr	r3, [pc, #4]	; (8009a30 <__errno+0x8>)
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	20000140 	.word	0x20000140

08009a34 <__libc_init_array>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	4d0d      	ldr	r5, [pc, #52]	; (8009a6c <__libc_init_array+0x38>)
 8009a38:	4c0d      	ldr	r4, [pc, #52]	; (8009a70 <__libc_init_array+0x3c>)
 8009a3a:	1b64      	subs	r4, r4, r5
 8009a3c:	10a4      	asrs	r4, r4, #2
 8009a3e:	2600      	movs	r6, #0
 8009a40:	42a6      	cmp	r6, r4
 8009a42:	d109      	bne.n	8009a58 <__libc_init_array+0x24>
 8009a44:	4d0b      	ldr	r5, [pc, #44]	; (8009a74 <__libc_init_array+0x40>)
 8009a46:	4c0c      	ldr	r4, [pc, #48]	; (8009a78 <__libc_init_array+0x44>)
 8009a48:	f003 fbf0 	bl	800d22c <_init>
 8009a4c:	1b64      	subs	r4, r4, r5
 8009a4e:	10a4      	asrs	r4, r4, #2
 8009a50:	2600      	movs	r6, #0
 8009a52:	42a6      	cmp	r6, r4
 8009a54:	d105      	bne.n	8009a62 <__libc_init_array+0x2e>
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5c:	4798      	blx	r3
 8009a5e:	3601      	adds	r6, #1
 8009a60:	e7ee      	b.n	8009a40 <__libc_init_array+0xc>
 8009a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a66:	4798      	blx	r3
 8009a68:	3601      	adds	r6, #1
 8009a6a:	e7f2      	b.n	8009a52 <__libc_init_array+0x1e>
 8009a6c:	08021028 	.word	0x08021028
 8009a70:	08021028 	.word	0x08021028
 8009a74:	08021028 	.word	0x08021028
 8009a78:	0802102c 	.word	0x0802102c

08009a7c <__retarget_lock_init_recursive>:
 8009a7c:	4770      	bx	lr

08009a7e <__retarget_lock_acquire_recursive>:
 8009a7e:	4770      	bx	lr

08009a80 <__retarget_lock_release_recursive>:
 8009a80:	4770      	bx	lr

08009a82 <quorem>:
 8009a82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a86:	6903      	ldr	r3, [r0, #16]
 8009a88:	690c      	ldr	r4, [r1, #16]
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	db7e      	blt.n	8009b8e <quorem+0x10c>
 8009a90:	3c01      	subs	r4, #1
 8009a92:	f101 0814 	add.w	r8, r1, #20
 8009a96:	f100 0514 	add.w	r5, r0, #20
 8009a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ab4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ab8:	d331      	bcc.n	8009b1e <quorem+0x9c>
 8009aba:	f04f 0e00 	mov.w	lr, #0
 8009abe:	4640      	mov	r0, r8
 8009ac0:	46ac      	mov	ip, r5
 8009ac2:	46f2      	mov	sl, lr
 8009ac4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ac8:	b293      	uxth	r3, r2
 8009aca:	fb06 e303 	mla	r3, r6, r3, lr
 8009ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ad2:	0c1a      	lsrs	r2, r3, #16
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	ebaa 0303 	sub.w	r3, sl, r3
 8009ada:	f8dc a000 	ldr.w	sl, [ip]
 8009ade:	fa13 f38a 	uxtah	r3, r3, sl
 8009ae2:	fb06 220e 	mla	r2, r6, lr, r2
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	9b00      	ldr	r3, [sp, #0]
 8009aea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009aee:	b292      	uxth	r2, r2
 8009af0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009af8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009afc:	4581      	cmp	r9, r0
 8009afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b02:	f84c 3b04 	str.w	r3, [ip], #4
 8009b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b0a:	d2db      	bcs.n	8009ac4 <quorem+0x42>
 8009b0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b10:	b92b      	cbnz	r3, 8009b1e <quorem+0x9c>
 8009b12:	9b01      	ldr	r3, [sp, #4]
 8009b14:	3b04      	subs	r3, #4
 8009b16:	429d      	cmp	r5, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	d32c      	bcc.n	8009b76 <quorem+0xf4>
 8009b1c:	613c      	str	r4, [r7, #16]
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f001 f9a8 	bl	800ae74 <__mcmp>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	db22      	blt.n	8009b6e <quorem+0xec>
 8009b28:	3601      	adds	r6, #1
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b32:	f8d1 c000 	ldr.w	ip, [r1]
 8009b36:	b293      	uxth	r3, r2
 8009b38:	1ac3      	subs	r3, r0, r3
 8009b3a:	0c12      	lsrs	r2, r2, #16
 8009b3c:	fa13 f38c 	uxtah	r3, r3, ip
 8009b40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009b44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b4e:	45c1      	cmp	r9, r8
 8009b50:	f841 3b04 	str.w	r3, [r1], #4
 8009b54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b58:	d2e9      	bcs.n	8009b2e <quorem+0xac>
 8009b5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b62:	b922      	cbnz	r2, 8009b6e <quorem+0xec>
 8009b64:	3b04      	subs	r3, #4
 8009b66:	429d      	cmp	r5, r3
 8009b68:	461a      	mov	r2, r3
 8009b6a:	d30a      	bcc.n	8009b82 <quorem+0x100>
 8009b6c:	613c      	str	r4, [r7, #16]
 8009b6e:	4630      	mov	r0, r6
 8009b70:	b003      	add	sp, #12
 8009b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	3b04      	subs	r3, #4
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	d1ce      	bne.n	8009b1c <quorem+0x9a>
 8009b7e:	3c01      	subs	r4, #1
 8009b80:	e7c9      	b.n	8009b16 <quorem+0x94>
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	3b04      	subs	r3, #4
 8009b86:	2a00      	cmp	r2, #0
 8009b88:	d1f0      	bne.n	8009b6c <quorem+0xea>
 8009b8a:	3c01      	subs	r4, #1
 8009b8c:	e7eb      	b.n	8009b66 <quorem+0xe4>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e7ee      	b.n	8009b70 <quorem+0xee>
 8009b92:	0000      	movs	r0, r0
 8009b94:	0000      	movs	r0, r0
	...

08009b98 <_dtoa_r>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	ed2d 8b04 	vpush	{d8-d9}
 8009ba0:	69c5      	ldr	r5, [r0, #28]
 8009ba2:	b093      	sub	sp, #76	; 0x4c
 8009ba4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ba8:	ec57 6b10 	vmov	r6, r7, d0
 8009bac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009bb0:	9107      	str	r1, [sp, #28]
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8009bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8009bb8:	b975      	cbnz	r5, 8009bd8 <_dtoa_r+0x40>
 8009bba:	2010      	movs	r0, #16
 8009bbc:	f000 fe2a 	bl	800a814 <malloc>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	61e0      	str	r0, [r4, #28]
 8009bc4:	b920      	cbnz	r0, 8009bd0 <_dtoa_r+0x38>
 8009bc6:	4bae      	ldr	r3, [pc, #696]	; (8009e80 <_dtoa_r+0x2e8>)
 8009bc8:	21ef      	movs	r1, #239	; 0xef
 8009bca:	48ae      	ldr	r0, [pc, #696]	; (8009e84 <_dtoa_r+0x2ec>)
 8009bcc:	f001 fce6 	bl	800b59c <__assert_func>
 8009bd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bd4:	6005      	str	r5, [r0, #0]
 8009bd6:	60c5      	str	r5, [r0, #12]
 8009bd8:	69e3      	ldr	r3, [r4, #28]
 8009bda:	6819      	ldr	r1, [r3, #0]
 8009bdc:	b151      	cbz	r1, 8009bf4 <_dtoa_r+0x5c>
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	604a      	str	r2, [r1, #4]
 8009be2:	2301      	movs	r3, #1
 8009be4:	4093      	lsls	r3, r2
 8009be6:	608b      	str	r3, [r1, #8]
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 ff07 	bl	800a9fc <_Bfree>
 8009bee:	69e3      	ldr	r3, [r4, #28]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	1e3b      	subs	r3, r7, #0
 8009bf6:	bfbb      	ittet	lt
 8009bf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bfc:	9303      	strlt	r3, [sp, #12]
 8009bfe:	2300      	movge	r3, #0
 8009c00:	2201      	movlt	r2, #1
 8009c02:	bfac      	ite	ge
 8009c04:	f8c8 3000 	strge.w	r3, [r8]
 8009c08:	f8c8 2000 	strlt.w	r2, [r8]
 8009c0c:	4b9e      	ldr	r3, [pc, #632]	; (8009e88 <_dtoa_r+0x2f0>)
 8009c0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c12:	ea33 0308 	bics.w	r3, r3, r8
 8009c16:	d11b      	bne.n	8009c50 <_dtoa_r+0xb8>
 8009c18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009c24:	4333      	orrs	r3, r6
 8009c26:	f000 8593 	beq.w	800a750 <_dtoa_r+0xbb8>
 8009c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c2c:	b963      	cbnz	r3, 8009c48 <_dtoa_r+0xb0>
 8009c2e:	4b97      	ldr	r3, [pc, #604]	; (8009e8c <_dtoa_r+0x2f4>)
 8009c30:	e027      	b.n	8009c82 <_dtoa_r+0xea>
 8009c32:	4b97      	ldr	r3, [pc, #604]	; (8009e90 <_dtoa_r+0x2f8>)
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	9800      	ldr	r0, [sp, #0]
 8009c3e:	b013      	add	sp, #76	; 0x4c
 8009c40:	ecbd 8b04 	vpop	{d8-d9}
 8009c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c48:	4b90      	ldr	r3, [pc, #576]	; (8009e8c <_dtoa_r+0x2f4>)
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	3303      	adds	r3, #3
 8009c4e:	e7f3      	b.n	8009c38 <_dtoa_r+0xa0>
 8009c50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c54:	2200      	movs	r2, #0
 8009c56:	ec51 0b17 	vmov	r0, r1, d7
 8009c5a:	eeb0 8a47 	vmov.f32	s16, s14
 8009c5e:	eef0 8a67 	vmov.f32	s17, s15
 8009c62:	2300      	movs	r3, #0
 8009c64:	f7f6 ffb0 	bl	8000bc8 <__aeabi_dcmpeq>
 8009c68:	4681      	mov	r9, r0
 8009c6a:	b160      	cbz	r0, 8009c86 <_dtoa_r+0xee>
 8009c6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c6e:	2301      	movs	r3, #1
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 8568 	beq.w	800a74a <_dtoa_r+0xbb2>
 8009c7a:	4b86      	ldr	r3, [pc, #536]	; (8009e94 <_dtoa_r+0x2fc>)
 8009c7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	3b01      	subs	r3, #1
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	e7da      	b.n	8009c3c <_dtoa_r+0xa4>
 8009c86:	aa10      	add	r2, sp, #64	; 0x40
 8009c88:	a911      	add	r1, sp, #68	; 0x44
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8009c90:	eef0 0a68 	vmov.f32	s1, s17
 8009c94:	f001 f994 	bl	800afc0 <__d2b>
 8009c98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	d07f      	beq.n	8009da2 <_dtoa_r+0x20a>
 8009ca2:	ee18 3a90 	vmov	r3, s17
 8009ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009caa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009cae:	ec51 0b18 	vmov	r0, r1, d8
 8009cb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009cba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4b75      	ldr	r3, [pc, #468]	; (8009e98 <_dtoa_r+0x300>)
 8009cc4:	f7f6 fb60 	bl	8000388 <__aeabi_dsub>
 8009cc8:	a367      	add	r3, pc, #412	; (adr r3, 8009e68 <_dtoa_r+0x2d0>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f7f6 fd13 	bl	80006f8 <__aeabi_dmul>
 8009cd2:	a367      	add	r3, pc, #412	; (adr r3, 8009e70 <_dtoa_r+0x2d8>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 fb58 	bl	800038c <__adddf3>
 8009cdc:	4606      	mov	r6, r0
 8009cde:	4628      	mov	r0, r5
 8009ce0:	460f      	mov	r7, r1
 8009ce2:	f7f6 fc9f 	bl	8000624 <__aeabi_i2d>
 8009ce6:	a364      	add	r3, pc, #400	; (adr r3, 8009e78 <_dtoa_r+0x2e0>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fd04 	bl	80006f8 <__aeabi_dmul>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fb48 	bl	800038c <__adddf3>
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460f      	mov	r7, r1
 8009d00:	f7f6 ffaa 	bl	8000c58 <__aeabi_d2iz>
 8009d04:	2200      	movs	r2, #0
 8009d06:	4683      	mov	fp, r0
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	f7f6 ff65 	bl	8000bdc <__aeabi_dcmplt>
 8009d12:	b148      	cbz	r0, 8009d28 <_dtoa_r+0x190>
 8009d14:	4658      	mov	r0, fp
 8009d16:	f7f6 fc85 	bl	8000624 <__aeabi_i2d>
 8009d1a:	4632      	mov	r2, r6
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	f7f6 ff53 	bl	8000bc8 <__aeabi_dcmpeq>
 8009d22:	b908      	cbnz	r0, 8009d28 <_dtoa_r+0x190>
 8009d24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d28:	f1bb 0f16 	cmp.w	fp, #22
 8009d2c:	d857      	bhi.n	8009dde <_dtoa_r+0x246>
 8009d2e:	4b5b      	ldr	r3, [pc, #364]	; (8009e9c <_dtoa_r+0x304>)
 8009d30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	ec51 0b18 	vmov	r0, r1, d8
 8009d3c:	f7f6 ff4e 	bl	8000bdc <__aeabi_dcmplt>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d04e      	beq.n	8009de2 <_dtoa_r+0x24a>
 8009d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d48:	2300      	movs	r3, #0
 8009d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d4e:	1b5b      	subs	r3, r3, r5
 8009d50:	1e5a      	subs	r2, r3, #1
 8009d52:	bf45      	ittet	mi
 8009d54:	f1c3 0301 	rsbmi	r3, r3, #1
 8009d58:	9305      	strmi	r3, [sp, #20]
 8009d5a:	2300      	movpl	r3, #0
 8009d5c:	2300      	movmi	r3, #0
 8009d5e:	9206      	str	r2, [sp, #24]
 8009d60:	bf54      	ite	pl
 8009d62:	9305      	strpl	r3, [sp, #20]
 8009d64:	9306      	strmi	r3, [sp, #24]
 8009d66:	f1bb 0f00 	cmp.w	fp, #0
 8009d6a:	db3c      	blt.n	8009de6 <_dtoa_r+0x24e>
 8009d6c:	9b06      	ldr	r3, [sp, #24]
 8009d6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009d72:	445b      	add	r3, fp
 8009d74:	9306      	str	r3, [sp, #24]
 8009d76:	2300      	movs	r3, #0
 8009d78:	9308      	str	r3, [sp, #32]
 8009d7a:	9b07      	ldr	r3, [sp, #28]
 8009d7c:	2b09      	cmp	r3, #9
 8009d7e:	d868      	bhi.n	8009e52 <_dtoa_r+0x2ba>
 8009d80:	2b05      	cmp	r3, #5
 8009d82:	bfc4      	itt	gt
 8009d84:	3b04      	subgt	r3, #4
 8009d86:	9307      	strgt	r3, [sp, #28]
 8009d88:	9b07      	ldr	r3, [sp, #28]
 8009d8a:	f1a3 0302 	sub.w	r3, r3, #2
 8009d8e:	bfcc      	ite	gt
 8009d90:	2500      	movgt	r5, #0
 8009d92:	2501      	movle	r5, #1
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	f200 8085 	bhi.w	8009ea4 <_dtoa_r+0x30c>
 8009d9a:	e8df f003 	tbb	[pc, r3]
 8009d9e:	3b2e      	.short	0x3b2e
 8009da0:	5839      	.short	0x5839
 8009da2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009da6:	441d      	add	r5, r3
 8009da8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009dac:	2b20      	cmp	r3, #32
 8009dae:	bfc1      	itttt	gt
 8009db0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009db4:	fa08 f803 	lslgt.w	r8, r8, r3
 8009db8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009dbc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009dc0:	bfd6      	itet	le
 8009dc2:	f1c3 0320 	rsble	r3, r3, #32
 8009dc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8009dca:	fa06 f003 	lslle.w	r0, r6, r3
 8009dce:	f7f6 fc19 	bl	8000604 <__aeabi_ui2d>
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009dd8:	3d01      	subs	r5, #1
 8009dda:	920e      	str	r2, [sp, #56]	; 0x38
 8009ddc:	e76f      	b.n	8009cbe <_dtoa_r+0x126>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e7b3      	b.n	8009d4a <_dtoa_r+0x1b2>
 8009de2:	900c      	str	r0, [sp, #48]	; 0x30
 8009de4:	e7b2      	b.n	8009d4c <_dtoa_r+0x1b4>
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	eba3 030b 	sub.w	r3, r3, fp
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	f1cb 0300 	rsb	r3, fp, #0
 8009df2:	9308      	str	r3, [sp, #32]
 8009df4:	2300      	movs	r3, #0
 8009df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009df8:	e7bf      	b.n	8009d7a <_dtoa_r+0x1e2>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	dc52      	bgt.n	8009eaa <_dtoa_r+0x312>
 8009e04:	2301      	movs	r3, #1
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8009e0e:	e00b      	b.n	8009e28 <_dtoa_r+0x290>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e7f3      	b.n	8009dfc <_dtoa_r+0x264>
 8009e14:	2300      	movs	r3, #0
 8009e16:	9309      	str	r3, [sp, #36]	; 0x24
 8009e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e1a:	445b      	add	r3, fp
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	bfb8      	it	lt
 8009e26:	2301      	movlt	r3, #1
 8009e28:	69e0      	ldr	r0, [r4, #28]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	2204      	movs	r2, #4
 8009e2e:	f102 0614 	add.w	r6, r2, #20
 8009e32:	429e      	cmp	r6, r3
 8009e34:	d93d      	bls.n	8009eb2 <_dtoa_r+0x31a>
 8009e36:	6041      	str	r1, [r0, #4]
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fd9f 	bl	800a97c <_Balloc>
 8009e3e:	9000      	str	r0, [sp, #0]
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d139      	bne.n	8009eb8 <_dtoa_r+0x320>
 8009e44:	4b16      	ldr	r3, [pc, #88]	; (8009ea0 <_dtoa_r+0x308>)
 8009e46:	4602      	mov	r2, r0
 8009e48:	f240 11af 	movw	r1, #431	; 0x1af
 8009e4c:	e6bd      	b.n	8009bca <_dtoa_r+0x32>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e7e1      	b.n	8009e16 <_dtoa_r+0x27e>
 8009e52:	2501      	movs	r5, #1
 8009e54:	2300      	movs	r3, #0
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	9509      	str	r5, [sp, #36]	; 0x24
 8009e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	2200      	movs	r2, #0
 8009e64:	2312      	movs	r3, #18
 8009e66:	e7d1      	b.n	8009e0c <_dtoa_r+0x274>
 8009e68:	636f4361 	.word	0x636f4361
 8009e6c:	3fd287a7 	.word	0x3fd287a7
 8009e70:	8b60c8b3 	.word	0x8b60c8b3
 8009e74:	3fc68a28 	.word	0x3fc68a28
 8009e78:	509f79fb 	.word	0x509f79fb
 8009e7c:	3fd34413 	.word	0x3fd34413
 8009e80:	08020745 	.word	0x08020745
 8009e84:	0802075c 	.word	0x0802075c
 8009e88:	7ff00000 	.word	0x7ff00000
 8009e8c:	08020741 	.word	0x08020741
 8009e90:	08020738 	.word	0x08020738
 8009e94:	08020715 	.word	0x08020715
 8009e98:	3ff80000 	.word	0x3ff80000
 8009e9c:	08020848 	.word	0x08020848
 8009ea0:	080207b4 	.word	0x080207b4
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea8:	e7d7      	b.n	8009e5a <_dtoa_r+0x2c2>
 8009eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	9304      	str	r3, [sp, #16]
 8009eb0:	e7ba      	b.n	8009e28 <_dtoa_r+0x290>
 8009eb2:	3101      	adds	r1, #1
 8009eb4:	0052      	lsls	r2, r2, #1
 8009eb6:	e7ba      	b.n	8009e2e <_dtoa_r+0x296>
 8009eb8:	69e3      	ldr	r3, [r4, #28]
 8009eba:	9a00      	ldr	r2, [sp, #0]
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	2b0e      	cmp	r3, #14
 8009ec2:	f200 80a8 	bhi.w	800a016 <_dtoa_r+0x47e>
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	f000 80a5 	beq.w	800a016 <_dtoa_r+0x47e>
 8009ecc:	f1bb 0f00 	cmp.w	fp, #0
 8009ed0:	dd38      	ble.n	8009f44 <_dtoa_r+0x3ac>
 8009ed2:	4bc0      	ldr	r3, [pc, #768]	; (800a1d4 <_dtoa_r+0x63c>)
 8009ed4:	f00b 020f 	and.w	r2, fp, #15
 8009ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009edc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009ee0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009ee4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009ee8:	d019      	beq.n	8009f1e <_dtoa_r+0x386>
 8009eea:	4bbb      	ldr	r3, [pc, #748]	; (800a1d8 <_dtoa_r+0x640>)
 8009eec:	ec51 0b18 	vmov	r0, r1, d8
 8009ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ef4:	f7f6 fd2a 	bl	800094c <__aeabi_ddiv>
 8009ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009efc:	f008 080f 	and.w	r8, r8, #15
 8009f00:	2503      	movs	r5, #3
 8009f02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a1d8 <_dtoa_r+0x640>
 8009f06:	f1b8 0f00 	cmp.w	r8, #0
 8009f0a:	d10a      	bne.n	8009f22 <_dtoa_r+0x38a>
 8009f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f10:	4632      	mov	r2, r6
 8009f12:	463b      	mov	r3, r7
 8009f14:	f7f6 fd1a 	bl	800094c <__aeabi_ddiv>
 8009f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f1c:	e02b      	b.n	8009f76 <_dtoa_r+0x3de>
 8009f1e:	2502      	movs	r5, #2
 8009f20:	e7ef      	b.n	8009f02 <_dtoa_r+0x36a>
 8009f22:	f018 0f01 	tst.w	r8, #1
 8009f26:	d008      	beq.n	8009f3a <_dtoa_r+0x3a2>
 8009f28:	4630      	mov	r0, r6
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f30:	f7f6 fbe2 	bl	80006f8 <__aeabi_dmul>
 8009f34:	3501      	adds	r5, #1
 8009f36:	4606      	mov	r6, r0
 8009f38:	460f      	mov	r7, r1
 8009f3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f3e:	f109 0908 	add.w	r9, r9, #8
 8009f42:	e7e0      	b.n	8009f06 <_dtoa_r+0x36e>
 8009f44:	f000 809f 	beq.w	800a086 <_dtoa_r+0x4ee>
 8009f48:	f1cb 0600 	rsb	r6, fp, #0
 8009f4c:	4ba1      	ldr	r3, [pc, #644]	; (800a1d4 <_dtoa_r+0x63c>)
 8009f4e:	4fa2      	ldr	r7, [pc, #648]	; (800a1d8 <_dtoa_r+0x640>)
 8009f50:	f006 020f 	and.w	r2, r6, #15
 8009f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	ec51 0b18 	vmov	r0, r1, d8
 8009f60:	f7f6 fbca 	bl	80006f8 <__aeabi_dmul>
 8009f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f68:	1136      	asrs	r6, r6, #4
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2502      	movs	r5, #2
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	d17e      	bne.n	800a070 <_dtoa_r+0x4d8>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1d0      	bne.n	8009f18 <_dtoa_r+0x380>
 8009f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 8084 	beq.w	800a08a <_dtoa_r+0x4f2>
 8009f82:	4b96      	ldr	r3, [pc, #600]	; (800a1dc <_dtoa_r+0x644>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f7f6 fe27 	bl	8000bdc <__aeabi_dcmplt>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d07b      	beq.n	800a08a <_dtoa_r+0x4f2>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d078      	beq.n	800a08a <_dtoa_r+0x4f2>
 8009f98:	9b01      	ldr	r3, [sp, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	dd39      	ble.n	800a012 <_dtoa_r+0x47a>
 8009f9e:	4b90      	ldr	r3, [pc, #576]	; (800a1e0 <_dtoa_r+0x648>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	f7f6 fba7 	bl	80006f8 <__aeabi_dmul>
 8009faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fae:	9e01      	ldr	r6, [sp, #4]
 8009fb0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009fb4:	3501      	adds	r5, #1
 8009fb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f7f6 fb32 	bl	8000624 <__aeabi_i2d>
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	f7f6 fb98 	bl	80006f8 <__aeabi_dmul>
 8009fc8:	4b86      	ldr	r3, [pc, #536]	; (800a1e4 <_dtoa_r+0x64c>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f7f6 f9de 	bl	800038c <__adddf3>
 8009fd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd8:	9303      	str	r3, [sp, #12]
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d158      	bne.n	800a090 <_dtoa_r+0x4f8>
 8009fde:	4b82      	ldr	r3, [pc, #520]	; (800a1e8 <_dtoa_r+0x650>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	f7f6 f9cf 	bl	8000388 <__aeabi_dsub>
 8009fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fee:	4680      	mov	r8, r0
 8009ff0:	4689      	mov	r9, r1
 8009ff2:	f7f6 fe11 	bl	8000c18 <__aeabi_dcmpgt>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	f040 8296 	bne.w	800a528 <_dtoa_r+0x990>
 8009ffc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a000:	4640      	mov	r0, r8
 800a002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a006:	4649      	mov	r1, r9
 800a008:	f7f6 fde8 	bl	8000bdc <__aeabi_dcmplt>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	f040 8289 	bne.w	800a524 <_dtoa_r+0x98c>
 800a012:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f2c0 814e 	blt.w	800a2ba <_dtoa_r+0x722>
 800a01e:	f1bb 0f0e 	cmp.w	fp, #14
 800a022:	f300 814a 	bgt.w	800a2ba <_dtoa_r+0x722>
 800a026:	4b6b      	ldr	r3, [pc, #428]	; (800a1d4 <_dtoa_r+0x63c>)
 800a028:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a02c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a032:	2b00      	cmp	r3, #0
 800a034:	f280 80dc 	bge.w	800a1f0 <_dtoa_r+0x658>
 800a038:	9b04      	ldr	r3, [sp, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f300 80d8 	bgt.w	800a1f0 <_dtoa_r+0x658>
 800a040:	f040 826f 	bne.w	800a522 <_dtoa_r+0x98a>
 800a044:	4b68      	ldr	r3, [pc, #416]	; (800a1e8 <_dtoa_r+0x650>)
 800a046:	2200      	movs	r2, #0
 800a048:	4640      	mov	r0, r8
 800a04a:	4649      	mov	r1, r9
 800a04c:	f7f6 fb54 	bl	80006f8 <__aeabi_dmul>
 800a050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a054:	f7f6 fdd6 	bl	8000c04 <__aeabi_dcmpge>
 800a058:	9e04      	ldr	r6, [sp, #16]
 800a05a:	4637      	mov	r7, r6
 800a05c:	2800      	cmp	r0, #0
 800a05e:	f040 8245 	bne.w	800a4ec <_dtoa_r+0x954>
 800a062:	9d00      	ldr	r5, [sp, #0]
 800a064:	2331      	movs	r3, #49	; 0x31
 800a066:	f805 3b01 	strb.w	r3, [r5], #1
 800a06a:	f10b 0b01 	add.w	fp, fp, #1
 800a06e:	e241      	b.n	800a4f4 <_dtoa_r+0x95c>
 800a070:	07f2      	lsls	r2, r6, #31
 800a072:	d505      	bpl.n	800a080 <_dtoa_r+0x4e8>
 800a074:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a078:	f7f6 fb3e 	bl	80006f8 <__aeabi_dmul>
 800a07c:	3501      	adds	r5, #1
 800a07e:	2301      	movs	r3, #1
 800a080:	1076      	asrs	r6, r6, #1
 800a082:	3708      	adds	r7, #8
 800a084:	e773      	b.n	8009f6e <_dtoa_r+0x3d6>
 800a086:	2502      	movs	r5, #2
 800a088:	e775      	b.n	8009f76 <_dtoa_r+0x3de>
 800a08a:	9e04      	ldr	r6, [sp, #16]
 800a08c:	465f      	mov	r7, fp
 800a08e:	e792      	b.n	8009fb6 <_dtoa_r+0x41e>
 800a090:	9900      	ldr	r1, [sp, #0]
 800a092:	4b50      	ldr	r3, [pc, #320]	; (800a1d4 <_dtoa_r+0x63c>)
 800a094:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a098:	4431      	add	r1, r6
 800a09a:	9102      	str	r1, [sp, #8]
 800a09c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a09e:	eeb0 9a47 	vmov.f32	s18, s14
 800a0a2:	eef0 9a67 	vmov.f32	s19, s15
 800a0a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0ae:	2900      	cmp	r1, #0
 800a0b0:	d044      	beq.n	800a13c <_dtoa_r+0x5a4>
 800a0b2:	494e      	ldr	r1, [pc, #312]	; (800a1ec <_dtoa_r+0x654>)
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	f7f6 fc49 	bl	800094c <__aeabi_ddiv>
 800a0ba:	ec53 2b19 	vmov	r2, r3, d9
 800a0be:	f7f6 f963 	bl	8000388 <__aeabi_dsub>
 800a0c2:	9d00      	ldr	r5, [sp, #0]
 800a0c4:	ec41 0b19 	vmov	d9, r0, r1
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f7f6 fdc4 	bl	8000c58 <__aeabi_d2iz>
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	f7f6 faa7 	bl	8000624 <__aeabi_i2d>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4640      	mov	r0, r8
 800a0dc:	4649      	mov	r1, r9
 800a0de:	f7f6 f953 	bl	8000388 <__aeabi_dsub>
 800a0e2:	3630      	adds	r6, #48	; 0x30
 800a0e4:	f805 6b01 	strb.w	r6, [r5], #1
 800a0e8:	ec53 2b19 	vmov	r2, r3, d9
 800a0ec:	4680      	mov	r8, r0
 800a0ee:	4689      	mov	r9, r1
 800a0f0:	f7f6 fd74 	bl	8000bdc <__aeabi_dcmplt>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d164      	bne.n	800a1c2 <_dtoa_r+0x62a>
 800a0f8:	4642      	mov	r2, r8
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	4937      	ldr	r1, [pc, #220]	; (800a1dc <_dtoa_r+0x644>)
 800a0fe:	2000      	movs	r0, #0
 800a100:	f7f6 f942 	bl	8000388 <__aeabi_dsub>
 800a104:	ec53 2b19 	vmov	r2, r3, d9
 800a108:	f7f6 fd68 	bl	8000bdc <__aeabi_dcmplt>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f040 80b6 	bne.w	800a27e <_dtoa_r+0x6e6>
 800a112:	9b02      	ldr	r3, [sp, #8]
 800a114:	429d      	cmp	r5, r3
 800a116:	f43f af7c 	beq.w	800a012 <_dtoa_r+0x47a>
 800a11a:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <_dtoa_r+0x648>)
 800a11c:	ec51 0b19 	vmov	r0, r1, d9
 800a120:	2200      	movs	r2, #0
 800a122:	f7f6 fae9 	bl	80006f8 <__aeabi_dmul>
 800a126:	4b2e      	ldr	r3, [pc, #184]	; (800a1e0 <_dtoa_r+0x648>)
 800a128:	ec41 0b19 	vmov	d9, r0, r1
 800a12c:	2200      	movs	r2, #0
 800a12e:	4640      	mov	r0, r8
 800a130:	4649      	mov	r1, r9
 800a132:	f7f6 fae1 	bl	80006f8 <__aeabi_dmul>
 800a136:	4680      	mov	r8, r0
 800a138:	4689      	mov	r9, r1
 800a13a:	e7c5      	b.n	800a0c8 <_dtoa_r+0x530>
 800a13c:	ec51 0b17 	vmov	r0, r1, d7
 800a140:	f7f6 fada 	bl	80006f8 <__aeabi_dmul>
 800a144:	9b02      	ldr	r3, [sp, #8]
 800a146:	9d00      	ldr	r5, [sp, #0]
 800a148:	930f      	str	r3, [sp, #60]	; 0x3c
 800a14a:	ec41 0b19 	vmov	d9, r0, r1
 800a14e:	4649      	mov	r1, r9
 800a150:	4640      	mov	r0, r8
 800a152:	f7f6 fd81 	bl	8000c58 <__aeabi_d2iz>
 800a156:	4606      	mov	r6, r0
 800a158:	f7f6 fa64 	bl	8000624 <__aeabi_i2d>
 800a15c:	3630      	adds	r6, #48	; 0x30
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4640      	mov	r0, r8
 800a164:	4649      	mov	r1, r9
 800a166:	f7f6 f90f 	bl	8000388 <__aeabi_dsub>
 800a16a:	f805 6b01 	strb.w	r6, [r5], #1
 800a16e:	9b02      	ldr	r3, [sp, #8]
 800a170:	429d      	cmp	r5, r3
 800a172:	4680      	mov	r8, r0
 800a174:	4689      	mov	r9, r1
 800a176:	f04f 0200 	mov.w	r2, #0
 800a17a:	d124      	bne.n	800a1c6 <_dtoa_r+0x62e>
 800a17c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ec <_dtoa_r+0x654>)
 800a17e:	ec51 0b19 	vmov	r0, r1, d9
 800a182:	f7f6 f903 	bl	800038c <__adddf3>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4640      	mov	r0, r8
 800a18c:	4649      	mov	r1, r9
 800a18e:	f7f6 fd43 	bl	8000c18 <__aeabi_dcmpgt>
 800a192:	2800      	cmp	r0, #0
 800a194:	d173      	bne.n	800a27e <_dtoa_r+0x6e6>
 800a196:	ec53 2b19 	vmov	r2, r3, d9
 800a19a:	4914      	ldr	r1, [pc, #80]	; (800a1ec <_dtoa_r+0x654>)
 800a19c:	2000      	movs	r0, #0
 800a19e:	f7f6 f8f3 	bl	8000388 <__aeabi_dsub>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	f7f6 fd17 	bl	8000bdc <__aeabi_dcmplt>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f43f af2f 	beq.w	800a012 <_dtoa_r+0x47a>
 800a1b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1b6:	1e6b      	subs	r3, r5, #1
 800a1b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1be:	2b30      	cmp	r3, #48	; 0x30
 800a1c0:	d0f8      	beq.n	800a1b4 <_dtoa_r+0x61c>
 800a1c2:	46bb      	mov	fp, r7
 800a1c4:	e04a      	b.n	800a25c <_dtoa_r+0x6c4>
 800a1c6:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <_dtoa_r+0x648>)
 800a1c8:	f7f6 fa96 	bl	80006f8 <__aeabi_dmul>
 800a1cc:	4680      	mov	r8, r0
 800a1ce:	4689      	mov	r9, r1
 800a1d0:	e7bd      	b.n	800a14e <_dtoa_r+0x5b6>
 800a1d2:	bf00      	nop
 800a1d4:	08020848 	.word	0x08020848
 800a1d8:	08020820 	.word	0x08020820
 800a1dc:	3ff00000 	.word	0x3ff00000
 800a1e0:	40240000 	.word	0x40240000
 800a1e4:	401c0000 	.word	0x401c0000
 800a1e8:	40140000 	.word	0x40140000
 800a1ec:	3fe00000 	.word	0x3fe00000
 800a1f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1f4:	9d00      	ldr	r5, [sp, #0]
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	464b      	mov	r3, r9
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	f7f6 fba5 	bl	800094c <__aeabi_ddiv>
 800a202:	f7f6 fd29 	bl	8000c58 <__aeabi_d2iz>
 800a206:	9001      	str	r0, [sp, #4]
 800a208:	f7f6 fa0c 	bl	8000624 <__aeabi_i2d>
 800a20c:	4642      	mov	r2, r8
 800a20e:	464b      	mov	r3, r9
 800a210:	f7f6 fa72 	bl	80006f8 <__aeabi_dmul>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4630      	mov	r0, r6
 800a21a:	4639      	mov	r1, r7
 800a21c:	f7f6 f8b4 	bl	8000388 <__aeabi_dsub>
 800a220:	9e01      	ldr	r6, [sp, #4]
 800a222:	9f04      	ldr	r7, [sp, #16]
 800a224:	3630      	adds	r6, #48	; 0x30
 800a226:	f805 6b01 	strb.w	r6, [r5], #1
 800a22a:	9e00      	ldr	r6, [sp, #0]
 800a22c:	1bae      	subs	r6, r5, r6
 800a22e:	42b7      	cmp	r7, r6
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	d134      	bne.n	800a2a0 <_dtoa_r+0x708>
 800a236:	f7f6 f8a9 	bl	800038c <__adddf3>
 800a23a:	4642      	mov	r2, r8
 800a23c:	464b      	mov	r3, r9
 800a23e:	4606      	mov	r6, r0
 800a240:	460f      	mov	r7, r1
 800a242:	f7f6 fce9 	bl	8000c18 <__aeabi_dcmpgt>
 800a246:	b9c8      	cbnz	r0, 800a27c <_dtoa_r+0x6e4>
 800a248:	4642      	mov	r2, r8
 800a24a:	464b      	mov	r3, r9
 800a24c:	4630      	mov	r0, r6
 800a24e:	4639      	mov	r1, r7
 800a250:	f7f6 fcba 	bl	8000bc8 <__aeabi_dcmpeq>
 800a254:	b110      	cbz	r0, 800a25c <_dtoa_r+0x6c4>
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	07db      	lsls	r3, r3, #31
 800a25a:	d40f      	bmi.n	800a27c <_dtoa_r+0x6e4>
 800a25c:	4651      	mov	r1, sl
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 fbcc 	bl	800a9fc <_Bfree>
 800a264:	2300      	movs	r3, #0
 800a266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a268:	702b      	strb	r3, [r5, #0]
 800a26a:	f10b 0301 	add.w	r3, fp, #1
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a272:	2b00      	cmp	r3, #0
 800a274:	f43f ace2 	beq.w	8009c3c <_dtoa_r+0xa4>
 800a278:	601d      	str	r5, [r3, #0]
 800a27a:	e4df      	b.n	8009c3c <_dtoa_r+0xa4>
 800a27c:	465f      	mov	r7, fp
 800a27e:	462b      	mov	r3, r5
 800a280:	461d      	mov	r5, r3
 800a282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a286:	2a39      	cmp	r2, #57	; 0x39
 800a288:	d106      	bne.n	800a298 <_dtoa_r+0x700>
 800a28a:	9a00      	ldr	r2, [sp, #0]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d1f7      	bne.n	800a280 <_dtoa_r+0x6e8>
 800a290:	9900      	ldr	r1, [sp, #0]
 800a292:	2230      	movs	r2, #48	; 0x30
 800a294:	3701      	adds	r7, #1
 800a296:	700a      	strb	r2, [r1, #0]
 800a298:	781a      	ldrb	r2, [r3, #0]
 800a29a:	3201      	adds	r2, #1
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	e790      	b.n	800a1c2 <_dtoa_r+0x62a>
 800a2a0:	4ba3      	ldr	r3, [pc, #652]	; (800a530 <_dtoa_r+0x998>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f7f6 fa28 	bl	80006f8 <__aeabi_dmul>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460f      	mov	r7, r1
 800a2b0:	f7f6 fc8a 	bl	8000bc8 <__aeabi_dcmpeq>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d09e      	beq.n	800a1f6 <_dtoa_r+0x65e>
 800a2b8:	e7d0      	b.n	800a25c <_dtoa_r+0x6c4>
 800a2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	f000 80ca 	beq.w	800a456 <_dtoa_r+0x8be>
 800a2c2:	9a07      	ldr	r2, [sp, #28]
 800a2c4:	2a01      	cmp	r2, #1
 800a2c6:	f300 80ad 	bgt.w	800a424 <_dtoa_r+0x88c>
 800a2ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2cc:	2a00      	cmp	r2, #0
 800a2ce:	f000 80a5 	beq.w	800a41c <_dtoa_r+0x884>
 800a2d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2d6:	9e08      	ldr	r6, [sp, #32]
 800a2d8:	9d05      	ldr	r5, [sp, #20]
 800a2da:	9a05      	ldr	r2, [sp, #20]
 800a2dc:	441a      	add	r2, r3
 800a2de:	9205      	str	r2, [sp, #20]
 800a2e0:	9a06      	ldr	r2, [sp, #24]
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	441a      	add	r2, r3
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	9206      	str	r2, [sp, #24]
 800a2ea:	f000 fc3d 	bl	800ab68 <__i2b>
 800a2ee:	4607      	mov	r7, r0
 800a2f0:	b165      	cbz	r5, 800a30c <_dtoa_r+0x774>
 800a2f2:	9b06      	ldr	r3, [sp, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	dd09      	ble.n	800a30c <_dtoa_r+0x774>
 800a2f8:	42ab      	cmp	r3, r5
 800a2fa:	9a05      	ldr	r2, [sp, #20]
 800a2fc:	bfa8      	it	ge
 800a2fe:	462b      	movge	r3, r5
 800a300:	1ad2      	subs	r2, r2, r3
 800a302:	9205      	str	r2, [sp, #20]
 800a304:	9a06      	ldr	r2, [sp, #24]
 800a306:	1aed      	subs	r5, r5, r3
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	9306      	str	r3, [sp, #24]
 800a30c:	9b08      	ldr	r3, [sp, #32]
 800a30e:	b1f3      	cbz	r3, 800a34e <_dtoa_r+0x7b6>
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 80a3 	beq.w	800a45e <_dtoa_r+0x8c6>
 800a318:	2e00      	cmp	r6, #0
 800a31a:	dd10      	ble.n	800a33e <_dtoa_r+0x7a6>
 800a31c:	4639      	mov	r1, r7
 800a31e:	4632      	mov	r2, r6
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fce1 	bl	800ace8 <__pow5mult>
 800a326:	4652      	mov	r2, sl
 800a328:	4601      	mov	r1, r0
 800a32a:	4607      	mov	r7, r0
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 fc31 	bl	800ab94 <__multiply>
 800a332:	4651      	mov	r1, sl
 800a334:	4680      	mov	r8, r0
 800a336:	4620      	mov	r0, r4
 800a338:	f000 fb60 	bl	800a9fc <_Bfree>
 800a33c:	46c2      	mov	sl, r8
 800a33e:	9b08      	ldr	r3, [sp, #32]
 800a340:	1b9a      	subs	r2, r3, r6
 800a342:	d004      	beq.n	800a34e <_dtoa_r+0x7b6>
 800a344:	4651      	mov	r1, sl
 800a346:	4620      	mov	r0, r4
 800a348:	f000 fcce 	bl	800ace8 <__pow5mult>
 800a34c:	4682      	mov	sl, r0
 800a34e:	2101      	movs	r1, #1
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fc09 	bl	800ab68 <__i2b>
 800a356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	4606      	mov	r6, r0
 800a35c:	f340 8081 	ble.w	800a462 <_dtoa_r+0x8ca>
 800a360:	461a      	mov	r2, r3
 800a362:	4601      	mov	r1, r0
 800a364:	4620      	mov	r0, r4
 800a366:	f000 fcbf 	bl	800ace8 <__pow5mult>
 800a36a:	9b07      	ldr	r3, [sp, #28]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	4606      	mov	r6, r0
 800a370:	dd7a      	ble.n	800a468 <_dtoa_r+0x8d0>
 800a372:	f04f 0800 	mov.w	r8, #0
 800a376:	6933      	ldr	r3, [r6, #16]
 800a378:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a37c:	6918      	ldr	r0, [r3, #16]
 800a37e:	f000 fba5 	bl	800aacc <__hi0bits>
 800a382:	f1c0 0020 	rsb	r0, r0, #32
 800a386:	9b06      	ldr	r3, [sp, #24]
 800a388:	4418      	add	r0, r3
 800a38a:	f010 001f 	ands.w	r0, r0, #31
 800a38e:	f000 8094 	beq.w	800a4ba <_dtoa_r+0x922>
 800a392:	f1c0 0320 	rsb	r3, r0, #32
 800a396:	2b04      	cmp	r3, #4
 800a398:	f340 8085 	ble.w	800a4a6 <_dtoa_r+0x90e>
 800a39c:	9b05      	ldr	r3, [sp, #20]
 800a39e:	f1c0 001c 	rsb	r0, r0, #28
 800a3a2:	4403      	add	r3, r0
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	4403      	add	r3, r0
 800a3aa:	4405      	add	r5, r0
 800a3ac:	9306      	str	r3, [sp, #24]
 800a3ae:	9b05      	ldr	r3, [sp, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dd05      	ble.n	800a3c0 <_dtoa_r+0x828>
 800a3b4:	4651      	mov	r1, sl
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fcef 	bl	800ad9c <__lshift>
 800a3be:	4682      	mov	sl, r0
 800a3c0:	9b06      	ldr	r3, [sp, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	dd05      	ble.n	800a3d2 <_dtoa_r+0x83a>
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fce6 	bl	800ad9c <__lshift>
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d072      	beq.n	800a4be <_dtoa_r+0x926>
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4650      	mov	r0, sl
 800a3dc:	f000 fd4a 	bl	800ae74 <__mcmp>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	da6c      	bge.n	800a4be <_dtoa_r+0x926>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4651      	mov	r1, sl
 800a3e8:	220a      	movs	r2, #10
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 fb28 	bl	800aa40 <__multadd>
 800a3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3f6:	4682      	mov	sl, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 81b0 	beq.w	800a75e <_dtoa_r+0xbc6>
 800a3fe:	2300      	movs	r3, #0
 800a400:	4639      	mov	r1, r7
 800a402:	220a      	movs	r2, #10
 800a404:	4620      	mov	r0, r4
 800a406:	f000 fb1b 	bl	800aa40 <__multadd>
 800a40a:	9b01      	ldr	r3, [sp, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	4607      	mov	r7, r0
 800a410:	f300 8096 	bgt.w	800a540 <_dtoa_r+0x9a8>
 800a414:	9b07      	ldr	r3, [sp, #28]
 800a416:	2b02      	cmp	r3, #2
 800a418:	dc59      	bgt.n	800a4ce <_dtoa_r+0x936>
 800a41a:	e091      	b.n	800a540 <_dtoa_r+0x9a8>
 800a41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a41e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a422:	e758      	b.n	800a2d6 <_dtoa_r+0x73e>
 800a424:	9b04      	ldr	r3, [sp, #16]
 800a426:	1e5e      	subs	r6, r3, #1
 800a428:	9b08      	ldr	r3, [sp, #32]
 800a42a:	42b3      	cmp	r3, r6
 800a42c:	bfbf      	itttt	lt
 800a42e:	9b08      	ldrlt	r3, [sp, #32]
 800a430:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a432:	9608      	strlt	r6, [sp, #32]
 800a434:	1af3      	sublt	r3, r6, r3
 800a436:	bfb4      	ite	lt
 800a438:	18d2      	addlt	r2, r2, r3
 800a43a:	1b9e      	subge	r6, r3, r6
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	bfbc      	itt	lt
 800a440:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a442:	2600      	movlt	r6, #0
 800a444:	2b00      	cmp	r3, #0
 800a446:	bfb7      	itett	lt
 800a448:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a44c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a450:	1a9d      	sublt	r5, r3, r2
 800a452:	2300      	movlt	r3, #0
 800a454:	e741      	b.n	800a2da <_dtoa_r+0x742>
 800a456:	9e08      	ldr	r6, [sp, #32]
 800a458:	9d05      	ldr	r5, [sp, #20]
 800a45a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a45c:	e748      	b.n	800a2f0 <_dtoa_r+0x758>
 800a45e:	9a08      	ldr	r2, [sp, #32]
 800a460:	e770      	b.n	800a344 <_dtoa_r+0x7ac>
 800a462:	9b07      	ldr	r3, [sp, #28]
 800a464:	2b01      	cmp	r3, #1
 800a466:	dc19      	bgt.n	800a49c <_dtoa_r+0x904>
 800a468:	9b02      	ldr	r3, [sp, #8]
 800a46a:	b9bb      	cbnz	r3, 800a49c <_dtoa_r+0x904>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a472:	b99b      	cbnz	r3, 800a49c <_dtoa_r+0x904>
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a47a:	0d1b      	lsrs	r3, r3, #20
 800a47c:	051b      	lsls	r3, r3, #20
 800a47e:	b183      	cbz	r3, 800a4a2 <_dtoa_r+0x90a>
 800a480:	9b05      	ldr	r3, [sp, #20]
 800a482:	3301      	adds	r3, #1
 800a484:	9305      	str	r3, [sp, #20]
 800a486:	9b06      	ldr	r3, [sp, #24]
 800a488:	3301      	adds	r3, #1
 800a48a:	9306      	str	r3, [sp, #24]
 800a48c:	f04f 0801 	mov.w	r8, #1
 800a490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a492:	2b00      	cmp	r3, #0
 800a494:	f47f af6f 	bne.w	800a376 <_dtoa_r+0x7de>
 800a498:	2001      	movs	r0, #1
 800a49a:	e774      	b.n	800a386 <_dtoa_r+0x7ee>
 800a49c:	f04f 0800 	mov.w	r8, #0
 800a4a0:	e7f6      	b.n	800a490 <_dtoa_r+0x8f8>
 800a4a2:	4698      	mov	r8, r3
 800a4a4:	e7f4      	b.n	800a490 <_dtoa_r+0x8f8>
 800a4a6:	d082      	beq.n	800a3ae <_dtoa_r+0x816>
 800a4a8:	9a05      	ldr	r2, [sp, #20]
 800a4aa:	331c      	adds	r3, #28
 800a4ac:	441a      	add	r2, r3
 800a4ae:	9205      	str	r2, [sp, #20]
 800a4b0:	9a06      	ldr	r2, [sp, #24]
 800a4b2:	441a      	add	r2, r3
 800a4b4:	441d      	add	r5, r3
 800a4b6:	9206      	str	r2, [sp, #24]
 800a4b8:	e779      	b.n	800a3ae <_dtoa_r+0x816>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	e7f4      	b.n	800a4a8 <_dtoa_r+0x910>
 800a4be:	9b04      	ldr	r3, [sp, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dc37      	bgt.n	800a534 <_dtoa_r+0x99c>
 800a4c4:	9b07      	ldr	r3, [sp, #28]
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	dd34      	ble.n	800a534 <_dtoa_r+0x99c>
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	b963      	cbnz	r3, 800a4ec <_dtoa_r+0x954>
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	2205      	movs	r2, #5
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 fab2 	bl	800aa40 <__multadd>
 800a4dc:	4601      	mov	r1, r0
 800a4de:	4606      	mov	r6, r0
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	f000 fcc7 	bl	800ae74 <__mcmp>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f73f adbb 	bgt.w	800a062 <_dtoa_r+0x4ca>
 800a4ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ee:	9d00      	ldr	r5, [sp, #0]
 800a4f0:	ea6f 0b03 	mvn.w	fp, r3
 800a4f4:	f04f 0800 	mov.w	r8, #0
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 fa7e 	bl	800a9fc <_Bfree>
 800a500:	2f00      	cmp	r7, #0
 800a502:	f43f aeab 	beq.w	800a25c <_dtoa_r+0x6c4>
 800a506:	f1b8 0f00 	cmp.w	r8, #0
 800a50a:	d005      	beq.n	800a518 <_dtoa_r+0x980>
 800a50c:	45b8      	cmp	r8, r7
 800a50e:	d003      	beq.n	800a518 <_dtoa_r+0x980>
 800a510:	4641      	mov	r1, r8
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fa72 	bl	800a9fc <_Bfree>
 800a518:	4639      	mov	r1, r7
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 fa6e 	bl	800a9fc <_Bfree>
 800a520:	e69c      	b.n	800a25c <_dtoa_r+0x6c4>
 800a522:	2600      	movs	r6, #0
 800a524:	4637      	mov	r7, r6
 800a526:	e7e1      	b.n	800a4ec <_dtoa_r+0x954>
 800a528:	46bb      	mov	fp, r7
 800a52a:	4637      	mov	r7, r6
 800a52c:	e599      	b.n	800a062 <_dtoa_r+0x4ca>
 800a52e:	bf00      	nop
 800a530:	40240000 	.word	0x40240000
 800a534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80c8 	beq.w	800a6cc <_dtoa_r+0xb34>
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	2d00      	cmp	r5, #0
 800a542:	dd05      	ble.n	800a550 <_dtoa_r+0x9b8>
 800a544:	4639      	mov	r1, r7
 800a546:	462a      	mov	r2, r5
 800a548:	4620      	mov	r0, r4
 800a54a:	f000 fc27 	bl	800ad9c <__lshift>
 800a54e:	4607      	mov	r7, r0
 800a550:	f1b8 0f00 	cmp.w	r8, #0
 800a554:	d05b      	beq.n	800a60e <_dtoa_r+0xa76>
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 fa0f 	bl	800a97c <_Balloc>
 800a55e:	4605      	mov	r5, r0
 800a560:	b928      	cbnz	r0, 800a56e <_dtoa_r+0x9d6>
 800a562:	4b83      	ldr	r3, [pc, #524]	; (800a770 <_dtoa_r+0xbd8>)
 800a564:	4602      	mov	r2, r0
 800a566:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a56a:	f7ff bb2e 	b.w	8009bca <_dtoa_r+0x32>
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	3202      	adds	r2, #2
 800a572:	0092      	lsls	r2, r2, #2
 800a574:	f107 010c 	add.w	r1, r7, #12
 800a578:	300c      	adds	r0, #12
 800a57a:	f001 f801 	bl	800b580 <memcpy>
 800a57e:	2201      	movs	r2, #1
 800a580:	4629      	mov	r1, r5
 800a582:	4620      	mov	r0, r4
 800a584:	f000 fc0a 	bl	800ad9c <__lshift>
 800a588:	9b00      	ldr	r3, [sp, #0]
 800a58a:	3301      	adds	r3, #1
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a592:	4413      	add	r3, r2
 800a594:	9308      	str	r3, [sp, #32]
 800a596:	9b02      	ldr	r3, [sp, #8]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	46b8      	mov	r8, r7
 800a59e:	9306      	str	r3, [sp, #24]
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	4650      	mov	r0, sl
 800a5aa:	9301      	str	r3, [sp, #4]
 800a5ac:	f7ff fa69 	bl	8009a82 <quorem>
 800a5b0:	4641      	mov	r1, r8
 800a5b2:	9002      	str	r0, [sp, #8]
 800a5b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a5b8:	4650      	mov	r0, sl
 800a5ba:	f000 fc5b 	bl	800ae74 <__mcmp>
 800a5be:	463a      	mov	r2, r7
 800a5c0:	9005      	str	r0, [sp, #20]
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 fc71 	bl	800aeac <__mdiff>
 800a5ca:	68c2      	ldr	r2, [r0, #12]
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	bb02      	cbnz	r2, 800a612 <_dtoa_r+0xa7a>
 800a5d0:	4601      	mov	r1, r0
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	f000 fc4e 	bl	800ae74 <__mcmp>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	4629      	mov	r1, r5
 800a5dc:	4620      	mov	r0, r4
 800a5de:	9209      	str	r2, [sp, #36]	; 0x24
 800a5e0:	f000 fa0c 	bl	800a9fc <_Bfree>
 800a5e4:	9b07      	ldr	r3, [sp, #28]
 800a5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e8:	9d04      	ldr	r5, [sp, #16]
 800a5ea:	ea43 0102 	orr.w	r1, r3, r2
 800a5ee:	9b06      	ldr	r3, [sp, #24]
 800a5f0:	4319      	orrs	r1, r3
 800a5f2:	d110      	bne.n	800a616 <_dtoa_r+0xa7e>
 800a5f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5f8:	d029      	beq.n	800a64e <_dtoa_r+0xab6>
 800a5fa:	9b05      	ldr	r3, [sp, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	dd02      	ble.n	800a606 <_dtoa_r+0xa6e>
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	f883 9000 	strb.w	r9, [r3]
 800a60c:	e774      	b.n	800a4f8 <_dtoa_r+0x960>
 800a60e:	4638      	mov	r0, r7
 800a610:	e7ba      	b.n	800a588 <_dtoa_r+0x9f0>
 800a612:	2201      	movs	r2, #1
 800a614:	e7e1      	b.n	800a5da <_dtoa_r+0xa42>
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	db04      	blt.n	800a626 <_dtoa_r+0xa8e>
 800a61c:	9907      	ldr	r1, [sp, #28]
 800a61e:	430b      	orrs	r3, r1
 800a620:	9906      	ldr	r1, [sp, #24]
 800a622:	430b      	orrs	r3, r1
 800a624:	d120      	bne.n	800a668 <_dtoa_r+0xad0>
 800a626:	2a00      	cmp	r2, #0
 800a628:	dded      	ble.n	800a606 <_dtoa_r+0xa6e>
 800a62a:	4651      	mov	r1, sl
 800a62c:	2201      	movs	r2, #1
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 fbb4 	bl	800ad9c <__lshift>
 800a634:	4631      	mov	r1, r6
 800a636:	4682      	mov	sl, r0
 800a638:	f000 fc1c 	bl	800ae74 <__mcmp>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	dc03      	bgt.n	800a648 <_dtoa_r+0xab0>
 800a640:	d1e1      	bne.n	800a606 <_dtoa_r+0xa6e>
 800a642:	f019 0f01 	tst.w	r9, #1
 800a646:	d0de      	beq.n	800a606 <_dtoa_r+0xa6e>
 800a648:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a64c:	d1d8      	bne.n	800a600 <_dtoa_r+0xa68>
 800a64e:	9a01      	ldr	r2, [sp, #4]
 800a650:	2339      	movs	r3, #57	; 0x39
 800a652:	7013      	strb	r3, [r2, #0]
 800a654:	462b      	mov	r3, r5
 800a656:	461d      	mov	r5, r3
 800a658:	3b01      	subs	r3, #1
 800a65a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a65e:	2a39      	cmp	r2, #57	; 0x39
 800a660:	d06c      	beq.n	800a73c <_dtoa_r+0xba4>
 800a662:	3201      	adds	r2, #1
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	e747      	b.n	800a4f8 <_dtoa_r+0x960>
 800a668:	2a00      	cmp	r2, #0
 800a66a:	dd07      	ble.n	800a67c <_dtoa_r+0xae4>
 800a66c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a670:	d0ed      	beq.n	800a64e <_dtoa_r+0xab6>
 800a672:	9a01      	ldr	r2, [sp, #4]
 800a674:	f109 0301 	add.w	r3, r9, #1
 800a678:	7013      	strb	r3, [r2, #0]
 800a67a:	e73d      	b.n	800a4f8 <_dtoa_r+0x960>
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	9a08      	ldr	r2, [sp, #32]
 800a680:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a684:	4293      	cmp	r3, r2
 800a686:	d043      	beq.n	800a710 <_dtoa_r+0xb78>
 800a688:	4651      	mov	r1, sl
 800a68a:	2300      	movs	r3, #0
 800a68c:	220a      	movs	r2, #10
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f9d6 	bl	800aa40 <__multadd>
 800a694:	45b8      	cmp	r8, r7
 800a696:	4682      	mov	sl, r0
 800a698:	f04f 0300 	mov.w	r3, #0
 800a69c:	f04f 020a 	mov.w	r2, #10
 800a6a0:	4641      	mov	r1, r8
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	d107      	bne.n	800a6b6 <_dtoa_r+0xb1e>
 800a6a6:	f000 f9cb 	bl	800aa40 <__multadd>
 800a6aa:	4680      	mov	r8, r0
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	e775      	b.n	800a5a2 <_dtoa_r+0xa0a>
 800a6b6:	f000 f9c3 	bl	800aa40 <__multadd>
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	4680      	mov	r8, r0
 800a6be:	2300      	movs	r3, #0
 800a6c0:	220a      	movs	r2, #10
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 f9bc 	bl	800aa40 <__multadd>
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	e7f0      	b.n	800a6ae <_dtoa_r+0xb16>
 800a6cc:	9b04      	ldr	r3, [sp, #16]
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	9d00      	ldr	r5, [sp, #0]
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	f7ff f9d4 	bl	8009a82 <quorem>
 800a6da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	f805 9b01 	strb.w	r9, [r5], #1
 800a6e4:	1aea      	subs	r2, r5, r3
 800a6e6:	9b01      	ldr	r3, [sp, #4]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	dd07      	ble.n	800a6fc <_dtoa_r+0xb64>
 800a6ec:	4651      	mov	r1, sl
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	220a      	movs	r2, #10
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 f9a4 	bl	800aa40 <__multadd>
 800a6f8:	4682      	mov	sl, r0
 800a6fa:	e7ea      	b.n	800a6d2 <_dtoa_r+0xb3a>
 800a6fc:	9b01      	ldr	r3, [sp, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bfc8      	it	gt
 800a702:	461d      	movgt	r5, r3
 800a704:	9b00      	ldr	r3, [sp, #0]
 800a706:	bfd8      	it	le
 800a708:	2501      	movle	r5, #1
 800a70a:	441d      	add	r5, r3
 800a70c:	f04f 0800 	mov.w	r8, #0
 800a710:	4651      	mov	r1, sl
 800a712:	2201      	movs	r2, #1
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fb41 	bl	800ad9c <__lshift>
 800a71a:	4631      	mov	r1, r6
 800a71c:	4682      	mov	sl, r0
 800a71e:	f000 fba9 	bl	800ae74 <__mcmp>
 800a722:	2800      	cmp	r0, #0
 800a724:	dc96      	bgt.n	800a654 <_dtoa_r+0xabc>
 800a726:	d102      	bne.n	800a72e <_dtoa_r+0xb96>
 800a728:	f019 0f01 	tst.w	r9, #1
 800a72c:	d192      	bne.n	800a654 <_dtoa_r+0xabc>
 800a72e:	462b      	mov	r3, r5
 800a730:	461d      	mov	r5, r3
 800a732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a736:	2a30      	cmp	r2, #48	; 0x30
 800a738:	d0fa      	beq.n	800a730 <_dtoa_r+0xb98>
 800a73a:	e6dd      	b.n	800a4f8 <_dtoa_r+0x960>
 800a73c:	9a00      	ldr	r2, [sp, #0]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d189      	bne.n	800a656 <_dtoa_r+0xabe>
 800a742:	f10b 0b01 	add.w	fp, fp, #1
 800a746:	2331      	movs	r3, #49	; 0x31
 800a748:	e796      	b.n	800a678 <_dtoa_r+0xae0>
 800a74a:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <_dtoa_r+0xbdc>)
 800a74c:	f7ff ba99 	b.w	8009c82 <_dtoa_r+0xea>
 800a750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a752:	2b00      	cmp	r3, #0
 800a754:	f47f aa6d 	bne.w	8009c32 <_dtoa_r+0x9a>
 800a758:	4b07      	ldr	r3, [pc, #28]	; (800a778 <_dtoa_r+0xbe0>)
 800a75a:	f7ff ba92 	b.w	8009c82 <_dtoa_r+0xea>
 800a75e:	9b01      	ldr	r3, [sp, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	dcb5      	bgt.n	800a6d0 <_dtoa_r+0xb38>
 800a764:	9b07      	ldr	r3, [sp, #28]
 800a766:	2b02      	cmp	r3, #2
 800a768:	f73f aeb1 	bgt.w	800a4ce <_dtoa_r+0x936>
 800a76c:	e7b0      	b.n	800a6d0 <_dtoa_r+0xb38>
 800a76e:	bf00      	nop
 800a770:	080207b4 	.word	0x080207b4
 800a774:	08020714 	.word	0x08020714
 800a778:	08020738 	.word	0x08020738

0800a77c <_free_r>:
 800a77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a77e:	2900      	cmp	r1, #0
 800a780:	d044      	beq.n	800a80c <_free_r+0x90>
 800a782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a786:	9001      	str	r0, [sp, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f1a1 0404 	sub.w	r4, r1, #4
 800a78e:	bfb8      	it	lt
 800a790:	18e4      	addlt	r4, r4, r3
 800a792:	f000 f8e7 	bl	800a964 <__malloc_lock>
 800a796:	4a1e      	ldr	r2, [pc, #120]	; (800a810 <_free_r+0x94>)
 800a798:	9801      	ldr	r0, [sp, #4]
 800a79a:	6813      	ldr	r3, [r2, #0]
 800a79c:	b933      	cbnz	r3, 800a7ac <_free_r+0x30>
 800a79e:	6063      	str	r3, [r4, #4]
 800a7a0:	6014      	str	r4, [r2, #0]
 800a7a2:	b003      	add	sp, #12
 800a7a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7a8:	f000 b8e2 	b.w	800a970 <__malloc_unlock>
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	d908      	bls.n	800a7c2 <_free_r+0x46>
 800a7b0:	6825      	ldr	r5, [r4, #0]
 800a7b2:	1961      	adds	r1, r4, r5
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	bf01      	itttt	eq
 800a7b8:	6819      	ldreq	r1, [r3, #0]
 800a7ba:	685b      	ldreq	r3, [r3, #4]
 800a7bc:	1949      	addeq	r1, r1, r5
 800a7be:	6021      	streq	r1, [r4, #0]
 800a7c0:	e7ed      	b.n	800a79e <_free_r+0x22>
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	b10b      	cbz	r3, 800a7cc <_free_r+0x50>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d9fa      	bls.n	800a7c2 <_free_r+0x46>
 800a7cc:	6811      	ldr	r1, [r2, #0]
 800a7ce:	1855      	adds	r5, r2, r1
 800a7d0:	42a5      	cmp	r5, r4
 800a7d2:	d10b      	bne.n	800a7ec <_free_r+0x70>
 800a7d4:	6824      	ldr	r4, [r4, #0]
 800a7d6:	4421      	add	r1, r4
 800a7d8:	1854      	adds	r4, r2, r1
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	6011      	str	r1, [r2, #0]
 800a7de:	d1e0      	bne.n	800a7a2 <_free_r+0x26>
 800a7e0:	681c      	ldr	r4, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	6053      	str	r3, [r2, #4]
 800a7e6:	440c      	add	r4, r1
 800a7e8:	6014      	str	r4, [r2, #0]
 800a7ea:	e7da      	b.n	800a7a2 <_free_r+0x26>
 800a7ec:	d902      	bls.n	800a7f4 <_free_r+0x78>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	6003      	str	r3, [r0, #0]
 800a7f2:	e7d6      	b.n	800a7a2 <_free_r+0x26>
 800a7f4:	6825      	ldr	r5, [r4, #0]
 800a7f6:	1961      	adds	r1, r4, r5
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	bf04      	itt	eq
 800a7fc:	6819      	ldreq	r1, [r3, #0]
 800a7fe:	685b      	ldreq	r3, [r3, #4]
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	bf04      	itt	eq
 800a804:	1949      	addeq	r1, r1, r5
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	6054      	str	r4, [r2, #4]
 800a80a:	e7ca      	b.n	800a7a2 <_free_r+0x26>
 800a80c:	b003      	add	sp, #12
 800a80e:	bd30      	pop	{r4, r5, pc}
 800a810:	200025cc 	.word	0x200025cc

0800a814 <malloc>:
 800a814:	4b02      	ldr	r3, [pc, #8]	; (800a820 <malloc+0xc>)
 800a816:	4601      	mov	r1, r0
 800a818:	6818      	ldr	r0, [r3, #0]
 800a81a:	f000 b823 	b.w	800a864 <_malloc_r>
 800a81e:	bf00      	nop
 800a820:	20000140 	.word	0x20000140

0800a824 <sbrk_aligned>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	4e0e      	ldr	r6, [pc, #56]	; (800a860 <sbrk_aligned+0x3c>)
 800a828:	460c      	mov	r4, r1
 800a82a:	6831      	ldr	r1, [r6, #0]
 800a82c:	4605      	mov	r5, r0
 800a82e:	b911      	cbnz	r1, 800a836 <sbrk_aligned+0x12>
 800a830:	f000 fe96 	bl	800b560 <_sbrk_r>
 800a834:	6030      	str	r0, [r6, #0]
 800a836:	4621      	mov	r1, r4
 800a838:	4628      	mov	r0, r5
 800a83a:	f000 fe91 	bl	800b560 <_sbrk_r>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	d00a      	beq.n	800a858 <sbrk_aligned+0x34>
 800a842:	1cc4      	adds	r4, r0, #3
 800a844:	f024 0403 	bic.w	r4, r4, #3
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d007      	beq.n	800a85c <sbrk_aligned+0x38>
 800a84c:	1a21      	subs	r1, r4, r0
 800a84e:	4628      	mov	r0, r5
 800a850:	f000 fe86 	bl	800b560 <_sbrk_r>
 800a854:	3001      	adds	r0, #1
 800a856:	d101      	bne.n	800a85c <sbrk_aligned+0x38>
 800a858:	f04f 34ff 	mov.w	r4, #4294967295
 800a85c:	4620      	mov	r0, r4
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	200025d0 	.word	0x200025d0

0800a864 <_malloc_r>:
 800a864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a868:	1ccd      	adds	r5, r1, #3
 800a86a:	f025 0503 	bic.w	r5, r5, #3
 800a86e:	3508      	adds	r5, #8
 800a870:	2d0c      	cmp	r5, #12
 800a872:	bf38      	it	cc
 800a874:	250c      	movcc	r5, #12
 800a876:	2d00      	cmp	r5, #0
 800a878:	4607      	mov	r7, r0
 800a87a:	db01      	blt.n	800a880 <_malloc_r+0x1c>
 800a87c:	42a9      	cmp	r1, r5
 800a87e:	d905      	bls.n	800a88c <_malloc_r+0x28>
 800a880:	230c      	movs	r3, #12
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	2600      	movs	r6, #0
 800a886:	4630      	mov	r0, r6
 800a888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a960 <_malloc_r+0xfc>
 800a890:	f000 f868 	bl	800a964 <__malloc_lock>
 800a894:	f8d8 3000 	ldr.w	r3, [r8]
 800a898:	461c      	mov	r4, r3
 800a89a:	bb5c      	cbnz	r4, 800a8f4 <_malloc_r+0x90>
 800a89c:	4629      	mov	r1, r5
 800a89e:	4638      	mov	r0, r7
 800a8a0:	f7ff ffc0 	bl	800a824 <sbrk_aligned>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	d155      	bne.n	800a956 <_malloc_r+0xf2>
 800a8aa:	f8d8 4000 	ldr.w	r4, [r8]
 800a8ae:	4626      	mov	r6, r4
 800a8b0:	2e00      	cmp	r6, #0
 800a8b2:	d145      	bne.n	800a940 <_malloc_r+0xdc>
 800a8b4:	2c00      	cmp	r4, #0
 800a8b6:	d048      	beq.n	800a94a <_malloc_r+0xe6>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4638      	mov	r0, r7
 800a8be:	eb04 0903 	add.w	r9, r4, r3
 800a8c2:	f000 fe4d 	bl	800b560 <_sbrk_r>
 800a8c6:	4581      	cmp	r9, r0
 800a8c8:	d13f      	bne.n	800a94a <_malloc_r+0xe6>
 800a8ca:	6821      	ldr	r1, [r4, #0]
 800a8cc:	1a6d      	subs	r5, r5, r1
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff ffa7 	bl	800a824 <sbrk_aligned>
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d037      	beq.n	800a94a <_malloc_r+0xe6>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	442b      	add	r3, r5
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d038      	beq.n	800a95a <_malloc_r+0xf6>
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	42a2      	cmp	r2, r4
 800a8ec:	d12b      	bne.n	800a946 <_malloc_r+0xe2>
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	e00f      	b.n	800a914 <_malloc_r+0xb0>
 800a8f4:	6822      	ldr	r2, [r4, #0]
 800a8f6:	1b52      	subs	r2, r2, r5
 800a8f8:	d41f      	bmi.n	800a93a <_malloc_r+0xd6>
 800a8fa:	2a0b      	cmp	r2, #11
 800a8fc:	d917      	bls.n	800a92e <_malloc_r+0xca>
 800a8fe:	1961      	adds	r1, r4, r5
 800a900:	42a3      	cmp	r3, r4
 800a902:	6025      	str	r5, [r4, #0]
 800a904:	bf18      	it	ne
 800a906:	6059      	strne	r1, [r3, #4]
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	bf08      	it	eq
 800a90c:	f8c8 1000 	streq.w	r1, [r8]
 800a910:	5162      	str	r2, [r4, r5]
 800a912:	604b      	str	r3, [r1, #4]
 800a914:	4638      	mov	r0, r7
 800a916:	f104 060b 	add.w	r6, r4, #11
 800a91a:	f000 f829 	bl	800a970 <__malloc_unlock>
 800a91e:	f026 0607 	bic.w	r6, r6, #7
 800a922:	1d23      	adds	r3, r4, #4
 800a924:	1af2      	subs	r2, r6, r3
 800a926:	d0ae      	beq.n	800a886 <_malloc_r+0x22>
 800a928:	1b9b      	subs	r3, r3, r6
 800a92a:	50a3      	str	r3, [r4, r2]
 800a92c:	e7ab      	b.n	800a886 <_malloc_r+0x22>
 800a92e:	42a3      	cmp	r3, r4
 800a930:	6862      	ldr	r2, [r4, #4]
 800a932:	d1dd      	bne.n	800a8f0 <_malloc_r+0x8c>
 800a934:	f8c8 2000 	str.w	r2, [r8]
 800a938:	e7ec      	b.n	800a914 <_malloc_r+0xb0>
 800a93a:	4623      	mov	r3, r4
 800a93c:	6864      	ldr	r4, [r4, #4]
 800a93e:	e7ac      	b.n	800a89a <_malloc_r+0x36>
 800a940:	4634      	mov	r4, r6
 800a942:	6876      	ldr	r6, [r6, #4]
 800a944:	e7b4      	b.n	800a8b0 <_malloc_r+0x4c>
 800a946:	4613      	mov	r3, r2
 800a948:	e7cc      	b.n	800a8e4 <_malloc_r+0x80>
 800a94a:	230c      	movs	r3, #12
 800a94c:	603b      	str	r3, [r7, #0]
 800a94e:	4638      	mov	r0, r7
 800a950:	f000 f80e 	bl	800a970 <__malloc_unlock>
 800a954:	e797      	b.n	800a886 <_malloc_r+0x22>
 800a956:	6025      	str	r5, [r4, #0]
 800a958:	e7dc      	b.n	800a914 <_malloc_r+0xb0>
 800a95a:	605b      	str	r3, [r3, #4]
 800a95c:	deff      	udf	#255	; 0xff
 800a95e:	bf00      	nop
 800a960:	200025cc 	.word	0x200025cc

0800a964 <__malloc_lock>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__malloc_lock+0x8>)
 800a966:	f7ff b88a 	b.w	8009a7e <__retarget_lock_acquire_recursive>
 800a96a:	bf00      	nop
 800a96c:	200025c8 	.word	0x200025c8

0800a970 <__malloc_unlock>:
 800a970:	4801      	ldr	r0, [pc, #4]	; (800a978 <__malloc_unlock+0x8>)
 800a972:	f7ff b885 	b.w	8009a80 <__retarget_lock_release_recursive>
 800a976:	bf00      	nop
 800a978:	200025c8 	.word	0x200025c8

0800a97c <_Balloc>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	69c6      	ldr	r6, [r0, #28]
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	b976      	cbnz	r6, 800a9a4 <_Balloc+0x28>
 800a986:	2010      	movs	r0, #16
 800a988:	f7ff ff44 	bl	800a814 <malloc>
 800a98c:	4602      	mov	r2, r0
 800a98e:	61e0      	str	r0, [r4, #28]
 800a990:	b920      	cbnz	r0, 800a99c <_Balloc+0x20>
 800a992:	4b18      	ldr	r3, [pc, #96]	; (800a9f4 <_Balloc+0x78>)
 800a994:	4818      	ldr	r0, [pc, #96]	; (800a9f8 <_Balloc+0x7c>)
 800a996:	216b      	movs	r1, #107	; 0x6b
 800a998:	f000 fe00 	bl	800b59c <__assert_func>
 800a99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9a0:	6006      	str	r6, [r0, #0]
 800a9a2:	60c6      	str	r6, [r0, #12]
 800a9a4:	69e6      	ldr	r6, [r4, #28]
 800a9a6:	68f3      	ldr	r3, [r6, #12]
 800a9a8:	b183      	cbz	r3, 800a9cc <_Balloc+0x50>
 800a9aa:	69e3      	ldr	r3, [r4, #28]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9b2:	b9b8      	cbnz	r0, 800a9e4 <_Balloc+0x68>
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	fa01 f605 	lsl.w	r6, r1, r5
 800a9ba:	1d72      	adds	r2, r6, #5
 800a9bc:	0092      	lsls	r2, r2, #2
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 fe0a 	bl	800b5d8 <_calloc_r>
 800a9c4:	b160      	cbz	r0, 800a9e0 <_Balloc+0x64>
 800a9c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9ca:	e00e      	b.n	800a9ea <_Balloc+0x6e>
 800a9cc:	2221      	movs	r2, #33	; 0x21
 800a9ce:	2104      	movs	r1, #4
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fe01 	bl	800b5d8 <_calloc_r>
 800a9d6:	69e3      	ldr	r3, [r4, #28]
 800a9d8:	60f0      	str	r0, [r6, #12]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e4      	bne.n	800a9aa <_Balloc+0x2e>
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}
 800a9e4:	6802      	ldr	r2, [r0, #0]
 800a9e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9f0:	e7f7      	b.n	800a9e2 <_Balloc+0x66>
 800a9f2:	bf00      	nop
 800a9f4:	08020745 	.word	0x08020745
 800a9f8:	080207c5 	.word	0x080207c5

0800a9fc <_Bfree>:
 800a9fc:	b570      	push	{r4, r5, r6, lr}
 800a9fe:	69c6      	ldr	r6, [r0, #28]
 800aa00:	4605      	mov	r5, r0
 800aa02:	460c      	mov	r4, r1
 800aa04:	b976      	cbnz	r6, 800aa24 <_Bfree+0x28>
 800aa06:	2010      	movs	r0, #16
 800aa08:	f7ff ff04 	bl	800a814 <malloc>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	61e8      	str	r0, [r5, #28]
 800aa10:	b920      	cbnz	r0, 800aa1c <_Bfree+0x20>
 800aa12:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <_Bfree+0x3c>)
 800aa14:	4809      	ldr	r0, [pc, #36]	; (800aa3c <_Bfree+0x40>)
 800aa16:	218f      	movs	r1, #143	; 0x8f
 800aa18:	f000 fdc0 	bl	800b59c <__assert_func>
 800aa1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa20:	6006      	str	r6, [r0, #0]
 800aa22:	60c6      	str	r6, [r0, #12]
 800aa24:	b13c      	cbz	r4, 800aa36 <_Bfree+0x3a>
 800aa26:	69eb      	ldr	r3, [r5, #28]
 800aa28:	6862      	ldr	r2, [r4, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa30:	6021      	str	r1, [r4, #0]
 800aa32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	08020745 	.word	0x08020745
 800aa3c:	080207c5 	.word	0x080207c5

0800aa40 <__multadd>:
 800aa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa44:	690d      	ldr	r5, [r1, #16]
 800aa46:	4607      	mov	r7, r0
 800aa48:	460c      	mov	r4, r1
 800aa4a:	461e      	mov	r6, r3
 800aa4c:	f101 0c14 	add.w	ip, r1, #20
 800aa50:	2000      	movs	r0, #0
 800aa52:	f8dc 3000 	ldr.w	r3, [ip]
 800aa56:	b299      	uxth	r1, r3
 800aa58:	fb02 6101 	mla	r1, r2, r1, r6
 800aa5c:	0c1e      	lsrs	r6, r3, #16
 800aa5e:	0c0b      	lsrs	r3, r1, #16
 800aa60:	fb02 3306 	mla	r3, r2, r6, r3
 800aa64:	b289      	uxth	r1, r1
 800aa66:	3001      	adds	r0, #1
 800aa68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa6c:	4285      	cmp	r5, r0
 800aa6e:	f84c 1b04 	str.w	r1, [ip], #4
 800aa72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa76:	dcec      	bgt.n	800aa52 <__multadd+0x12>
 800aa78:	b30e      	cbz	r6, 800aabe <__multadd+0x7e>
 800aa7a:	68a3      	ldr	r3, [r4, #8]
 800aa7c:	42ab      	cmp	r3, r5
 800aa7e:	dc19      	bgt.n	800aab4 <__multadd+0x74>
 800aa80:	6861      	ldr	r1, [r4, #4]
 800aa82:	4638      	mov	r0, r7
 800aa84:	3101      	adds	r1, #1
 800aa86:	f7ff ff79 	bl	800a97c <_Balloc>
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	b928      	cbnz	r0, 800aa9a <__multadd+0x5a>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	4b0c      	ldr	r3, [pc, #48]	; (800aac4 <__multadd+0x84>)
 800aa92:	480d      	ldr	r0, [pc, #52]	; (800aac8 <__multadd+0x88>)
 800aa94:	21ba      	movs	r1, #186	; 0xba
 800aa96:	f000 fd81 	bl	800b59c <__assert_func>
 800aa9a:	6922      	ldr	r2, [r4, #16]
 800aa9c:	3202      	adds	r2, #2
 800aa9e:	f104 010c 	add.w	r1, r4, #12
 800aaa2:	0092      	lsls	r2, r2, #2
 800aaa4:	300c      	adds	r0, #12
 800aaa6:	f000 fd6b 	bl	800b580 <memcpy>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4638      	mov	r0, r7
 800aaae:	f7ff ffa5 	bl	800a9fc <_Bfree>
 800aab2:	4644      	mov	r4, r8
 800aab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aab8:	3501      	adds	r5, #1
 800aaba:	615e      	str	r6, [r3, #20]
 800aabc:	6125      	str	r5, [r4, #16]
 800aabe:	4620      	mov	r0, r4
 800aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac4:	080207b4 	.word	0x080207b4
 800aac8:	080207c5 	.word	0x080207c5

0800aacc <__hi0bits>:
 800aacc:	0c03      	lsrs	r3, r0, #16
 800aace:	041b      	lsls	r3, r3, #16
 800aad0:	b9d3      	cbnz	r3, 800ab08 <__hi0bits+0x3c>
 800aad2:	0400      	lsls	r0, r0, #16
 800aad4:	2310      	movs	r3, #16
 800aad6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aada:	bf04      	itt	eq
 800aadc:	0200      	lsleq	r0, r0, #8
 800aade:	3308      	addeq	r3, #8
 800aae0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aae4:	bf04      	itt	eq
 800aae6:	0100      	lsleq	r0, r0, #4
 800aae8:	3304      	addeq	r3, #4
 800aaea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aaee:	bf04      	itt	eq
 800aaf0:	0080      	lsleq	r0, r0, #2
 800aaf2:	3302      	addeq	r3, #2
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	db05      	blt.n	800ab04 <__hi0bits+0x38>
 800aaf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aafc:	f103 0301 	add.w	r3, r3, #1
 800ab00:	bf08      	it	eq
 800ab02:	2320      	moveq	r3, #32
 800ab04:	4618      	mov	r0, r3
 800ab06:	4770      	bx	lr
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e7e4      	b.n	800aad6 <__hi0bits+0xa>

0800ab0c <__lo0bits>:
 800ab0c:	6803      	ldr	r3, [r0, #0]
 800ab0e:	f013 0207 	ands.w	r2, r3, #7
 800ab12:	d00c      	beq.n	800ab2e <__lo0bits+0x22>
 800ab14:	07d9      	lsls	r1, r3, #31
 800ab16:	d422      	bmi.n	800ab5e <__lo0bits+0x52>
 800ab18:	079a      	lsls	r2, r3, #30
 800ab1a:	bf49      	itett	mi
 800ab1c:	085b      	lsrmi	r3, r3, #1
 800ab1e:	089b      	lsrpl	r3, r3, #2
 800ab20:	6003      	strmi	r3, [r0, #0]
 800ab22:	2201      	movmi	r2, #1
 800ab24:	bf5c      	itt	pl
 800ab26:	6003      	strpl	r3, [r0, #0]
 800ab28:	2202      	movpl	r2, #2
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4770      	bx	lr
 800ab2e:	b299      	uxth	r1, r3
 800ab30:	b909      	cbnz	r1, 800ab36 <__lo0bits+0x2a>
 800ab32:	0c1b      	lsrs	r3, r3, #16
 800ab34:	2210      	movs	r2, #16
 800ab36:	b2d9      	uxtb	r1, r3
 800ab38:	b909      	cbnz	r1, 800ab3e <__lo0bits+0x32>
 800ab3a:	3208      	adds	r2, #8
 800ab3c:	0a1b      	lsrs	r3, r3, #8
 800ab3e:	0719      	lsls	r1, r3, #28
 800ab40:	bf04      	itt	eq
 800ab42:	091b      	lsreq	r3, r3, #4
 800ab44:	3204      	addeq	r2, #4
 800ab46:	0799      	lsls	r1, r3, #30
 800ab48:	bf04      	itt	eq
 800ab4a:	089b      	lsreq	r3, r3, #2
 800ab4c:	3202      	addeq	r2, #2
 800ab4e:	07d9      	lsls	r1, r3, #31
 800ab50:	d403      	bmi.n	800ab5a <__lo0bits+0x4e>
 800ab52:	085b      	lsrs	r3, r3, #1
 800ab54:	f102 0201 	add.w	r2, r2, #1
 800ab58:	d003      	beq.n	800ab62 <__lo0bits+0x56>
 800ab5a:	6003      	str	r3, [r0, #0]
 800ab5c:	e7e5      	b.n	800ab2a <__lo0bits+0x1e>
 800ab5e:	2200      	movs	r2, #0
 800ab60:	e7e3      	b.n	800ab2a <__lo0bits+0x1e>
 800ab62:	2220      	movs	r2, #32
 800ab64:	e7e1      	b.n	800ab2a <__lo0bits+0x1e>
	...

0800ab68 <__i2b>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	f7ff ff05 	bl	800a97c <_Balloc>
 800ab72:	4602      	mov	r2, r0
 800ab74:	b928      	cbnz	r0, 800ab82 <__i2b+0x1a>
 800ab76:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <__i2b+0x24>)
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <__i2b+0x28>)
 800ab7a:	f240 1145 	movw	r1, #325	; 0x145
 800ab7e:	f000 fd0d 	bl	800b59c <__assert_func>
 800ab82:	2301      	movs	r3, #1
 800ab84:	6144      	str	r4, [r0, #20]
 800ab86:	6103      	str	r3, [r0, #16]
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	bf00      	nop
 800ab8c:	080207b4 	.word	0x080207b4
 800ab90:	080207c5 	.word	0x080207c5

0800ab94 <__multiply>:
 800ab94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab98:	4691      	mov	r9, r2
 800ab9a:	690a      	ldr	r2, [r1, #16]
 800ab9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	bfb8      	it	lt
 800aba4:	460b      	movlt	r3, r1
 800aba6:	460c      	mov	r4, r1
 800aba8:	bfbc      	itt	lt
 800abaa:	464c      	movlt	r4, r9
 800abac:	4699      	movlt	r9, r3
 800abae:	6927      	ldr	r7, [r4, #16]
 800abb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	6861      	ldr	r1, [r4, #4]
 800abb8:	eb07 060a 	add.w	r6, r7, sl
 800abbc:	42b3      	cmp	r3, r6
 800abbe:	b085      	sub	sp, #20
 800abc0:	bfb8      	it	lt
 800abc2:	3101      	addlt	r1, #1
 800abc4:	f7ff feda 	bl	800a97c <_Balloc>
 800abc8:	b930      	cbnz	r0, 800abd8 <__multiply+0x44>
 800abca:	4602      	mov	r2, r0
 800abcc:	4b44      	ldr	r3, [pc, #272]	; (800ace0 <__multiply+0x14c>)
 800abce:	4845      	ldr	r0, [pc, #276]	; (800ace4 <__multiply+0x150>)
 800abd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800abd4:	f000 fce2 	bl	800b59c <__assert_func>
 800abd8:	f100 0514 	add.w	r5, r0, #20
 800abdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abe0:	462b      	mov	r3, r5
 800abe2:	2200      	movs	r2, #0
 800abe4:	4543      	cmp	r3, r8
 800abe6:	d321      	bcc.n	800ac2c <__multiply+0x98>
 800abe8:	f104 0314 	add.w	r3, r4, #20
 800abec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800abf0:	f109 0314 	add.w	r3, r9, #20
 800abf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800abf8:	9202      	str	r2, [sp, #8]
 800abfa:	1b3a      	subs	r2, r7, r4
 800abfc:	3a15      	subs	r2, #21
 800abfe:	f022 0203 	bic.w	r2, r2, #3
 800ac02:	3204      	adds	r2, #4
 800ac04:	f104 0115 	add.w	r1, r4, #21
 800ac08:	428f      	cmp	r7, r1
 800ac0a:	bf38      	it	cc
 800ac0c:	2204      	movcc	r2, #4
 800ac0e:	9201      	str	r2, [sp, #4]
 800ac10:	9a02      	ldr	r2, [sp, #8]
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d80c      	bhi.n	800ac32 <__multiply+0x9e>
 800ac18:	2e00      	cmp	r6, #0
 800ac1a:	dd03      	ble.n	800ac24 <__multiply+0x90>
 800ac1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d05b      	beq.n	800acdc <__multiply+0x148>
 800ac24:	6106      	str	r6, [r0, #16]
 800ac26:	b005      	add	sp, #20
 800ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2c:	f843 2b04 	str.w	r2, [r3], #4
 800ac30:	e7d8      	b.n	800abe4 <__multiply+0x50>
 800ac32:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac36:	f1ba 0f00 	cmp.w	sl, #0
 800ac3a:	d024      	beq.n	800ac86 <__multiply+0xf2>
 800ac3c:	f104 0e14 	add.w	lr, r4, #20
 800ac40:	46a9      	mov	r9, r5
 800ac42:	f04f 0c00 	mov.w	ip, #0
 800ac46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ac4e:	fa1f fb82 	uxth.w	fp, r2
 800ac52:	b289      	uxth	r1, r1
 800ac54:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ac60:	4461      	add	r1, ip
 800ac62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac66:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac6e:	b289      	uxth	r1, r1
 800ac70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac74:	4577      	cmp	r7, lr
 800ac76:	f849 1b04 	str.w	r1, [r9], #4
 800ac7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac7e:	d8e2      	bhi.n	800ac46 <__multiply+0xb2>
 800ac80:	9a01      	ldr	r2, [sp, #4]
 800ac82:	f845 c002 	str.w	ip, [r5, r2]
 800ac86:	9a03      	ldr	r2, [sp, #12]
 800ac88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	f1b9 0f00 	cmp.w	r9, #0
 800ac92:	d021      	beq.n	800acd8 <__multiply+0x144>
 800ac94:	6829      	ldr	r1, [r5, #0]
 800ac96:	f104 0c14 	add.w	ip, r4, #20
 800ac9a:	46ae      	mov	lr, r5
 800ac9c:	f04f 0a00 	mov.w	sl, #0
 800aca0:	f8bc b000 	ldrh.w	fp, [ip]
 800aca4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aca8:	fb09 220b 	mla	r2, r9, fp, r2
 800acac:	4452      	add	r2, sl
 800acae:	b289      	uxth	r1, r1
 800acb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acb4:	f84e 1b04 	str.w	r1, [lr], #4
 800acb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800acbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800acc0:	f8be 1000 	ldrh.w	r1, [lr]
 800acc4:	fb09 110a 	mla	r1, r9, sl, r1
 800acc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800accc:	4567      	cmp	r7, ip
 800acce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800acd2:	d8e5      	bhi.n	800aca0 <__multiply+0x10c>
 800acd4:	9a01      	ldr	r2, [sp, #4]
 800acd6:	50a9      	str	r1, [r5, r2]
 800acd8:	3504      	adds	r5, #4
 800acda:	e799      	b.n	800ac10 <__multiply+0x7c>
 800acdc:	3e01      	subs	r6, #1
 800acde:	e79b      	b.n	800ac18 <__multiply+0x84>
 800ace0:	080207b4 	.word	0x080207b4
 800ace4:	080207c5 	.word	0x080207c5

0800ace8 <__pow5mult>:
 800ace8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acec:	4615      	mov	r5, r2
 800acee:	f012 0203 	ands.w	r2, r2, #3
 800acf2:	4606      	mov	r6, r0
 800acf4:	460f      	mov	r7, r1
 800acf6:	d007      	beq.n	800ad08 <__pow5mult+0x20>
 800acf8:	4c25      	ldr	r4, [pc, #148]	; (800ad90 <__pow5mult+0xa8>)
 800acfa:	3a01      	subs	r2, #1
 800acfc:	2300      	movs	r3, #0
 800acfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad02:	f7ff fe9d 	bl	800aa40 <__multadd>
 800ad06:	4607      	mov	r7, r0
 800ad08:	10ad      	asrs	r5, r5, #2
 800ad0a:	d03d      	beq.n	800ad88 <__pow5mult+0xa0>
 800ad0c:	69f4      	ldr	r4, [r6, #28]
 800ad0e:	b97c      	cbnz	r4, 800ad30 <__pow5mult+0x48>
 800ad10:	2010      	movs	r0, #16
 800ad12:	f7ff fd7f 	bl	800a814 <malloc>
 800ad16:	4602      	mov	r2, r0
 800ad18:	61f0      	str	r0, [r6, #28]
 800ad1a:	b928      	cbnz	r0, 800ad28 <__pow5mult+0x40>
 800ad1c:	4b1d      	ldr	r3, [pc, #116]	; (800ad94 <__pow5mult+0xac>)
 800ad1e:	481e      	ldr	r0, [pc, #120]	; (800ad98 <__pow5mult+0xb0>)
 800ad20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ad24:	f000 fc3a 	bl	800b59c <__assert_func>
 800ad28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad2c:	6004      	str	r4, [r0, #0]
 800ad2e:	60c4      	str	r4, [r0, #12]
 800ad30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ad34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad38:	b94c      	cbnz	r4, 800ad4e <__pow5mult+0x66>
 800ad3a:	f240 2171 	movw	r1, #625	; 0x271
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7ff ff12 	bl	800ab68 <__i2b>
 800ad44:	2300      	movs	r3, #0
 800ad46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	6003      	str	r3, [r0, #0]
 800ad4e:	f04f 0900 	mov.w	r9, #0
 800ad52:	07eb      	lsls	r3, r5, #31
 800ad54:	d50a      	bpl.n	800ad6c <__pow5mult+0x84>
 800ad56:	4639      	mov	r1, r7
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f7ff ff1a 	bl	800ab94 <__multiply>
 800ad60:	4639      	mov	r1, r7
 800ad62:	4680      	mov	r8, r0
 800ad64:	4630      	mov	r0, r6
 800ad66:	f7ff fe49 	bl	800a9fc <_Bfree>
 800ad6a:	4647      	mov	r7, r8
 800ad6c:	106d      	asrs	r5, r5, #1
 800ad6e:	d00b      	beq.n	800ad88 <__pow5mult+0xa0>
 800ad70:	6820      	ldr	r0, [r4, #0]
 800ad72:	b938      	cbnz	r0, 800ad84 <__pow5mult+0x9c>
 800ad74:	4622      	mov	r2, r4
 800ad76:	4621      	mov	r1, r4
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff ff0b 	bl	800ab94 <__multiply>
 800ad7e:	6020      	str	r0, [r4, #0]
 800ad80:	f8c0 9000 	str.w	r9, [r0]
 800ad84:	4604      	mov	r4, r0
 800ad86:	e7e4      	b.n	800ad52 <__pow5mult+0x6a>
 800ad88:	4638      	mov	r0, r7
 800ad8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8e:	bf00      	nop
 800ad90:	08020910 	.word	0x08020910
 800ad94:	08020745 	.word	0x08020745
 800ad98:	080207c5 	.word	0x080207c5

0800ad9c <__lshift>:
 800ad9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada0:	460c      	mov	r4, r1
 800ada2:	6849      	ldr	r1, [r1, #4]
 800ada4:	6923      	ldr	r3, [r4, #16]
 800ada6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adaa:	68a3      	ldr	r3, [r4, #8]
 800adac:	4607      	mov	r7, r0
 800adae:	4691      	mov	r9, r2
 800adb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adb4:	f108 0601 	add.w	r6, r8, #1
 800adb8:	42b3      	cmp	r3, r6
 800adba:	db0b      	blt.n	800add4 <__lshift+0x38>
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7ff fddd 	bl	800a97c <_Balloc>
 800adc2:	4605      	mov	r5, r0
 800adc4:	b948      	cbnz	r0, 800adda <__lshift+0x3e>
 800adc6:	4602      	mov	r2, r0
 800adc8:	4b28      	ldr	r3, [pc, #160]	; (800ae6c <__lshift+0xd0>)
 800adca:	4829      	ldr	r0, [pc, #164]	; (800ae70 <__lshift+0xd4>)
 800adcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800add0:	f000 fbe4 	bl	800b59c <__assert_func>
 800add4:	3101      	adds	r1, #1
 800add6:	005b      	lsls	r3, r3, #1
 800add8:	e7ee      	b.n	800adb8 <__lshift+0x1c>
 800adda:	2300      	movs	r3, #0
 800addc:	f100 0114 	add.w	r1, r0, #20
 800ade0:	f100 0210 	add.w	r2, r0, #16
 800ade4:	4618      	mov	r0, r3
 800ade6:	4553      	cmp	r3, sl
 800ade8:	db33      	blt.n	800ae52 <__lshift+0xb6>
 800adea:	6920      	ldr	r0, [r4, #16]
 800adec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adf0:	f104 0314 	add.w	r3, r4, #20
 800adf4:	f019 091f 	ands.w	r9, r9, #31
 800adf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae00:	d02b      	beq.n	800ae5a <__lshift+0xbe>
 800ae02:	f1c9 0e20 	rsb	lr, r9, #32
 800ae06:	468a      	mov	sl, r1
 800ae08:	2200      	movs	r2, #0
 800ae0a:	6818      	ldr	r0, [r3, #0]
 800ae0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ae10:	4310      	orrs	r0, r2
 800ae12:	f84a 0b04 	str.w	r0, [sl], #4
 800ae16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae1a:	459c      	cmp	ip, r3
 800ae1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae20:	d8f3      	bhi.n	800ae0a <__lshift+0x6e>
 800ae22:	ebac 0304 	sub.w	r3, ip, r4
 800ae26:	3b15      	subs	r3, #21
 800ae28:	f023 0303 	bic.w	r3, r3, #3
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	f104 0015 	add.w	r0, r4, #21
 800ae32:	4584      	cmp	ip, r0
 800ae34:	bf38      	it	cc
 800ae36:	2304      	movcc	r3, #4
 800ae38:	50ca      	str	r2, [r1, r3]
 800ae3a:	b10a      	cbz	r2, 800ae40 <__lshift+0xa4>
 800ae3c:	f108 0602 	add.w	r6, r8, #2
 800ae40:	3e01      	subs	r6, #1
 800ae42:	4638      	mov	r0, r7
 800ae44:	612e      	str	r6, [r5, #16]
 800ae46:	4621      	mov	r1, r4
 800ae48:	f7ff fdd8 	bl	800a9fc <_Bfree>
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae56:	3301      	adds	r3, #1
 800ae58:	e7c5      	b.n	800ade6 <__lshift+0x4a>
 800ae5a:	3904      	subs	r1, #4
 800ae5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae64:	459c      	cmp	ip, r3
 800ae66:	d8f9      	bhi.n	800ae5c <__lshift+0xc0>
 800ae68:	e7ea      	b.n	800ae40 <__lshift+0xa4>
 800ae6a:	bf00      	nop
 800ae6c:	080207b4 	.word	0x080207b4
 800ae70:	080207c5 	.word	0x080207c5

0800ae74 <__mcmp>:
 800ae74:	b530      	push	{r4, r5, lr}
 800ae76:	6902      	ldr	r2, [r0, #16]
 800ae78:	690c      	ldr	r4, [r1, #16]
 800ae7a:	1b12      	subs	r2, r2, r4
 800ae7c:	d10e      	bne.n	800ae9c <__mcmp+0x28>
 800ae7e:	f100 0314 	add.w	r3, r0, #20
 800ae82:	3114      	adds	r1, #20
 800ae84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae94:	42a5      	cmp	r5, r4
 800ae96:	d003      	beq.n	800aea0 <__mcmp+0x2c>
 800ae98:	d305      	bcc.n	800aea6 <__mcmp+0x32>
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	bd30      	pop	{r4, r5, pc}
 800aea0:	4283      	cmp	r3, r0
 800aea2:	d3f3      	bcc.n	800ae8c <__mcmp+0x18>
 800aea4:	e7fa      	b.n	800ae9c <__mcmp+0x28>
 800aea6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeaa:	e7f7      	b.n	800ae9c <__mcmp+0x28>

0800aeac <__mdiff>:
 800aeac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb0:	460c      	mov	r4, r1
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4690      	mov	r8, r2
 800aeba:	f7ff ffdb 	bl	800ae74 <__mcmp>
 800aebe:	1e05      	subs	r5, r0, #0
 800aec0:	d110      	bne.n	800aee4 <__mdiff+0x38>
 800aec2:	4629      	mov	r1, r5
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7ff fd59 	bl	800a97c <_Balloc>
 800aeca:	b930      	cbnz	r0, 800aeda <__mdiff+0x2e>
 800aecc:	4b3a      	ldr	r3, [pc, #232]	; (800afb8 <__mdiff+0x10c>)
 800aece:	4602      	mov	r2, r0
 800aed0:	f240 2137 	movw	r1, #567	; 0x237
 800aed4:	4839      	ldr	r0, [pc, #228]	; (800afbc <__mdiff+0x110>)
 800aed6:	f000 fb61 	bl	800b59c <__assert_func>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee4:	bfa4      	itt	ge
 800aee6:	4643      	movge	r3, r8
 800aee8:	46a0      	movge	r8, r4
 800aeea:	4630      	mov	r0, r6
 800aeec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aef0:	bfa6      	itte	ge
 800aef2:	461c      	movge	r4, r3
 800aef4:	2500      	movge	r5, #0
 800aef6:	2501      	movlt	r5, #1
 800aef8:	f7ff fd40 	bl	800a97c <_Balloc>
 800aefc:	b920      	cbnz	r0, 800af08 <__mdiff+0x5c>
 800aefe:	4b2e      	ldr	r3, [pc, #184]	; (800afb8 <__mdiff+0x10c>)
 800af00:	4602      	mov	r2, r0
 800af02:	f240 2145 	movw	r1, #581	; 0x245
 800af06:	e7e5      	b.n	800aed4 <__mdiff+0x28>
 800af08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af0c:	6926      	ldr	r6, [r4, #16]
 800af0e:	60c5      	str	r5, [r0, #12]
 800af10:	f104 0914 	add.w	r9, r4, #20
 800af14:	f108 0514 	add.w	r5, r8, #20
 800af18:	f100 0e14 	add.w	lr, r0, #20
 800af1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af24:	f108 0210 	add.w	r2, r8, #16
 800af28:	46f2      	mov	sl, lr
 800af2a:	2100      	movs	r1, #0
 800af2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800af30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af34:	fa11 f88b 	uxtah	r8, r1, fp
 800af38:	b299      	uxth	r1, r3
 800af3a:	0c1b      	lsrs	r3, r3, #16
 800af3c:	eba8 0801 	sub.w	r8, r8, r1
 800af40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af48:	fa1f f888 	uxth.w	r8, r8
 800af4c:	1419      	asrs	r1, r3, #16
 800af4e:	454e      	cmp	r6, r9
 800af50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af54:	f84a 3b04 	str.w	r3, [sl], #4
 800af58:	d8e8      	bhi.n	800af2c <__mdiff+0x80>
 800af5a:	1b33      	subs	r3, r6, r4
 800af5c:	3b15      	subs	r3, #21
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	3304      	adds	r3, #4
 800af64:	3415      	adds	r4, #21
 800af66:	42a6      	cmp	r6, r4
 800af68:	bf38      	it	cc
 800af6a:	2304      	movcc	r3, #4
 800af6c:	441d      	add	r5, r3
 800af6e:	4473      	add	r3, lr
 800af70:	469e      	mov	lr, r3
 800af72:	462e      	mov	r6, r5
 800af74:	4566      	cmp	r6, ip
 800af76:	d30e      	bcc.n	800af96 <__mdiff+0xea>
 800af78:	f10c 0203 	add.w	r2, ip, #3
 800af7c:	1b52      	subs	r2, r2, r5
 800af7e:	f022 0203 	bic.w	r2, r2, #3
 800af82:	3d03      	subs	r5, #3
 800af84:	45ac      	cmp	ip, r5
 800af86:	bf38      	it	cc
 800af88:	2200      	movcc	r2, #0
 800af8a:	4413      	add	r3, r2
 800af8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800af90:	b17a      	cbz	r2, 800afb2 <__mdiff+0x106>
 800af92:	6107      	str	r7, [r0, #16]
 800af94:	e7a4      	b.n	800aee0 <__mdiff+0x34>
 800af96:	f856 8b04 	ldr.w	r8, [r6], #4
 800af9a:	fa11 f288 	uxtah	r2, r1, r8
 800af9e:	1414      	asrs	r4, r2, #16
 800afa0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800afa4:	b292      	uxth	r2, r2
 800afa6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800afaa:	f84e 2b04 	str.w	r2, [lr], #4
 800afae:	1421      	asrs	r1, r4, #16
 800afb0:	e7e0      	b.n	800af74 <__mdiff+0xc8>
 800afb2:	3f01      	subs	r7, #1
 800afb4:	e7ea      	b.n	800af8c <__mdiff+0xe0>
 800afb6:	bf00      	nop
 800afb8:	080207b4 	.word	0x080207b4
 800afbc:	080207c5 	.word	0x080207c5

0800afc0 <__d2b>:
 800afc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afc4:	460f      	mov	r7, r1
 800afc6:	2101      	movs	r1, #1
 800afc8:	ec59 8b10 	vmov	r8, r9, d0
 800afcc:	4616      	mov	r6, r2
 800afce:	f7ff fcd5 	bl	800a97c <_Balloc>
 800afd2:	4604      	mov	r4, r0
 800afd4:	b930      	cbnz	r0, 800afe4 <__d2b+0x24>
 800afd6:	4602      	mov	r2, r0
 800afd8:	4b24      	ldr	r3, [pc, #144]	; (800b06c <__d2b+0xac>)
 800afda:	4825      	ldr	r0, [pc, #148]	; (800b070 <__d2b+0xb0>)
 800afdc:	f240 310f 	movw	r1, #783	; 0x30f
 800afe0:	f000 fadc 	bl	800b59c <__assert_func>
 800afe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afec:	bb2d      	cbnz	r5, 800b03a <__d2b+0x7a>
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	f1b8 0300 	subs.w	r3, r8, #0
 800aff4:	d026      	beq.n	800b044 <__d2b+0x84>
 800aff6:	4668      	mov	r0, sp
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	f7ff fd87 	bl	800ab0c <__lo0bits>
 800affe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b002:	b1e8      	cbz	r0, 800b040 <__d2b+0x80>
 800b004:	f1c0 0320 	rsb	r3, r0, #32
 800b008:	fa02 f303 	lsl.w	r3, r2, r3
 800b00c:	430b      	orrs	r3, r1
 800b00e:	40c2      	lsrs	r2, r0
 800b010:	6163      	str	r3, [r4, #20]
 800b012:	9201      	str	r2, [sp, #4]
 800b014:	9b01      	ldr	r3, [sp, #4]
 800b016:	61a3      	str	r3, [r4, #24]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bf14      	ite	ne
 800b01c:	2202      	movne	r2, #2
 800b01e:	2201      	moveq	r2, #1
 800b020:	6122      	str	r2, [r4, #16]
 800b022:	b1bd      	cbz	r5, 800b054 <__d2b+0x94>
 800b024:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b028:	4405      	add	r5, r0
 800b02a:	603d      	str	r5, [r7, #0]
 800b02c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b030:	6030      	str	r0, [r6, #0]
 800b032:	4620      	mov	r0, r4
 800b034:	b003      	add	sp, #12
 800b036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b03a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b03e:	e7d6      	b.n	800afee <__d2b+0x2e>
 800b040:	6161      	str	r1, [r4, #20]
 800b042:	e7e7      	b.n	800b014 <__d2b+0x54>
 800b044:	a801      	add	r0, sp, #4
 800b046:	f7ff fd61 	bl	800ab0c <__lo0bits>
 800b04a:	9b01      	ldr	r3, [sp, #4]
 800b04c:	6163      	str	r3, [r4, #20]
 800b04e:	3020      	adds	r0, #32
 800b050:	2201      	movs	r2, #1
 800b052:	e7e5      	b.n	800b020 <__d2b+0x60>
 800b054:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b058:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b05c:	6038      	str	r0, [r7, #0]
 800b05e:	6918      	ldr	r0, [r3, #16]
 800b060:	f7ff fd34 	bl	800aacc <__hi0bits>
 800b064:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b068:	e7e2      	b.n	800b030 <__d2b+0x70>
 800b06a:	bf00      	nop
 800b06c:	080207b4 	.word	0x080207b4
 800b070:	080207c5 	.word	0x080207c5

0800b074 <__sfputc_r>:
 800b074:	6893      	ldr	r3, [r2, #8]
 800b076:	3b01      	subs	r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	b410      	push	{r4}
 800b07c:	6093      	str	r3, [r2, #8]
 800b07e:	da08      	bge.n	800b092 <__sfputc_r+0x1e>
 800b080:	6994      	ldr	r4, [r2, #24]
 800b082:	42a3      	cmp	r3, r4
 800b084:	db01      	blt.n	800b08a <__sfputc_r+0x16>
 800b086:	290a      	cmp	r1, #10
 800b088:	d103      	bne.n	800b092 <__sfputc_r+0x1e>
 800b08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b08e:	f7fe bbe4 	b.w	800985a <__swbuf_r>
 800b092:	6813      	ldr	r3, [r2, #0]
 800b094:	1c58      	adds	r0, r3, #1
 800b096:	6010      	str	r0, [r2, #0]
 800b098:	7019      	strb	r1, [r3, #0]
 800b09a:	4608      	mov	r0, r1
 800b09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <__sfputs_r>:
 800b0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	460f      	mov	r7, r1
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	18d5      	adds	r5, r2, r3
 800b0ac:	42ac      	cmp	r4, r5
 800b0ae:	d101      	bne.n	800b0b4 <__sfputs_r+0x12>
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e007      	b.n	800b0c4 <__sfputs_r+0x22>
 800b0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b8:	463a      	mov	r2, r7
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7ff ffda 	bl	800b074 <__sfputc_r>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d1f3      	bne.n	800b0ac <__sfputs_r+0xa>
 800b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0c8 <_vfiprintf_r>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	b09d      	sub	sp, #116	; 0x74
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	4698      	mov	r8, r3
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	b118      	cbz	r0, 800b0e0 <_vfiprintf_r+0x18>
 800b0d8:	6a03      	ldr	r3, [r0, #32]
 800b0da:	b90b      	cbnz	r3, 800b0e0 <_vfiprintf_r+0x18>
 800b0dc:	f7fe fad6 	bl	800968c <__sinit>
 800b0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e2:	07d9      	lsls	r1, r3, #31
 800b0e4:	d405      	bmi.n	800b0f2 <_vfiprintf_r+0x2a>
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	059a      	lsls	r2, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_vfiprintf_r+0x2a>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ee:	f7fe fcc6 	bl	8009a7e <__retarget_lock_acquire_recursive>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	071b      	lsls	r3, r3, #28
 800b0f6:	d501      	bpl.n	800b0fc <_vfiprintf_r+0x34>
 800b0f8:	692b      	ldr	r3, [r5, #16]
 800b0fa:	b99b      	cbnz	r3, 800b124 <_vfiprintf_r+0x5c>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7fe fbe8 	bl	80098d4 <__swsetup_r>
 800b104:	b170      	cbz	r0, 800b124 <_vfiprintf_r+0x5c>
 800b106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b108:	07dc      	lsls	r4, r3, #31
 800b10a:	d504      	bpl.n	800b116 <_vfiprintf_r+0x4e>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	b01d      	add	sp, #116	; 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	0598      	lsls	r0, r3, #22
 800b11a:	d4f7      	bmi.n	800b10c <_vfiprintf_r+0x44>
 800b11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b11e:	f7fe fcaf 	bl	8009a80 <__retarget_lock_release_recursive>
 800b122:	e7f3      	b.n	800b10c <_vfiprintf_r+0x44>
 800b124:	2300      	movs	r3, #0
 800b126:	9309      	str	r3, [sp, #36]	; 0x24
 800b128:	2320      	movs	r3, #32
 800b12a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b132:	2330      	movs	r3, #48	; 0x30
 800b134:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b2e8 <_vfiprintf_r+0x220>
 800b138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b13c:	f04f 0901 	mov.w	r9, #1
 800b140:	4623      	mov	r3, r4
 800b142:	469a      	mov	sl, r3
 800b144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b148:	b10a      	cbz	r2, 800b14e <_vfiprintf_r+0x86>
 800b14a:	2a25      	cmp	r2, #37	; 0x25
 800b14c:	d1f9      	bne.n	800b142 <_vfiprintf_r+0x7a>
 800b14e:	ebba 0b04 	subs.w	fp, sl, r4
 800b152:	d00b      	beq.n	800b16c <_vfiprintf_r+0xa4>
 800b154:	465b      	mov	r3, fp
 800b156:	4622      	mov	r2, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ffa1 	bl	800b0a2 <__sfputs_r>
 800b160:	3001      	adds	r0, #1
 800b162:	f000 80a9 	beq.w	800b2b8 <_vfiprintf_r+0x1f0>
 800b166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b168:	445a      	add	r2, fp
 800b16a:	9209      	str	r2, [sp, #36]	; 0x24
 800b16c:	f89a 3000 	ldrb.w	r3, [sl]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 80a1 	beq.w	800b2b8 <_vfiprintf_r+0x1f0>
 800b176:	2300      	movs	r3, #0
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b180:	f10a 0a01 	add.w	sl, sl, #1
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b18c:	931a      	str	r3, [sp, #104]	; 0x68
 800b18e:	4654      	mov	r4, sl
 800b190:	2205      	movs	r2, #5
 800b192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b196:	4854      	ldr	r0, [pc, #336]	; (800b2e8 <_vfiprintf_r+0x220>)
 800b198:	f7f5 f89a 	bl	80002d0 <memchr>
 800b19c:	9a04      	ldr	r2, [sp, #16]
 800b19e:	b9d8      	cbnz	r0, 800b1d8 <_vfiprintf_r+0x110>
 800b1a0:	06d1      	lsls	r1, r2, #27
 800b1a2:	bf44      	itt	mi
 800b1a4:	2320      	movmi	r3, #32
 800b1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1aa:	0713      	lsls	r3, r2, #28
 800b1ac:	bf44      	itt	mi
 800b1ae:	232b      	movmi	r3, #43	; 0x2b
 800b1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ba:	d015      	beq.n	800b1e8 <_vfiprintf_r+0x120>
 800b1bc:	9a07      	ldr	r2, [sp, #28]
 800b1be:	4654      	mov	r4, sl
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f04f 0c0a 	mov.w	ip, #10
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1cc:	3b30      	subs	r3, #48	; 0x30
 800b1ce:	2b09      	cmp	r3, #9
 800b1d0:	d94d      	bls.n	800b26e <_vfiprintf_r+0x1a6>
 800b1d2:	b1b0      	cbz	r0, 800b202 <_vfiprintf_r+0x13a>
 800b1d4:	9207      	str	r2, [sp, #28]
 800b1d6:	e014      	b.n	800b202 <_vfiprintf_r+0x13a>
 800b1d8:	eba0 0308 	sub.w	r3, r0, r8
 800b1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	46a2      	mov	sl, r4
 800b1e6:	e7d2      	b.n	800b18e <_vfiprintf_r+0xc6>
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	1d19      	adds	r1, r3, #4
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	9103      	str	r1, [sp, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bfbb      	ittet	lt
 800b1f4:	425b      	neglt	r3, r3
 800b1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1fa:	9307      	strge	r3, [sp, #28]
 800b1fc:	9307      	strlt	r3, [sp, #28]
 800b1fe:	bfb8      	it	lt
 800b200:	9204      	strlt	r2, [sp, #16]
 800b202:	7823      	ldrb	r3, [r4, #0]
 800b204:	2b2e      	cmp	r3, #46	; 0x2e
 800b206:	d10c      	bne.n	800b222 <_vfiprintf_r+0x15a>
 800b208:	7863      	ldrb	r3, [r4, #1]
 800b20a:	2b2a      	cmp	r3, #42	; 0x2a
 800b20c:	d134      	bne.n	800b278 <_vfiprintf_r+0x1b0>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	1d1a      	adds	r2, r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	9203      	str	r2, [sp, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bfb8      	it	lt
 800b21a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b21e:	3402      	adds	r4, #2
 800b220:	9305      	str	r3, [sp, #20]
 800b222:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b2f8 <_vfiprintf_r+0x230>
 800b226:	7821      	ldrb	r1, [r4, #0]
 800b228:	2203      	movs	r2, #3
 800b22a:	4650      	mov	r0, sl
 800b22c:	f7f5 f850 	bl	80002d0 <memchr>
 800b230:	b138      	cbz	r0, 800b242 <_vfiprintf_r+0x17a>
 800b232:	9b04      	ldr	r3, [sp, #16]
 800b234:	eba0 000a 	sub.w	r0, r0, sl
 800b238:	2240      	movs	r2, #64	; 0x40
 800b23a:	4082      	lsls	r2, r0
 800b23c:	4313      	orrs	r3, r2
 800b23e:	3401      	adds	r4, #1
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b246:	4829      	ldr	r0, [pc, #164]	; (800b2ec <_vfiprintf_r+0x224>)
 800b248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b24c:	2206      	movs	r2, #6
 800b24e:	f7f5 f83f 	bl	80002d0 <memchr>
 800b252:	2800      	cmp	r0, #0
 800b254:	d03f      	beq.n	800b2d6 <_vfiprintf_r+0x20e>
 800b256:	4b26      	ldr	r3, [pc, #152]	; (800b2f0 <_vfiprintf_r+0x228>)
 800b258:	bb1b      	cbnz	r3, 800b2a2 <_vfiprintf_r+0x1da>
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	3307      	adds	r3, #7
 800b25e:	f023 0307 	bic.w	r3, r3, #7
 800b262:	3308      	adds	r3, #8
 800b264:	9303      	str	r3, [sp, #12]
 800b266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b268:	443b      	add	r3, r7
 800b26a:	9309      	str	r3, [sp, #36]	; 0x24
 800b26c:	e768      	b.n	800b140 <_vfiprintf_r+0x78>
 800b26e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b272:	460c      	mov	r4, r1
 800b274:	2001      	movs	r0, #1
 800b276:	e7a6      	b.n	800b1c6 <_vfiprintf_r+0xfe>
 800b278:	2300      	movs	r3, #0
 800b27a:	3401      	adds	r4, #1
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	4619      	mov	r1, r3
 800b280:	f04f 0c0a 	mov.w	ip, #10
 800b284:	4620      	mov	r0, r4
 800b286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b28a:	3a30      	subs	r2, #48	; 0x30
 800b28c:	2a09      	cmp	r2, #9
 800b28e:	d903      	bls.n	800b298 <_vfiprintf_r+0x1d0>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d0c6      	beq.n	800b222 <_vfiprintf_r+0x15a>
 800b294:	9105      	str	r1, [sp, #20]
 800b296:	e7c4      	b.n	800b222 <_vfiprintf_r+0x15a>
 800b298:	fb0c 2101 	mla	r1, ip, r1, r2
 800b29c:	4604      	mov	r4, r0
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e7f0      	b.n	800b284 <_vfiprintf_r+0x1bc>
 800b2a2:	ab03      	add	r3, sp, #12
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	462a      	mov	r2, r5
 800b2a8:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <_vfiprintf_r+0x22c>)
 800b2aa:	a904      	add	r1, sp, #16
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7fd fd9b 	bl	8008de8 <_printf_float>
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	1c78      	adds	r0, r7, #1
 800b2b6:	d1d6      	bne.n	800b266 <_vfiprintf_r+0x19e>
 800b2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2ba:	07d9      	lsls	r1, r3, #31
 800b2bc:	d405      	bmi.n	800b2ca <_vfiprintf_r+0x202>
 800b2be:	89ab      	ldrh	r3, [r5, #12]
 800b2c0:	059a      	lsls	r2, r3, #22
 800b2c2:	d402      	bmi.n	800b2ca <_vfiprintf_r+0x202>
 800b2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2c6:	f7fe fbdb 	bl	8009a80 <__retarget_lock_release_recursive>
 800b2ca:	89ab      	ldrh	r3, [r5, #12]
 800b2cc:	065b      	lsls	r3, r3, #25
 800b2ce:	f53f af1d 	bmi.w	800b10c <_vfiprintf_r+0x44>
 800b2d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2d4:	e71c      	b.n	800b110 <_vfiprintf_r+0x48>
 800b2d6:	ab03      	add	r3, sp, #12
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	462a      	mov	r2, r5
 800b2dc:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <_vfiprintf_r+0x22c>)
 800b2de:	a904      	add	r1, sp, #16
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7fe f825 	bl	8009330 <_printf_i>
 800b2e6:	e7e4      	b.n	800b2b2 <_vfiprintf_r+0x1ea>
 800b2e8:	0802091c 	.word	0x0802091c
 800b2ec:	08020926 	.word	0x08020926
 800b2f0:	08008de9 	.word	0x08008de9
 800b2f4:	0800b0a3 	.word	0x0800b0a3
 800b2f8:	08020922 	.word	0x08020922

0800b2fc <__sflush_r>:
 800b2fc:	898a      	ldrh	r2, [r1, #12]
 800b2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b302:	4605      	mov	r5, r0
 800b304:	0710      	lsls	r0, r2, #28
 800b306:	460c      	mov	r4, r1
 800b308:	d458      	bmi.n	800b3bc <__sflush_r+0xc0>
 800b30a:	684b      	ldr	r3, [r1, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dc05      	bgt.n	800b31c <__sflush_r+0x20>
 800b310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	dc02      	bgt.n	800b31c <__sflush_r+0x20>
 800b316:	2000      	movs	r0, #0
 800b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b31e:	2e00      	cmp	r6, #0
 800b320:	d0f9      	beq.n	800b316 <__sflush_r+0x1a>
 800b322:	2300      	movs	r3, #0
 800b324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b328:	682f      	ldr	r7, [r5, #0]
 800b32a:	6a21      	ldr	r1, [r4, #32]
 800b32c:	602b      	str	r3, [r5, #0]
 800b32e:	d032      	beq.n	800b396 <__sflush_r+0x9a>
 800b330:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	075a      	lsls	r2, r3, #29
 800b336:	d505      	bpl.n	800b344 <__sflush_r+0x48>
 800b338:	6863      	ldr	r3, [r4, #4]
 800b33a:	1ac0      	subs	r0, r0, r3
 800b33c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b33e:	b10b      	cbz	r3, 800b344 <__sflush_r+0x48>
 800b340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b342:	1ac0      	subs	r0, r0, r3
 800b344:	2300      	movs	r3, #0
 800b346:	4602      	mov	r2, r0
 800b348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b34a:	6a21      	ldr	r1, [r4, #32]
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b0      	blx	r6
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	d106      	bne.n	800b364 <__sflush_r+0x68>
 800b356:	6829      	ldr	r1, [r5, #0]
 800b358:	291d      	cmp	r1, #29
 800b35a:	d82b      	bhi.n	800b3b4 <__sflush_r+0xb8>
 800b35c:	4a29      	ldr	r2, [pc, #164]	; (800b404 <__sflush_r+0x108>)
 800b35e:	410a      	asrs	r2, r1
 800b360:	07d6      	lsls	r6, r2, #31
 800b362:	d427      	bmi.n	800b3b4 <__sflush_r+0xb8>
 800b364:	2200      	movs	r2, #0
 800b366:	6062      	str	r2, [r4, #4]
 800b368:	04d9      	lsls	r1, r3, #19
 800b36a:	6922      	ldr	r2, [r4, #16]
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	d504      	bpl.n	800b37a <__sflush_r+0x7e>
 800b370:	1c42      	adds	r2, r0, #1
 800b372:	d101      	bne.n	800b378 <__sflush_r+0x7c>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b903      	cbnz	r3, 800b37a <__sflush_r+0x7e>
 800b378:	6560      	str	r0, [r4, #84]	; 0x54
 800b37a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b37c:	602f      	str	r7, [r5, #0]
 800b37e:	2900      	cmp	r1, #0
 800b380:	d0c9      	beq.n	800b316 <__sflush_r+0x1a>
 800b382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b386:	4299      	cmp	r1, r3
 800b388:	d002      	beq.n	800b390 <__sflush_r+0x94>
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7ff f9f6 	bl	800a77c <_free_r>
 800b390:	2000      	movs	r0, #0
 800b392:	6360      	str	r0, [r4, #52]	; 0x34
 800b394:	e7c0      	b.n	800b318 <__sflush_r+0x1c>
 800b396:	2301      	movs	r3, #1
 800b398:	4628      	mov	r0, r5
 800b39a:	47b0      	blx	r6
 800b39c:	1c41      	adds	r1, r0, #1
 800b39e:	d1c8      	bne.n	800b332 <__sflush_r+0x36>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0c5      	beq.n	800b332 <__sflush_r+0x36>
 800b3a6:	2b1d      	cmp	r3, #29
 800b3a8:	d001      	beq.n	800b3ae <__sflush_r+0xb2>
 800b3aa:	2b16      	cmp	r3, #22
 800b3ac:	d101      	bne.n	800b3b2 <__sflush_r+0xb6>
 800b3ae:	602f      	str	r7, [r5, #0]
 800b3b0:	e7b1      	b.n	800b316 <__sflush_r+0x1a>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b8:	81a3      	strh	r3, [r4, #12]
 800b3ba:	e7ad      	b.n	800b318 <__sflush_r+0x1c>
 800b3bc:	690f      	ldr	r7, [r1, #16]
 800b3be:	2f00      	cmp	r7, #0
 800b3c0:	d0a9      	beq.n	800b316 <__sflush_r+0x1a>
 800b3c2:	0793      	lsls	r3, r2, #30
 800b3c4:	680e      	ldr	r6, [r1, #0]
 800b3c6:	bf08      	it	eq
 800b3c8:	694b      	ldreq	r3, [r1, #20]
 800b3ca:	600f      	str	r7, [r1, #0]
 800b3cc:	bf18      	it	ne
 800b3ce:	2300      	movne	r3, #0
 800b3d0:	eba6 0807 	sub.w	r8, r6, r7
 800b3d4:	608b      	str	r3, [r1, #8]
 800b3d6:	f1b8 0f00 	cmp.w	r8, #0
 800b3da:	dd9c      	ble.n	800b316 <__sflush_r+0x1a>
 800b3dc:	6a21      	ldr	r1, [r4, #32]
 800b3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3e0:	4643      	mov	r3, r8
 800b3e2:	463a      	mov	r2, r7
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	47b0      	blx	r6
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	dc06      	bgt.n	800b3fa <__sflush_r+0xfe>
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f8:	e78e      	b.n	800b318 <__sflush_r+0x1c>
 800b3fa:	4407      	add	r7, r0
 800b3fc:	eba8 0800 	sub.w	r8, r8, r0
 800b400:	e7e9      	b.n	800b3d6 <__sflush_r+0xda>
 800b402:	bf00      	nop
 800b404:	dfbffffe 	.word	0xdfbffffe

0800b408 <_fflush_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	690b      	ldr	r3, [r1, #16]
 800b40c:	4605      	mov	r5, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	b913      	cbnz	r3, 800b418 <_fflush_r+0x10>
 800b412:	2500      	movs	r5, #0
 800b414:	4628      	mov	r0, r5
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	b118      	cbz	r0, 800b422 <_fflush_r+0x1a>
 800b41a:	6a03      	ldr	r3, [r0, #32]
 800b41c:	b90b      	cbnz	r3, 800b422 <_fflush_r+0x1a>
 800b41e:	f7fe f935 	bl	800968c <__sinit>
 800b422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0f3      	beq.n	800b412 <_fflush_r+0xa>
 800b42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b42c:	07d0      	lsls	r0, r2, #31
 800b42e:	d404      	bmi.n	800b43a <_fflush_r+0x32>
 800b430:	0599      	lsls	r1, r3, #22
 800b432:	d402      	bmi.n	800b43a <_fflush_r+0x32>
 800b434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b436:	f7fe fb22 	bl	8009a7e <__retarget_lock_acquire_recursive>
 800b43a:	4628      	mov	r0, r5
 800b43c:	4621      	mov	r1, r4
 800b43e:	f7ff ff5d 	bl	800b2fc <__sflush_r>
 800b442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b444:	07da      	lsls	r2, r3, #31
 800b446:	4605      	mov	r5, r0
 800b448:	d4e4      	bmi.n	800b414 <_fflush_r+0xc>
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	059b      	lsls	r3, r3, #22
 800b44e:	d4e1      	bmi.n	800b414 <_fflush_r+0xc>
 800b450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b452:	f7fe fb15 	bl	8009a80 <__retarget_lock_release_recursive>
 800b456:	e7dd      	b.n	800b414 <_fflush_r+0xc>

0800b458 <__swhatbuf_r>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	460c      	mov	r4, r1
 800b45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b460:	2900      	cmp	r1, #0
 800b462:	b096      	sub	sp, #88	; 0x58
 800b464:	4615      	mov	r5, r2
 800b466:	461e      	mov	r6, r3
 800b468:	da0d      	bge.n	800b486 <__swhatbuf_r+0x2e>
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b470:	f04f 0100 	mov.w	r1, #0
 800b474:	bf0c      	ite	eq
 800b476:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b47a:	2340      	movne	r3, #64	; 0x40
 800b47c:	2000      	movs	r0, #0
 800b47e:	6031      	str	r1, [r6, #0]
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	b016      	add	sp, #88	; 0x58
 800b484:	bd70      	pop	{r4, r5, r6, pc}
 800b486:	466a      	mov	r2, sp
 800b488:	f000 f848 	bl	800b51c <_fstat_r>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	dbec      	blt.n	800b46a <__swhatbuf_r+0x12>
 800b490:	9901      	ldr	r1, [sp, #4]
 800b492:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b496:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b49a:	4259      	negs	r1, r3
 800b49c:	4159      	adcs	r1, r3
 800b49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a2:	e7eb      	b.n	800b47c <__swhatbuf_r+0x24>

0800b4a4 <__smakebuf_r>:
 800b4a4:	898b      	ldrh	r3, [r1, #12]
 800b4a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4a8:	079d      	lsls	r5, r3, #30
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	d507      	bpl.n	800b4c0 <__smakebuf_r+0x1c>
 800b4b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	6163      	str	r3, [r4, #20]
 800b4bc:	b002      	add	sp, #8
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
 800b4c0:	ab01      	add	r3, sp, #4
 800b4c2:	466a      	mov	r2, sp
 800b4c4:	f7ff ffc8 	bl	800b458 <__swhatbuf_r>
 800b4c8:	9900      	ldr	r1, [sp, #0]
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f7ff f9c9 	bl	800a864 <_malloc_r>
 800b4d2:	b948      	cbnz	r0, 800b4e8 <__smakebuf_r+0x44>
 800b4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d8:	059a      	lsls	r2, r3, #22
 800b4da:	d4ef      	bmi.n	800b4bc <__smakebuf_r+0x18>
 800b4dc:	f023 0303 	bic.w	r3, r3, #3
 800b4e0:	f043 0302 	orr.w	r3, r3, #2
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	e7e3      	b.n	800b4b0 <__smakebuf_r+0xc>
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	6020      	str	r0, [r4, #0]
 800b4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f0:	81a3      	strh	r3, [r4, #12]
 800b4f2:	9b00      	ldr	r3, [sp, #0]
 800b4f4:	6163      	str	r3, [r4, #20]
 800b4f6:	9b01      	ldr	r3, [sp, #4]
 800b4f8:	6120      	str	r0, [r4, #16]
 800b4fa:	b15b      	cbz	r3, 800b514 <__smakebuf_r+0x70>
 800b4fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b500:	4630      	mov	r0, r6
 800b502:	f000 f81d 	bl	800b540 <_isatty_r>
 800b506:	b128      	cbz	r0, 800b514 <__smakebuf_r+0x70>
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	f023 0303 	bic.w	r3, r3, #3
 800b50e:	f043 0301 	orr.w	r3, r3, #1
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	431d      	orrs	r5, r3
 800b518:	81a5      	strh	r5, [r4, #12]
 800b51a:	e7cf      	b.n	800b4bc <__smakebuf_r+0x18>

0800b51c <_fstat_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d07      	ldr	r5, [pc, #28]	; (800b53c <_fstat_r+0x20>)
 800b520:	2300      	movs	r3, #0
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	4611      	mov	r1, r2
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	f7f7 fbc4 	bl	8002cb6 <_fstat>
 800b52e:	1c43      	adds	r3, r0, #1
 800b530:	d102      	bne.n	800b538 <_fstat_r+0x1c>
 800b532:	682b      	ldr	r3, [r5, #0]
 800b534:	b103      	cbz	r3, 800b538 <_fstat_r+0x1c>
 800b536:	6023      	str	r3, [r4, #0]
 800b538:	bd38      	pop	{r3, r4, r5, pc}
 800b53a:	bf00      	nop
 800b53c:	200025c4 	.word	0x200025c4

0800b540 <_isatty_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d06      	ldr	r5, [pc, #24]	; (800b55c <_isatty_r+0x1c>)
 800b544:	2300      	movs	r3, #0
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	602b      	str	r3, [r5, #0]
 800b54c:	f7f7 fbc3 	bl	8002cd6 <_isatty>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_isatty_r+0x1a>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_isatty_r+0x1a>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	200025c4 	.word	0x200025c4

0800b560 <_sbrk_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4d06      	ldr	r5, [pc, #24]	; (800b57c <_sbrk_r+0x1c>)
 800b564:	2300      	movs	r3, #0
 800b566:	4604      	mov	r4, r0
 800b568:	4608      	mov	r0, r1
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	f7f7 fbcc 	bl	8002d08 <_sbrk>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d102      	bne.n	800b57a <_sbrk_r+0x1a>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	b103      	cbz	r3, 800b57a <_sbrk_r+0x1a>
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	200025c4 	.word	0x200025c4

0800b580 <memcpy>:
 800b580:	440a      	add	r2, r1
 800b582:	4291      	cmp	r1, r2
 800b584:	f100 33ff 	add.w	r3, r0, #4294967295
 800b588:	d100      	bne.n	800b58c <memcpy+0xc>
 800b58a:	4770      	bx	lr
 800b58c:	b510      	push	{r4, lr}
 800b58e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b592:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b596:	4291      	cmp	r1, r2
 800b598:	d1f9      	bne.n	800b58e <memcpy+0xe>
 800b59a:	bd10      	pop	{r4, pc}

0800b59c <__assert_func>:
 800b59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b59e:	4614      	mov	r4, r2
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <__assert_func+0x2c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	68d8      	ldr	r0, [r3, #12]
 800b5aa:	b14c      	cbz	r4, 800b5c0 <__assert_func+0x24>
 800b5ac:	4b07      	ldr	r3, [pc, #28]	; (800b5cc <__assert_func+0x30>)
 800b5ae:	9100      	str	r1, [sp, #0]
 800b5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5b4:	4906      	ldr	r1, [pc, #24]	; (800b5d0 <__assert_func+0x34>)
 800b5b6:	462b      	mov	r3, r5
 800b5b8:	f000 f844 	bl	800b644 <fiprintf>
 800b5bc:	f000 f854 	bl	800b668 <abort>
 800b5c0:	4b04      	ldr	r3, [pc, #16]	; (800b5d4 <__assert_func+0x38>)
 800b5c2:	461c      	mov	r4, r3
 800b5c4:	e7f3      	b.n	800b5ae <__assert_func+0x12>
 800b5c6:	bf00      	nop
 800b5c8:	20000140 	.word	0x20000140
 800b5cc:	08020937 	.word	0x08020937
 800b5d0:	08020944 	.word	0x08020944
 800b5d4:	08020972 	.word	0x08020972

0800b5d8 <_calloc_r>:
 800b5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5da:	fba1 2402 	umull	r2, r4, r1, r2
 800b5de:	b94c      	cbnz	r4, 800b5f4 <_calloc_r+0x1c>
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	9201      	str	r2, [sp, #4]
 800b5e4:	f7ff f93e 	bl	800a864 <_malloc_r>
 800b5e8:	9a01      	ldr	r2, [sp, #4]
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	b930      	cbnz	r0, 800b5fc <_calloc_r+0x24>
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	b003      	add	sp, #12
 800b5f2:	bd30      	pop	{r4, r5, pc}
 800b5f4:	220c      	movs	r2, #12
 800b5f6:	6002      	str	r2, [r0, #0]
 800b5f8:	2500      	movs	r5, #0
 800b5fa:	e7f8      	b.n	800b5ee <_calloc_r+0x16>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	f7fe f9c1 	bl	8009984 <memset>
 800b602:	e7f4      	b.n	800b5ee <_calloc_r+0x16>

0800b604 <__ascii_mbtowc>:
 800b604:	b082      	sub	sp, #8
 800b606:	b901      	cbnz	r1, 800b60a <__ascii_mbtowc+0x6>
 800b608:	a901      	add	r1, sp, #4
 800b60a:	b142      	cbz	r2, 800b61e <__ascii_mbtowc+0x1a>
 800b60c:	b14b      	cbz	r3, 800b622 <__ascii_mbtowc+0x1e>
 800b60e:	7813      	ldrb	r3, [r2, #0]
 800b610:	600b      	str	r3, [r1, #0]
 800b612:	7812      	ldrb	r2, [r2, #0]
 800b614:	1e10      	subs	r0, r2, #0
 800b616:	bf18      	it	ne
 800b618:	2001      	movne	r0, #1
 800b61a:	b002      	add	sp, #8
 800b61c:	4770      	bx	lr
 800b61e:	4610      	mov	r0, r2
 800b620:	e7fb      	b.n	800b61a <__ascii_mbtowc+0x16>
 800b622:	f06f 0001 	mvn.w	r0, #1
 800b626:	e7f8      	b.n	800b61a <__ascii_mbtowc+0x16>

0800b628 <__ascii_wctomb>:
 800b628:	b149      	cbz	r1, 800b63e <__ascii_wctomb+0x16>
 800b62a:	2aff      	cmp	r2, #255	; 0xff
 800b62c:	bf85      	ittet	hi
 800b62e:	238a      	movhi	r3, #138	; 0x8a
 800b630:	6003      	strhi	r3, [r0, #0]
 800b632:	700a      	strbls	r2, [r1, #0]
 800b634:	f04f 30ff 	movhi.w	r0, #4294967295
 800b638:	bf98      	it	ls
 800b63a:	2001      	movls	r0, #1
 800b63c:	4770      	bx	lr
 800b63e:	4608      	mov	r0, r1
 800b640:	4770      	bx	lr
	...

0800b644 <fiprintf>:
 800b644:	b40e      	push	{r1, r2, r3}
 800b646:	b503      	push	{r0, r1, lr}
 800b648:	4601      	mov	r1, r0
 800b64a:	ab03      	add	r3, sp, #12
 800b64c:	4805      	ldr	r0, [pc, #20]	; (800b664 <fiprintf+0x20>)
 800b64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b652:	6800      	ldr	r0, [r0, #0]
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	f7ff fd37 	bl	800b0c8 <_vfiprintf_r>
 800b65a:	b002      	add	sp, #8
 800b65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b660:	b003      	add	sp, #12
 800b662:	4770      	bx	lr
 800b664:	20000140 	.word	0x20000140

0800b668 <abort>:
 800b668:	b508      	push	{r3, lr}
 800b66a:	2006      	movs	r0, #6
 800b66c:	f000 f82c 	bl	800b6c8 <raise>
 800b670:	2001      	movs	r0, #1
 800b672:	f7f7 fad1 	bl	8002c18 <_exit>

0800b676 <_raise_r>:
 800b676:	291f      	cmp	r1, #31
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4604      	mov	r4, r0
 800b67c:	460d      	mov	r5, r1
 800b67e:	d904      	bls.n	800b68a <_raise_r+0x14>
 800b680:	2316      	movs	r3, #22
 800b682:	6003      	str	r3, [r0, #0]
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	bd38      	pop	{r3, r4, r5, pc}
 800b68a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b68c:	b112      	cbz	r2, 800b694 <_raise_r+0x1e>
 800b68e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b692:	b94b      	cbnz	r3, 800b6a8 <_raise_r+0x32>
 800b694:	4620      	mov	r0, r4
 800b696:	f000 f831 	bl	800b6fc <_getpid_r>
 800b69a:	462a      	mov	r2, r5
 800b69c:	4601      	mov	r1, r0
 800b69e:	4620      	mov	r0, r4
 800b6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6a4:	f000 b818 	b.w	800b6d8 <_kill_r>
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d00a      	beq.n	800b6c2 <_raise_r+0x4c>
 800b6ac:	1c59      	adds	r1, r3, #1
 800b6ae:	d103      	bne.n	800b6b8 <_raise_r+0x42>
 800b6b0:	2316      	movs	r3, #22
 800b6b2:	6003      	str	r3, [r0, #0]
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	e7e7      	b.n	800b688 <_raise_r+0x12>
 800b6b8:	2400      	movs	r4, #0
 800b6ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6be:	4628      	mov	r0, r5
 800b6c0:	4798      	blx	r3
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	e7e0      	b.n	800b688 <_raise_r+0x12>
	...

0800b6c8 <raise>:
 800b6c8:	4b02      	ldr	r3, [pc, #8]	; (800b6d4 <raise+0xc>)
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	f7ff bfd2 	b.w	800b676 <_raise_r>
 800b6d2:	bf00      	nop
 800b6d4:	20000140 	.word	0x20000140

0800b6d8 <_kill_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	; (800b6f8 <_kill_r+0x20>)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	602b      	str	r3, [r5, #0]
 800b6e6:	f7f7 fa87 	bl	8002bf8 <_kill>
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	d102      	bne.n	800b6f4 <_kill_r+0x1c>
 800b6ee:	682b      	ldr	r3, [r5, #0]
 800b6f0:	b103      	cbz	r3, 800b6f4 <_kill_r+0x1c>
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
 800b6f6:	bf00      	nop
 800b6f8:	200025c4 	.word	0x200025c4

0800b6fc <_getpid_r>:
 800b6fc:	f7f7 ba74 	b.w	8002be8 <_getpid>

0800b700 <cos>:
 800b700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b702:	ec53 2b10 	vmov	r2, r3, d0
 800b706:	4826      	ldr	r0, [pc, #152]	; (800b7a0 <cos+0xa0>)
 800b708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b70c:	4281      	cmp	r1, r0
 800b70e:	dc06      	bgt.n	800b71e <cos+0x1e>
 800b710:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b798 <cos+0x98>
 800b714:	b005      	add	sp, #20
 800b716:	f85d eb04 	ldr.w	lr, [sp], #4
 800b71a:	f000 b8ad 	b.w	800b878 <__kernel_cos>
 800b71e:	4821      	ldr	r0, [pc, #132]	; (800b7a4 <cos+0xa4>)
 800b720:	4281      	cmp	r1, r0
 800b722:	dd09      	ble.n	800b738 <cos+0x38>
 800b724:	ee10 0a10 	vmov	r0, s0
 800b728:	4619      	mov	r1, r3
 800b72a:	f7f4 fe2d 	bl	8000388 <__aeabi_dsub>
 800b72e:	ec41 0b10 	vmov	d0, r0, r1
 800b732:	b005      	add	sp, #20
 800b734:	f85d fb04 	ldr.w	pc, [sp], #4
 800b738:	4668      	mov	r0, sp
 800b73a:	f000 fa25 	bl	800bb88 <__ieee754_rem_pio2>
 800b73e:	f000 0003 	and.w	r0, r0, #3
 800b742:	2801      	cmp	r0, #1
 800b744:	d00b      	beq.n	800b75e <cos+0x5e>
 800b746:	2802      	cmp	r0, #2
 800b748:	d016      	beq.n	800b778 <cos+0x78>
 800b74a:	b9e0      	cbnz	r0, 800b786 <cos+0x86>
 800b74c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b750:	ed9d 0b00 	vldr	d0, [sp]
 800b754:	f000 f890 	bl	800b878 <__kernel_cos>
 800b758:	ec51 0b10 	vmov	r0, r1, d0
 800b75c:	e7e7      	b.n	800b72e <cos+0x2e>
 800b75e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b762:	ed9d 0b00 	vldr	d0, [sp]
 800b766:	f000 f94f 	bl	800ba08 <__kernel_sin>
 800b76a:	ec53 2b10 	vmov	r2, r3, d0
 800b76e:	ee10 0a10 	vmov	r0, s0
 800b772:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b776:	e7da      	b.n	800b72e <cos+0x2e>
 800b778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b77c:	ed9d 0b00 	vldr	d0, [sp]
 800b780:	f000 f87a 	bl	800b878 <__kernel_cos>
 800b784:	e7f1      	b.n	800b76a <cos+0x6a>
 800b786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b78a:	ed9d 0b00 	vldr	d0, [sp]
 800b78e:	2001      	movs	r0, #1
 800b790:	f000 f93a 	bl	800ba08 <__kernel_sin>
 800b794:	e7e0      	b.n	800b758 <cos+0x58>
 800b796:	bf00      	nop
	...
 800b7a0:	3fe921fb 	.word	0x3fe921fb
 800b7a4:	7fefffff 	.word	0x7fefffff

0800b7a8 <sqrtf>:
 800b7a8:	b508      	push	{r3, lr}
 800b7aa:	ed2d 8b02 	vpush	{d8}
 800b7ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b7b2:	f000 f85d 	bl	800b870 <__ieee754_sqrtf>
 800b7b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7be:	d60c      	bvs.n	800b7da <sqrtf+0x32>
 800b7c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b7e0 <sqrtf+0x38>
 800b7c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7cc:	d505      	bpl.n	800b7da <sqrtf+0x32>
 800b7ce:	f7fe f92b 	bl	8009a28 <__errno>
 800b7d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b7d6:	2321      	movs	r3, #33	; 0x21
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	ecbd 8b02 	vpop	{d8}
 800b7de:	bd08      	pop	{r3, pc}
 800b7e0:	00000000 	.word	0x00000000

0800b7e4 <sinf>:
 800b7e4:	ee10 3a10 	vmov	r3, s0
 800b7e8:	b507      	push	{r0, r1, r2, lr}
 800b7ea:	4a1f      	ldr	r2, [pc, #124]	; (800b868 <sinf+0x84>)
 800b7ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	dc07      	bgt.n	800b804 <sinf+0x20>
 800b7f4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b86c <sinf+0x88>
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	b003      	add	sp, #12
 800b7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b800:	f000 bc30 	b.w	800c064 <__kernel_sinf>
 800b804:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b808:	db04      	blt.n	800b814 <sinf+0x30>
 800b80a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b80e:	b003      	add	sp, #12
 800b810:	f85d fb04 	ldr.w	pc, [sp], #4
 800b814:	4668      	mov	r0, sp
 800b816:	f000 fc6d 	bl	800c0f4 <__ieee754_rem_pio2f>
 800b81a:	f000 0003 	and.w	r0, r0, #3
 800b81e:	2801      	cmp	r0, #1
 800b820:	d00a      	beq.n	800b838 <sinf+0x54>
 800b822:	2802      	cmp	r0, #2
 800b824:	d00f      	beq.n	800b846 <sinf+0x62>
 800b826:	b9c0      	cbnz	r0, 800b85a <sinf+0x76>
 800b828:	eddd 0a01 	vldr	s1, [sp, #4]
 800b82c:	ed9d 0a00 	vldr	s0, [sp]
 800b830:	2001      	movs	r0, #1
 800b832:	f000 fc17 	bl	800c064 <__kernel_sinf>
 800b836:	e7ea      	b.n	800b80e <sinf+0x2a>
 800b838:	eddd 0a01 	vldr	s1, [sp, #4]
 800b83c:	ed9d 0a00 	vldr	s0, [sp]
 800b840:	f000 fbb2 	bl	800bfa8 <__kernel_cosf>
 800b844:	e7e3      	b.n	800b80e <sinf+0x2a>
 800b846:	eddd 0a01 	vldr	s1, [sp, #4]
 800b84a:	ed9d 0a00 	vldr	s0, [sp]
 800b84e:	2001      	movs	r0, #1
 800b850:	f000 fc08 	bl	800c064 <__kernel_sinf>
 800b854:	eeb1 0a40 	vneg.f32	s0, s0
 800b858:	e7d9      	b.n	800b80e <sinf+0x2a>
 800b85a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b85e:	ed9d 0a00 	vldr	s0, [sp]
 800b862:	f000 fba1 	bl	800bfa8 <__kernel_cosf>
 800b866:	e7f5      	b.n	800b854 <sinf+0x70>
 800b868:	3f490fd8 	.word	0x3f490fd8
 800b86c:	00000000 	.word	0x00000000

0800b870 <__ieee754_sqrtf>:
 800b870:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b874:	4770      	bx	lr
	...

0800b878 <__kernel_cos>:
 800b878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	ec57 6b10 	vmov	r6, r7, d0
 800b880:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b884:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b888:	ed8d 1b00 	vstr	d1, [sp]
 800b88c:	da07      	bge.n	800b89e <__kernel_cos+0x26>
 800b88e:	ee10 0a10 	vmov	r0, s0
 800b892:	4639      	mov	r1, r7
 800b894:	f7f5 f9e0 	bl	8000c58 <__aeabi_d2iz>
 800b898:	2800      	cmp	r0, #0
 800b89a:	f000 8088 	beq.w	800b9ae <__kernel_cos+0x136>
 800b89e:	4632      	mov	r2, r6
 800b8a0:	463b      	mov	r3, r7
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	f7f4 ff27 	bl	80006f8 <__aeabi_dmul>
 800b8aa:	4b51      	ldr	r3, [pc, #324]	; (800b9f0 <__kernel_cos+0x178>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	f7f4 ff21 	bl	80006f8 <__aeabi_dmul>
 800b8b6:	a340      	add	r3, pc, #256	; (adr r3, 800b9b8 <__kernel_cos+0x140>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	4682      	mov	sl, r0
 800b8be:	468b      	mov	fp, r1
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	f7f4 ff18 	bl	80006f8 <__aeabi_dmul>
 800b8c8:	a33d      	add	r3, pc, #244	; (adr r3, 800b9c0 <__kernel_cos+0x148>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f7f4 fd5d 	bl	800038c <__adddf3>
 800b8d2:	4622      	mov	r2, r4
 800b8d4:	462b      	mov	r3, r5
 800b8d6:	f7f4 ff0f 	bl	80006f8 <__aeabi_dmul>
 800b8da:	a33b      	add	r3, pc, #236	; (adr r3, 800b9c8 <__kernel_cos+0x150>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fd52 	bl	8000388 <__aeabi_dsub>
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	f7f4 ff06 	bl	80006f8 <__aeabi_dmul>
 800b8ec:	a338      	add	r3, pc, #224	; (adr r3, 800b9d0 <__kernel_cos+0x158>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f7f4 fd4b 	bl	800038c <__adddf3>
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	f7f4 fefd 	bl	80006f8 <__aeabi_dmul>
 800b8fe:	a336      	add	r3, pc, #216	; (adr r3, 800b9d8 <__kernel_cos+0x160>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f4 fd40 	bl	8000388 <__aeabi_dsub>
 800b908:	4622      	mov	r2, r4
 800b90a:	462b      	mov	r3, r5
 800b90c:	f7f4 fef4 	bl	80006f8 <__aeabi_dmul>
 800b910:	a333      	add	r3, pc, #204	; (adr r3, 800b9e0 <__kernel_cos+0x168>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fd39 	bl	800038c <__adddf3>
 800b91a:	4622      	mov	r2, r4
 800b91c:	462b      	mov	r3, r5
 800b91e:	f7f4 feeb 	bl	80006f8 <__aeabi_dmul>
 800b922:	4622      	mov	r2, r4
 800b924:	462b      	mov	r3, r5
 800b926:	f7f4 fee7 	bl	80006f8 <__aeabi_dmul>
 800b92a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b92e:	4604      	mov	r4, r0
 800b930:	460d      	mov	r5, r1
 800b932:	4630      	mov	r0, r6
 800b934:	4639      	mov	r1, r7
 800b936:	f7f4 fedf 	bl	80006f8 <__aeabi_dmul>
 800b93a:	460b      	mov	r3, r1
 800b93c:	4602      	mov	r2, r0
 800b93e:	4629      	mov	r1, r5
 800b940:	4620      	mov	r0, r4
 800b942:	f7f4 fd21 	bl	8000388 <__aeabi_dsub>
 800b946:	4b2b      	ldr	r3, [pc, #172]	; (800b9f4 <__kernel_cos+0x17c>)
 800b948:	4598      	cmp	r8, r3
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	dc10      	bgt.n	800b972 <__kernel_cos+0xfa>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4650      	mov	r0, sl
 800b956:	4659      	mov	r1, fp
 800b958:	f7f4 fd16 	bl	8000388 <__aeabi_dsub>
 800b95c:	460b      	mov	r3, r1
 800b95e:	4926      	ldr	r1, [pc, #152]	; (800b9f8 <__kernel_cos+0x180>)
 800b960:	4602      	mov	r2, r0
 800b962:	2000      	movs	r0, #0
 800b964:	f7f4 fd10 	bl	8000388 <__aeabi_dsub>
 800b968:	ec41 0b10 	vmov	d0, r0, r1
 800b96c:	b003      	add	sp, #12
 800b96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b972:	4b22      	ldr	r3, [pc, #136]	; (800b9fc <__kernel_cos+0x184>)
 800b974:	4920      	ldr	r1, [pc, #128]	; (800b9f8 <__kernel_cos+0x180>)
 800b976:	4598      	cmp	r8, r3
 800b978:	bfcc      	ite	gt
 800b97a:	4d21      	ldrgt	r5, [pc, #132]	; (800ba00 <__kernel_cos+0x188>)
 800b97c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b980:	2400      	movs	r4, #0
 800b982:	4622      	mov	r2, r4
 800b984:	462b      	mov	r3, r5
 800b986:	2000      	movs	r0, #0
 800b988:	f7f4 fcfe 	bl	8000388 <__aeabi_dsub>
 800b98c:	4622      	mov	r2, r4
 800b98e:	4680      	mov	r8, r0
 800b990:	4689      	mov	r9, r1
 800b992:	462b      	mov	r3, r5
 800b994:	4650      	mov	r0, sl
 800b996:	4659      	mov	r1, fp
 800b998:	f7f4 fcf6 	bl	8000388 <__aeabi_dsub>
 800b99c:	4632      	mov	r2, r6
 800b99e:	463b      	mov	r3, r7
 800b9a0:	f7f4 fcf2 	bl	8000388 <__aeabi_dsub>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	e7da      	b.n	800b964 <__kernel_cos+0xec>
 800b9ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b9e8 <__kernel_cos+0x170>
 800b9b2:	e7db      	b.n	800b96c <__kernel_cos+0xf4>
 800b9b4:	f3af 8000 	nop.w
 800b9b8:	be8838d4 	.word	0xbe8838d4
 800b9bc:	bda8fae9 	.word	0xbda8fae9
 800b9c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b9c4:	3e21ee9e 	.word	0x3e21ee9e
 800b9c8:	809c52ad 	.word	0x809c52ad
 800b9cc:	3e927e4f 	.word	0x3e927e4f
 800b9d0:	19cb1590 	.word	0x19cb1590
 800b9d4:	3efa01a0 	.word	0x3efa01a0
 800b9d8:	16c15177 	.word	0x16c15177
 800b9dc:	3f56c16c 	.word	0x3f56c16c
 800b9e0:	5555554c 	.word	0x5555554c
 800b9e4:	3fa55555 	.word	0x3fa55555
 800b9e8:	00000000 	.word	0x00000000
 800b9ec:	3ff00000 	.word	0x3ff00000
 800b9f0:	3fe00000 	.word	0x3fe00000
 800b9f4:	3fd33332 	.word	0x3fd33332
 800b9f8:	3ff00000 	.word	0x3ff00000
 800b9fc:	3fe90000 	.word	0x3fe90000
 800ba00:	3fd20000 	.word	0x3fd20000
 800ba04:	00000000 	.word	0x00000000

0800ba08 <__kernel_sin>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	ed2d 8b04 	vpush	{d8-d9}
 800ba10:	eeb0 8a41 	vmov.f32	s16, s2
 800ba14:	eef0 8a61 	vmov.f32	s17, s3
 800ba18:	ec55 4b10 	vmov	r4, r5, d0
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ba26:	9001      	str	r0, [sp, #4]
 800ba28:	da06      	bge.n	800ba38 <__kernel_sin+0x30>
 800ba2a:	ee10 0a10 	vmov	r0, s0
 800ba2e:	4629      	mov	r1, r5
 800ba30:	f7f5 f912 	bl	8000c58 <__aeabi_d2iz>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d051      	beq.n	800badc <__kernel_sin+0xd4>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f4 fe5a 	bl	80006f8 <__aeabi_dmul>
 800ba44:	4682      	mov	sl, r0
 800ba46:	468b      	mov	fp, r1
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f4 fe52 	bl	80006f8 <__aeabi_dmul>
 800ba54:	a341      	add	r3, pc, #260	; (adr r3, 800bb5c <__kernel_sin+0x154>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	4680      	mov	r8, r0
 800ba5c:	4689      	mov	r9, r1
 800ba5e:	4650      	mov	r0, sl
 800ba60:	4659      	mov	r1, fp
 800ba62:	f7f4 fe49 	bl	80006f8 <__aeabi_dmul>
 800ba66:	a33f      	add	r3, pc, #252	; (adr r3, 800bb64 <__kernel_sin+0x15c>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fc8c 	bl	8000388 <__aeabi_dsub>
 800ba70:	4652      	mov	r2, sl
 800ba72:	465b      	mov	r3, fp
 800ba74:	f7f4 fe40 	bl	80006f8 <__aeabi_dmul>
 800ba78:	a33c      	add	r3, pc, #240	; (adr r3, 800bb6c <__kernel_sin+0x164>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f4 fc85 	bl	800038c <__adddf3>
 800ba82:	4652      	mov	r2, sl
 800ba84:	465b      	mov	r3, fp
 800ba86:	f7f4 fe37 	bl	80006f8 <__aeabi_dmul>
 800ba8a:	a33a      	add	r3, pc, #232	; (adr r3, 800bb74 <__kernel_sin+0x16c>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f4 fc7a 	bl	8000388 <__aeabi_dsub>
 800ba94:	4652      	mov	r2, sl
 800ba96:	465b      	mov	r3, fp
 800ba98:	f7f4 fe2e 	bl	80006f8 <__aeabi_dmul>
 800ba9c:	a337      	add	r3, pc, #220	; (adr r3, 800bb7c <__kernel_sin+0x174>)
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	f7f4 fc73 	bl	800038c <__adddf3>
 800baa6:	9b01      	ldr	r3, [sp, #4]
 800baa8:	4606      	mov	r6, r0
 800baaa:	460f      	mov	r7, r1
 800baac:	b9eb      	cbnz	r3, 800baea <__kernel_sin+0xe2>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4650      	mov	r0, sl
 800bab4:	4659      	mov	r1, fp
 800bab6:	f7f4 fe1f 	bl	80006f8 <__aeabi_dmul>
 800baba:	a325      	add	r3, pc, #148	; (adr r3, 800bb50 <__kernel_sin+0x148>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fc62 	bl	8000388 <__aeabi_dsub>
 800bac4:	4642      	mov	r2, r8
 800bac6:	464b      	mov	r3, r9
 800bac8:	f7f4 fe16 	bl	80006f8 <__aeabi_dmul>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4620      	mov	r0, r4
 800bad2:	4629      	mov	r1, r5
 800bad4:	f7f4 fc5a 	bl	800038c <__adddf3>
 800bad8:	4604      	mov	r4, r0
 800bada:	460d      	mov	r5, r1
 800badc:	ec45 4b10 	vmov	d0, r4, r5
 800bae0:	b003      	add	sp, #12
 800bae2:	ecbd 8b04 	vpop	{d8-d9}
 800bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baea:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <__kernel_sin+0x150>)
 800baec:	ec51 0b18 	vmov	r0, r1, d8
 800baf0:	2200      	movs	r2, #0
 800baf2:	f7f4 fe01 	bl	80006f8 <__aeabi_dmul>
 800baf6:	4632      	mov	r2, r6
 800baf8:	ec41 0b19 	vmov	d9, r0, r1
 800bafc:	463b      	mov	r3, r7
 800bafe:	4640      	mov	r0, r8
 800bb00:	4649      	mov	r1, r9
 800bb02:	f7f4 fdf9 	bl	80006f8 <__aeabi_dmul>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	ec51 0b19 	vmov	r0, r1, d9
 800bb0e:	f7f4 fc3b 	bl	8000388 <__aeabi_dsub>
 800bb12:	4652      	mov	r2, sl
 800bb14:	465b      	mov	r3, fp
 800bb16:	f7f4 fdef 	bl	80006f8 <__aeabi_dmul>
 800bb1a:	ec53 2b18 	vmov	r2, r3, d8
 800bb1e:	f7f4 fc33 	bl	8000388 <__aeabi_dsub>
 800bb22:	a30b      	add	r3, pc, #44	; (adr r3, 800bb50 <__kernel_sin+0x148>)
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	4606      	mov	r6, r0
 800bb2a:	460f      	mov	r7, r1
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f4 fde2 	bl	80006f8 <__aeabi_dmul>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	4630      	mov	r0, r6
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	f7f4 fc26 	bl	800038c <__adddf3>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4620      	mov	r0, r4
 800bb46:	4629      	mov	r1, r5
 800bb48:	f7f4 fc1e 	bl	8000388 <__aeabi_dsub>
 800bb4c:	e7c4      	b.n	800bad8 <__kernel_sin+0xd0>
 800bb4e:	bf00      	nop
 800bb50:	55555549 	.word	0x55555549
 800bb54:	3fc55555 	.word	0x3fc55555
 800bb58:	3fe00000 	.word	0x3fe00000
 800bb5c:	5acfd57c 	.word	0x5acfd57c
 800bb60:	3de5d93a 	.word	0x3de5d93a
 800bb64:	8a2b9ceb 	.word	0x8a2b9ceb
 800bb68:	3e5ae5e6 	.word	0x3e5ae5e6
 800bb6c:	57b1fe7d 	.word	0x57b1fe7d
 800bb70:	3ec71de3 	.word	0x3ec71de3
 800bb74:	19c161d5 	.word	0x19c161d5
 800bb78:	3f2a01a0 	.word	0x3f2a01a0
 800bb7c:	1110f8a6 	.word	0x1110f8a6
 800bb80:	3f811111 	.word	0x3f811111
 800bb84:	00000000 	.word	0x00000000

0800bb88 <__ieee754_rem_pio2>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	ed2d 8b02 	vpush	{d8}
 800bb90:	ec55 4b10 	vmov	r4, r5, d0
 800bb94:	4bca      	ldr	r3, [pc, #808]	; (800bec0 <__ieee754_rem_pio2+0x338>)
 800bb96:	b08b      	sub	sp, #44	; 0x2c
 800bb98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bb9c:	4598      	cmp	r8, r3
 800bb9e:	4682      	mov	sl, r0
 800bba0:	9502      	str	r5, [sp, #8]
 800bba2:	dc08      	bgt.n	800bbb6 <__ieee754_rem_pio2+0x2e>
 800bba4:	2200      	movs	r2, #0
 800bba6:	2300      	movs	r3, #0
 800bba8:	ed80 0b00 	vstr	d0, [r0]
 800bbac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bbb0:	f04f 0b00 	mov.w	fp, #0
 800bbb4:	e028      	b.n	800bc08 <__ieee754_rem_pio2+0x80>
 800bbb6:	4bc3      	ldr	r3, [pc, #780]	; (800bec4 <__ieee754_rem_pio2+0x33c>)
 800bbb8:	4598      	cmp	r8, r3
 800bbba:	dc78      	bgt.n	800bcae <__ieee754_rem_pio2+0x126>
 800bbbc:	9b02      	ldr	r3, [sp, #8]
 800bbbe:	4ec2      	ldr	r6, [pc, #776]	; (800bec8 <__ieee754_rem_pio2+0x340>)
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	ee10 0a10 	vmov	r0, s0
 800bbc6:	a3b0      	add	r3, pc, #704	; (adr r3, 800be88 <__ieee754_rem_pio2+0x300>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	4629      	mov	r1, r5
 800bbce:	dd39      	ble.n	800bc44 <__ieee754_rem_pio2+0xbc>
 800bbd0:	f7f4 fbda 	bl	8000388 <__aeabi_dsub>
 800bbd4:	45b0      	cmp	r8, r6
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	460d      	mov	r5, r1
 800bbda:	d01b      	beq.n	800bc14 <__ieee754_rem_pio2+0x8c>
 800bbdc:	a3ac      	add	r3, pc, #688	; (adr r3, 800be90 <__ieee754_rem_pio2+0x308>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	f7f4 fbd1 	bl	8000388 <__aeabi_dsub>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	e9ca 2300 	strd	r2, r3, [sl]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	f7f4 fbc9 	bl	8000388 <__aeabi_dsub>
 800bbf6:	a3a6      	add	r3, pc, #664	; (adr r3, 800be90 <__ieee754_rem_pio2+0x308>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fbc4 	bl	8000388 <__aeabi_dsub>
 800bc00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc04:	f04f 0b01 	mov.w	fp, #1
 800bc08:	4658      	mov	r0, fp
 800bc0a:	b00b      	add	sp, #44	; 0x2c
 800bc0c:	ecbd 8b02 	vpop	{d8}
 800bc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc14:	a3a0      	add	r3, pc, #640	; (adr r3, 800be98 <__ieee754_rem_pio2+0x310>)
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	f7f4 fbb5 	bl	8000388 <__aeabi_dsub>
 800bc1e:	a3a0      	add	r3, pc, #640	; (adr r3, 800bea0 <__ieee754_rem_pio2+0x318>)
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	f7f4 fbae 	bl	8000388 <__aeabi_dsub>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	e9ca 2300 	strd	r2, r3, [sl]
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fba6 	bl	8000388 <__aeabi_dsub>
 800bc3c:	a398      	add	r3, pc, #608	; (adr r3, 800bea0 <__ieee754_rem_pio2+0x318>)
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	e7db      	b.n	800bbfc <__ieee754_rem_pio2+0x74>
 800bc44:	f7f4 fba2 	bl	800038c <__adddf3>
 800bc48:	45b0      	cmp	r8, r6
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	460d      	mov	r5, r1
 800bc4e:	d016      	beq.n	800bc7e <__ieee754_rem_pio2+0xf6>
 800bc50:	a38f      	add	r3, pc, #572	; (adr r3, 800be90 <__ieee754_rem_pio2+0x308>)
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f7f4 fb99 	bl	800038c <__adddf3>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	e9ca 2300 	strd	r2, r3, [sl]
 800bc62:	4620      	mov	r0, r4
 800bc64:	4629      	mov	r1, r5
 800bc66:	f7f4 fb8f 	bl	8000388 <__aeabi_dsub>
 800bc6a:	a389      	add	r3, pc, #548	; (adr r3, 800be90 <__ieee754_rem_pio2+0x308>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f7f4 fb8c 	bl	800038c <__adddf3>
 800bc74:	f04f 3bff 	mov.w	fp, #4294967295
 800bc78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc7c:	e7c4      	b.n	800bc08 <__ieee754_rem_pio2+0x80>
 800bc7e:	a386      	add	r3, pc, #536	; (adr r3, 800be98 <__ieee754_rem_pio2+0x310>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 fb82 	bl	800038c <__adddf3>
 800bc88:	a385      	add	r3, pc, #532	; (adr r3, 800bea0 <__ieee754_rem_pio2+0x318>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	4604      	mov	r4, r0
 800bc90:	460d      	mov	r5, r1
 800bc92:	f7f4 fb7b 	bl	800038c <__adddf3>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	e9ca 2300 	strd	r2, r3, [sl]
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 fb71 	bl	8000388 <__aeabi_dsub>
 800bca6:	a37e      	add	r3, pc, #504	; (adr r3, 800bea0 <__ieee754_rem_pio2+0x318>)
 800bca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcac:	e7e0      	b.n	800bc70 <__ieee754_rem_pio2+0xe8>
 800bcae:	4b87      	ldr	r3, [pc, #540]	; (800becc <__ieee754_rem_pio2+0x344>)
 800bcb0:	4598      	cmp	r8, r3
 800bcb2:	f300 80d8 	bgt.w	800be66 <__ieee754_rem_pio2+0x2de>
 800bcb6:	f000 f96d 	bl	800bf94 <fabs>
 800bcba:	ec55 4b10 	vmov	r4, r5, d0
 800bcbe:	ee10 0a10 	vmov	r0, s0
 800bcc2:	a379      	add	r3, pc, #484	; (adr r3, 800bea8 <__ieee754_rem_pio2+0x320>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 fd15 	bl	80006f8 <__aeabi_dmul>
 800bcce:	4b80      	ldr	r3, [pc, #512]	; (800bed0 <__ieee754_rem_pio2+0x348>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f7f4 fb5b 	bl	800038c <__adddf3>
 800bcd6:	f7f4 ffbf 	bl	8000c58 <__aeabi_d2iz>
 800bcda:	4683      	mov	fp, r0
 800bcdc:	f7f4 fca2 	bl	8000624 <__aeabi_i2d>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	ec43 2b18 	vmov	d8, r2, r3
 800bce8:	a367      	add	r3, pc, #412	; (adr r3, 800be88 <__ieee754_rem_pio2+0x300>)
 800bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcee:	f7f4 fd03 	bl	80006f8 <__aeabi_dmul>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	f7f4 fb45 	bl	8000388 <__aeabi_dsub>
 800bcfe:	a364      	add	r3, pc, #400	; (adr r3, 800be90 <__ieee754_rem_pio2+0x308>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	ec51 0b18 	vmov	r0, r1, d8
 800bd0c:	f7f4 fcf4 	bl	80006f8 <__aeabi_dmul>
 800bd10:	f1bb 0f1f 	cmp.w	fp, #31
 800bd14:	4604      	mov	r4, r0
 800bd16:	460d      	mov	r5, r1
 800bd18:	dc0d      	bgt.n	800bd36 <__ieee754_rem_pio2+0x1ae>
 800bd1a:	4b6e      	ldr	r3, [pc, #440]	; (800bed4 <__ieee754_rem_pio2+0x34c>)
 800bd1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd24:	4543      	cmp	r3, r8
 800bd26:	d006      	beq.n	800bd36 <__ieee754_rem_pio2+0x1ae>
 800bd28:	4622      	mov	r2, r4
 800bd2a:	462b      	mov	r3, r5
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	4639      	mov	r1, r7
 800bd30:	f7f4 fb2a 	bl	8000388 <__aeabi_dsub>
 800bd34:	e00e      	b.n	800bd54 <__ieee754_rem_pio2+0x1cc>
 800bd36:	462b      	mov	r3, r5
 800bd38:	4622      	mov	r2, r4
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	f7f4 fb23 	bl	8000388 <__aeabi_dsub>
 800bd42:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd4c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bd50:	2b10      	cmp	r3, #16
 800bd52:	dc02      	bgt.n	800bd5a <__ieee754_rem_pio2+0x1d2>
 800bd54:	e9ca 0100 	strd	r0, r1, [sl]
 800bd58:	e039      	b.n	800bdce <__ieee754_rem_pio2+0x246>
 800bd5a:	a34f      	add	r3, pc, #316	; (adr r3, 800be98 <__ieee754_rem_pio2+0x310>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	ec51 0b18 	vmov	r0, r1, d8
 800bd64:	f7f4 fcc8 	bl	80006f8 <__aeabi_dmul>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	460d      	mov	r5, r1
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4630      	mov	r0, r6
 800bd72:	4639      	mov	r1, r7
 800bd74:	f7f4 fb08 	bl	8000388 <__aeabi_dsub>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4689      	mov	r9, r1
 800bd80:	4630      	mov	r0, r6
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 fb00 	bl	8000388 <__aeabi_dsub>
 800bd88:	4622      	mov	r2, r4
 800bd8a:	462b      	mov	r3, r5
 800bd8c:	f7f4 fafc 	bl	8000388 <__aeabi_dsub>
 800bd90:	a343      	add	r3, pc, #268	; (adr r3, 800bea0 <__ieee754_rem_pio2+0x318>)
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	4604      	mov	r4, r0
 800bd98:	460d      	mov	r5, r1
 800bd9a:	ec51 0b18 	vmov	r0, r1, d8
 800bd9e:	f7f4 fcab 	bl	80006f8 <__aeabi_dmul>
 800bda2:	4622      	mov	r2, r4
 800bda4:	462b      	mov	r3, r5
 800bda6:	f7f4 faef 	bl	8000388 <__aeabi_dsub>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4604      	mov	r4, r0
 800bdb0:	460d      	mov	r5, r1
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	f7f4 fae7 	bl	8000388 <__aeabi_dsub>
 800bdba:	9a03      	ldr	r2, [sp, #12]
 800bdbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b31      	cmp	r3, #49	; 0x31
 800bdc4:	dc24      	bgt.n	800be10 <__ieee754_rem_pio2+0x288>
 800bdc6:	e9ca 0100 	strd	r0, r1, [sl]
 800bdca:	4646      	mov	r6, r8
 800bdcc:	464f      	mov	r7, r9
 800bdce:	e9da 8900 	ldrd	r8, r9, [sl]
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4642      	mov	r2, r8
 800bdd6:	464b      	mov	r3, r9
 800bdd8:	4639      	mov	r1, r7
 800bdda:	f7f4 fad5 	bl	8000388 <__aeabi_dsub>
 800bdde:	462b      	mov	r3, r5
 800bde0:	4622      	mov	r2, r4
 800bde2:	f7f4 fad1 	bl	8000388 <__aeabi_dsub>
 800bde6:	9b02      	ldr	r3, [sp, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bdee:	f6bf af0b 	bge.w	800bc08 <__ieee754_rem_pio2+0x80>
 800bdf2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bdf6:	f8ca 3004 	str.w	r3, [sl, #4]
 800bdfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdfe:	f8ca 8000 	str.w	r8, [sl]
 800be02:	f8ca 0008 	str.w	r0, [sl, #8]
 800be06:	f8ca 300c 	str.w	r3, [sl, #12]
 800be0a:	f1cb 0b00 	rsb	fp, fp, #0
 800be0e:	e6fb      	b.n	800bc08 <__ieee754_rem_pio2+0x80>
 800be10:	a327      	add	r3, pc, #156	; (adr r3, 800beb0 <__ieee754_rem_pio2+0x328>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	ec51 0b18 	vmov	r0, r1, d8
 800be1a:	f7f4 fc6d 	bl	80006f8 <__aeabi_dmul>
 800be1e:	4604      	mov	r4, r0
 800be20:	460d      	mov	r5, r1
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	4640      	mov	r0, r8
 800be28:	4649      	mov	r1, r9
 800be2a:	f7f4 faad 	bl	8000388 <__aeabi_dsub>
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	4606      	mov	r6, r0
 800be34:	460f      	mov	r7, r1
 800be36:	4640      	mov	r0, r8
 800be38:	4649      	mov	r1, r9
 800be3a:	f7f4 faa5 	bl	8000388 <__aeabi_dsub>
 800be3e:	4622      	mov	r2, r4
 800be40:	462b      	mov	r3, r5
 800be42:	f7f4 faa1 	bl	8000388 <__aeabi_dsub>
 800be46:	a31c      	add	r3, pc, #112	; (adr r3, 800beb8 <__ieee754_rem_pio2+0x330>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	4604      	mov	r4, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	ec51 0b18 	vmov	r0, r1, d8
 800be54:	f7f4 fc50 	bl	80006f8 <__aeabi_dmul>
 800be58:	4622      	mov	r2, r4
 800be5a:	462b      	mov	r3, r5
 800be5c:	f7f4 fa94 	bl	8000388 <__aeabi_dsub>
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	e760      	b.n	800bd28 <__ieee754_rem_pio2+0x1a0>
 800be66:	4b1c      	ldr	r3, [pc, #112]	; (800bed8 <__ieee754_rem_pio2+0x350>)
 800be68:	4598      	cmp	r8, r3
 800be6a:	dd37      	ble.n	800bedc <__ieee754_rem_pio2+0x354>
 800be6c:	ee10 2a10 	vmov	r2, s0
 800be70:	462b      	mov	r3, r5
 800be72:	4620      	mov	r0, r4
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fa87 	bl	8000388 <__aeabi_dsub>
 800be7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be7e:	e9ca 0100 	strd	r0, r1, [sl]
 800be82:	e695      	b.n	800bbb0 <__ieee754_rem_pio2+0x28>
 800be84:	f3af 8000 	nop.w
 800be88:	54400000 	.word	0x54400000
 800be8c:	3ff921fb 	.word	0x3ff921fb
 800be90:	1a626331 	.word	0x1a626331
 800be94:	3dd0b461 	.word	0x3dd0b461
 800be98:	1a600000 	.word	0x1a600000
 800be9c:	3dd0b461 	.word	0x3dd0b461
 800bea0:	2e037073 	.word	0x2e037073
 800bea4:	3ba3198a 	.word	0x3ba3198a
 800bea8:	6dc9c883 	.word	0x6dc9c883
 800beac:	3fe45f30 	.word	0x3fe45f30
 800beb0:	2e000000 	.word	0x2e000000
 800beb4:	3ba3198a 	.word	0x3ba3198a
 800beb8:	252049c1 	.word	0x252049c1
 800bebc:	397b839a 	.word	0x397b839a
 800bec0:	3fe921fb 	.word	0x3fe921fb
 800bec4:	4002d97b 	.word	0x4002d97b
 800bec8:	3ff921fb 	.word	0x3ff921fb
 800becc:	413921fb 	.word	0x413921fb
 800bed0:	3fe00000 	.word	0x3fe00000
 800bed4:	08020a74 	.word	0x08020a74
 800bed8:	7fefffff 	.word	0x7fefffff
 800bedc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800bee0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800bee4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800bee8:	4620      	mov	r0, r4
 800beea:	460d      	mov	r5, r1
 800beec:	f7f4 feb4 	bl	8000c58 <__aeabi_d2iz>
 800bef0:	f7f4 fb98 	bl	8000624 <__aeabi_i2d>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4620      	mov	r0, r4
 800befa:	4629      	mov	r1, r5
 800befc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf00:	f7f4 fa42 	bl	8000388 <__aeabi_dsub>
 800bf04:	4b21      	ldr	r3, [pc, #132]	; (800bf8c <__ieee754_rem_pio2+0x404>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	f7f4 fbf6 	bl	80006f8 <__aeabi_dmul>
 800bf0c:	460d      	mov	r5, r1
 800bf0e:	4604      	mov	r4, r0
 800bf10:	f7f4 fea2 	bl	8000c58 <__aeabi_d2iz>
 800bf14:	f7f4 fb86 	bl	8000624 <__aeabi_i2d>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf24:	f7f4 fa30 	bl	8000388 <__aeabi_dsub>
 800bf28:	4b18      	ldr	r3, [pc, #96]	; (800bf8c <__ieee754_rem_pio2+0x404>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f7f4 fbe4 	bl	80006f8 <__aeabi_dmul>
 800bf30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf34:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800bf38:	2703      	movs	r7, #3
 800bf3a:	2400      	movs	r4, #0
 800bf3c:	2500      	movs	r5, #0
 800bf3e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800bf42:	4622      	mov	r2, r4
 800bf44:	462b      	mov	r3, r5
 800bf46:	46b9      	mov	r9, r7
 800bf48:	3f01      	subs	r7, #1
 800bf4a:	f7f4 fe3d 	bl	8000bc8 <__aeabi_dcmpeq>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d1f5      	bne.n	800bf3e <__ieee754_rem_pio2+0x3b6>
 800bf52:	4b0f      	ldr	r3, [pc, #60]	; (800bf90 <__ieee754_rem_pio2+0x408>)
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	2302      	movs	r3, #2
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	464b      	mov	r3, r9
 800bf5e:	4651      	mov	r1, sl
 800bf60:	a804      	add	r0, sp, #16
 800bf62:	f000 f9fd 	bl	800c360 <__kernel_rem_pio2>
 800bf66:	9b02      	ldr	r3, [sp, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	4683      	mov	fp, r0
 800bf6c:	f6bf ae4c 	bge.w	800bc08 <__ieee754_rem_pio2+0x80>
 800bf70:	e9da 2100 	ldrd	r2, r1, [sl]
 800bf74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf78:	e9ca 2300 	strd	r2, r3, [sl]
 800bf7c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bf80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf84:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bf88:	e73f      	b.n	800be0a <__ieee754_rem_pio2+0x282>
 800bf8a:	bf00      	nop
 800bf8c:	41700000 	.word	0x41700000
 800bf90:	08020af4 	.word	0x08020af4

0800bf94 <fabs>:
 800bf94:	ec51 0b10 	vmov	r0, r1, d0
 800bf98:	ee10 2a10 	vmov	r2, s0
 800bf9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfa0:	ec43 2b10 	vmov	d0, r2, r3
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <__kernel_cosf>:
 800bfa8:	ee10 3a10 	vmov	r3, s0
 800bfac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bfb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfb8:	da05      	bge.n	800bfc6 <__kernel_cosf+0x1e>
 800bfba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bfbe:	ee17 2a90 	vmov	r2, s15
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	d03b      	beq.n	800c03e <__kernel_cosf+0x96>
 800bfc6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bfca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c044 <__kernel_cosf+0x9c>
 800bfce:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800c048 <__kernel_cosf+0xa0>
 800bfd2:	4a1e      	ldr	r2, [pc, #120]	; (800c04c <__kernel_cosf+0xa4>)
 800bfd4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800c050 <__kernel_cosf+0xa8>
 800bfde:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bfe2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800c054 <__kernel_cosf+0xac>
 800bfe6:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bfea:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800c058 <__kernel_cosf+0xb0>
 800bfee:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bff2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800c05c <__kernel_cosf+0xb4>
 800bff6:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bffa:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bffe:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c002:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c006:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00e:	dc04      	bgt.n	800c01a <__kernel_cosf+0x72>
 800c010:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c014:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800c018:	4770      	bx	lr
 800c01a:	4a11      	ldr	r2, [pc, #68]	; (800c060 <__kernel_cosf+0xb8>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	bfda      	itte	le
 800c020:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c024:	ee07 3a10 	vmovle	s14, r3
 800c028:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800c02c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c030:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800c034:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c038:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c03c:	4770      	bx	lr
 800c03e:	eeb0 0a66 	vmov.f32	s0, s13
 800c042:	4770      	bx	lr
 800c044:	ad47d74e 	.word	0xad47d74e
 800c048:	310f74f6 	.word	0x310f74f6
 800c04c:	3e999999 	.word	0x3e999999
 800c050:	b493f27c 	.word	0xb493f27c
 800c054:	37d00d01 	.word	0x37d00d01
 800c058:	bab60b61 	.word	0xbab60b61
 800c05c:	3d2aaaab 	.word	0x3d2aaaab
 800c060:	3f480000 	.word	0x3f480000

0800c064 <__kernel_sinf>:
 800c064:	ee10 3a10 	vmov	r3, s0
 800c068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c06c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c070:	da04      	bge.n	800c07c <__kernel_sinf+0x18>
 800c072:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c076:	ee17 3a90 	vmov	r3, s15
 800c07a:	b35b      	cbz	r3, 800c0d4 <__kernel_sinf+0x70>
 800c07c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c080:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c0d8 <__kernel_sinf+0x74>
 800c084:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c0dc <__kernel_sinf+0x78>
 800c088:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c08c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c0e0 <__kernel_sinf+0x7c>
 800c090:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c094:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c0e4 <__kernel_sinf+0x80>
 800c098:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c09c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c0e8 <__kernel_sinf+0x84>
 800c0a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c0a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c0a8:	b930      	cbnz	r0, 800c0b8 <__kernel_sinf+0x54>
 800c0aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c0ec <__kernel_sinf+0x88>
 800c0ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c0b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c0b6:	4770      	bx	lr
 800c0b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c0bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c0c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c0c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c0c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c0f0 <__kernel_sinf+0x8c>
 800c0cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c0d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	2f2ec9d3 	.word	0x2f2ec9d3
 800c0dc:	b2d72f34 	.word	0xb2d72f34
 800c0e0:	3638ef1b 	.word	0x3638ef1b
 800c0e4:	b9500d01 	.word	0xb9500d01
 800c0e8:	3c088889 	.word	0x3c088889
 800c0ec:	be2aaaab 	.word	0xbe2aaaab
 800c0f0:	3e2aaaab 	.word	0x3e2aaaab

0800c0f4 <__ieee754_rem_pio2f>:
 800c0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0f6:	ee10 6a10 	vmov	r6, s0
 800c0fa:	4b86      	ldr	r3, [pc, #536]	; (800c314 <__ieee754_rem_pio2f+0x220>)
 800c0fc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c100:	429d      	cmp	r5, r3
 800c102:	b087      	sub	sp, #28
 800c104:	4604      	mov	r4, r0
 800c106:	dc05      	bgt.n	800c114 <__ieee754_rem_pio2f+0x20>
 800c108:	2300      	movs	r3, #0
 800c10a:	ed80 0a00 	vstr	s0, [r0]
 800c10e:	6043      	str	r3, [r0, #4]
 800c110:	2000      	movs	r0, #0
 800c112:	e020      	b.n	800c156 <__ieee754_rem_pio2f+0x62>
 800c114:	4b80      	ldr	r3, [pc, #512]	; (800c318 <__ieee754_rem_pio2f+0x224>)
 800c116:	429d      	cmp	r5, r3
 800c118:	dc38      	bgt.n	800c18c <__ieee754_rem_pio2f+0x98>
 800c11a:	2e00      	cmp	r6, #0
 800c11c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c31c <__ieee754_rem_pio2f+0x228>
 800c120:	4b7f      	ldr	r3, [pc, #508]	; (800c320 <__ieee754_rem_pio2f+0x22c>)
 800c122:	f025 050f 	bic.w	r5, r5, #15
 800c126:	dd18      	ble.n	800c15a <__ieee754_rem_pio2f+0x66>
 800c128:	429d      	cmp	r5, r3
 800c12a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c12e:	bf09      	itett	eq
 800c130:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c324 <__ieee754_rem_pio2f+0x230>
 800c134:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c328 <__ieee754_rem_pio2f+0x234>
 800c138:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c13c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c32c <__ieee754_rem_pio2f+0x238>
 800c140:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c144:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c148:	edc0 6a00 	vstr	s13, [r0]
 800c14c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c150:	edc0 7a01 	vstr	s15, [r0, #4]
 800c154:	2001      	movs	r0, #1
 800c156:	b007      	add	sp, #28
 800c158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15a:	429d      	cmp	r5, r3
 800c15c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c160:	bf09      	itett	eq
 800c162:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c324 <__ieee754_rem_pio2f+0x230>
 800c166:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c328 <__ieee754_rem_pio2f+0x234>
 800c16a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c16e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c32c <__ieee754_rem_pio2f+0x238>
 800c172:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c176:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c17a:	edc0 6a00 	vstr	s13, [r0]
 800c17e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c182:	edc0 7a01 	vstr	s15, [r0, #4]
 800c186:	f04f 30ff 	mov.w	r0, #4294967295
 800c18a:	e7e4      	b.n	800c156 <__ieee754_rem_pio2f+0x62>
 800c18c:	4b68      	ldr	r3, [pc, #416]	; (800c330 <__ieee754_rem_pio2f+0x23c>)
 800c18e:	429d      	cmp	r5, r3
 800c190:	dc71      	bgt.n	800c276 <__ieee754_rem_pio2f+0x182>
 800c192:	f000 f8db 	bl	800c34c <fabsf>
 800c196:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c334 <__ieee754_rem_pio2f+0x240>
 800c19a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c19e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c1a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1aa:	ee17 0a90 	vmov	r0, s15
 800c1ae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c31c <__ieee754_rem_pio2f+0x228>
 800c1b2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c1b6:	281f      	cmp	r0, #31
 800c1b8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c328 <__ieee754_rem_pio2f+0x234>
 800c1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1c0:	eeb1 6a47 	vneg.f32	s12, s14
 800c1c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c1c8:	ee16 2a90 	vmov	r2, s13
 800c1cc:	dc1c      	bgt.n	800c208 <__ieee754_rem_pio2f+0x114>
 800c1ce:	495a      	ldr	r1, [pc, #360]	; (800c338 <__ieee754_rem_pio2f+0x244>)
 800c1d0:	1e47      	subs	r7, r0, #1
 800c1d2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c1d6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c1da:	428b      	cmp	r3, r1
 800c1dc:	d014      	beq.n	800c208 <__ieee754_rem_pio2f+0x114>
 800c1de:	6022      	str	r2, [r4, #0]
 800c1e0:	ed94 7a00 	vldr	s14, [r4]
 800c1e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c1e8:	2e00      	cmp	r6, #0
 800c1ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c1ee:	ed84 0a01 	vstr	s0, [r4, #4]
 800c1f2:	dab0      	bge.n	800c156 <__ieee754_rem_pio2f+0x62>
 800c1f4:	eeb1 7a47 	vneg.f32	s14, s14
 800c1f8:	eeb1 0a40 	vneg.f32	s0, s0
 800c1fc:	ed84 7a00 	vstr	s14, [r4]
 800c200:	ed84 0a01 	vstr	s0, [r4, #4]
 800c204:	4240      	negs	r0, r0
 800c206:	e7a6      	b.n	800c156 <__ieee754_rem_pio2f+0x62>
 800c208:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c20c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800c210:	2908      	cmp	r1, #8
 800c212:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c216:	dde2      	ble.n	800c1de <__ieee754_rem_pio2f+0xea>
 800c218:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c324 <__ieee754_rem_pio2f+0x230>
 800c21c:	eef0 6a40 	vmov.f32	s13, s0
 800c220:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c224:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c228:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c22c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c32c <__ieee754_rem_pio2f+0x238>
 800c230:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c234:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c238:	ee15 2a90 	vmov	r2, s11
 800c23c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c240:	1a5b      	subs	r3, r3, r1
 800c242:	2b19      	cmp	r3, #25
 800c244:	dc04      	bgt.n	800c250 <__ieee754_rem_pio2f+0x15c>
 800c246:	edc4 5a00 	vstr	s11, [r4]
 800c24a:	eeb0 0a66 	vmov.f32	s0, s13
 800c24e:	e7c7      	b.n	800c1e0 <__ieee754_rem_pio2f+0xec>
 800c250:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c33c <__ieee754_rem_pio2f+0x248>
 800c254:	eeb0 0a66 	vmov.f32	s0, s13
 800c258:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c25c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c260:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c340 <__ieee754_rem_pio2f+0x24c>
 800c264:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c268:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c26c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c270:	ed84 7a00 	vstr	s14, [r4]
 800c274:	e7b4      	b.n	800c1e0 <__ieee754_rem_pio2f+0xec>
 800c276:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c27a:	db06      	blt.n	800c28a <__ieee754_rem_pio2f+0x196>
 800c27c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c280:	edc0 7a01 	vstr	s15, [r0, #4]
 800c284:	edc0 7a00 	vstr	s15, [r0]
 800c288:	e742      	b.n	800c110 <__ieee754_rem_pio2f+0x1c>
 800c28a:	15ea      	asrs	r2, r5, #23
 800c28c:	3a86      	subs	r2, #134	; 0x86
 800c28e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c29a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c344 <__ieee754_rem_pio2f+0x250>
 800c29e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c2a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2a6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c2aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c2ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c2b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c2b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2ba:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c2be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c2c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ca:	edcd 7a05 	vstr	s15, [sp, #20]
 800c2ce:	d11e      	bne.n	800c30e <__ieee754_rem_pio2f+0x21a>
 800c2d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d8:	bf14      	ite	ne
 800c2da:	2302      	movne	r3, #2
 800c2dc:	2301      	moveq	r3, #1
 800c2de:	491a      	ldr	r1, [pc, #104]	; (800c348 <__ieee754_rem_pio2f+0x254>)
 800c2e0:	9101      	str	r1, [sp, #4]
 800c2e2:	2102      	movs	r1, #2
 800c2e4:	9100      	str	r1, [sp, #0]
 800c2e6:	a803      	add	r0, sp, #12
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	f000 fb87 	bl	800c9fc <__kernel_rem_pio2f>
 800c2ee:	2e00      	cmp	r6, #0
 800c2f0:	f6bf af31 	bge.w	800c156 <__ieee754_rem_pio2f+0x62>
 800c2f4:	edd4 7a00 	vldr	s15, [r4]
 800c2f8:	eef1 7a67 	vneg.f32	s15, s15
 800c2fc:	edc4 7a00 	vstr	s15, [r4]
 800c300:	edd4 7a01 	vldr	s15, [r4, #4]
 800c304:	eef1 7a67 	vneg.f32	s15, s15
 800c308:	edc4 7a01 	vstr	s15, [r4, #4]
 800c30c:	e77a      	b.n	800c204 <__ieee754_rem_pio2f+0x110>
 800c30e:	2303      	movs	r3, #3
 800c310:	e7e5      	b.n	800c2de <__ieee754_rem_pio2f+0x1ea>
 800c312:	bf00      	nop
 800c314:	3f490fd8 	.word	0x3f490fd8
 800c318:	4016cbe3 	.word	0x4016cbe3
 800c31c:	3fc90f80 	.word	0x3fc90f80
 800c320:	3fc90fd0 	.word	0x3fc90fd0
 800c324:	37354400 	.word	0x37354400
 800c328:	37354443 	.word	0x37354443
 800c32c:	2e85a308 	.word	0x2e85a308
 800c330:	43490f80 	.word	0x43490f80
 800c334:	3f22f984 	.word	0x3f22f984
 800c338:	08020bfc 	.word	0x08020bfc
 800c33c:	2e85a300 	.word	0x2e85a300
 800c340:	248d3132 	.word	0x248d3132
 800c344:	43800000 	.word	0x43800000
 800c348:	08020c7c 	.word	0x08020c7c

0800c34c <fabsf>:
 800c34c:	ee10 3a10 	vmov	r3, s0
 800c350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c354:	ee00 3a10 	vmov	s0, r3
 800c358:	4770      	bx	lr
 800c35a:	0000      	movs	r0, r0
 800c35c:	0000      	movs	r0, r0
	...

0800c360 <__kernel_rem_pio2>:
 800c360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	ed2d 8b02 	vpush	{d8}
 800c368:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c36c:	f112 0f14 	cmn.w	r2, #20
 800c370:	9306      	str	r3, [sp, #24]
 800c372:	9104      	str	r1, [sp, #16]
 800c374:	4bc2      	ldr	r3, [pc, #776]	; (800c680 <__kernel_rem_pio2+0x320>)
 800c376:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c378:	9009      	str	r0, [sp, #36]	; 0x24
 800c37a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	9b06      	ldr	r3, [sp, #24]
 800c382:	f103 33ff 	add.w	r3, r3, #4294967295
 800c386:	bfa8      	it	ge
 800c388:	1ed4      	subge	r4, r2, #3
 800c38a:	9305      	str	r3, [sp, #20]
 800c38c:	bfb2      	itee	lt
 800c38e:	2400      	movlt	r4, #0
 800c390:	2318      	movge	r3, #24
 800c392:	fb94 f4f3 	sdivge	r4, r4, r3
 800c396:	f06f 0317 	mvn.w	r3, #23
 800c39a:	fb04 3303 	mla	r3, r4, r3, r3
 800c39e:	eb03 0a02 	add.w	sl, r3, r2
 800c3a2:	9b00      	ldr	r3, [sp, #0]
 800c3a4:	9a05      	ldr	r2, [sp, #20]
 800c3a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c670 <__kernel_rem_pio2+0x310>
 800c3aa:	eb03 0802 	add.w	r8, r3, r2
 800c3ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c3b0:	1aa7      	subs	r7, r4, r2
 800c3b2:	ae20      	add	r6, sp, #128	; 0x80
 800c3b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c3b8:	2500      	movs	r5, #0
 800c3ba:	4545      	cmp	r5, r8
 800c3bc:	dd13      	ble.n	800c3e6 <__kernel_rem_pio2+0x86>
 800c3be:	9b06      	ldr	r3, [sp, #24]
 800c3c0:	aa20      	add	r2, sp, #128	; 0x80
 800c3c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c3c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c3ca:	f04f 0800 	mov.w	r8, #0
 800c3ce:	9b00      	ldr	r3, [sp, #0]
 800c3d0:	4598      	cmp	r8, r3
 800c3d2:	dc31      	bgt.n	800c438 <__kernel_rem_pio2+0xd8>
 800c3d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c670 <__kernel_rem_pio2+0x310>
 800c3d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c3dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c3e0:	462f      	mov	r7, r5
 800c3e2:	2600      	movs	r6, #0
 800c3e4:	e01b      	b.n	800c41e <__kernel_rem_pio2+0xbe>
 800c3e6:	42ef      	cmn	r7, r5
 800c3e8:	d407      	bmi.n	800c3fa <__kernel_rem_pio2+0x9a>
 800c3ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c3ee:	f7f4 f919 	bl	8000624 <__aeabi_i2d>
 800c3f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3f6:	3501      	adds	r5, #1
 800c3f8:	e7df      	b.n	800c3ba <__kernel_rem_pio2+0x5a>
 800c3fa:	ec51 0b18 	vmov	r0, r1, d8
 800c3fe:	e7f8      	b.n	800c3f2 <__kernel_rem_pio2+0x92>
 800c400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c404:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c408:	f7f4 f976 	bl	80006f8 <__aeabi_dmul>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c414:	f7f3 ffba 	bl	800038c <__adddf3>
 800c418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c41c:	3601      	adds	r6, #1
 800c41e:	9b05      	ldr	r3, [sp, #20]
 800c420:	429e      	cmp	r6, r3
 800c422:	f1a7 0708 	sub.w	r7, r7, #8
 800c426:	ddeb      	ble.n	800c400 <__kernel_rem_pio2+0xa0>
 800c428:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c42c:	f108 0801 	add.w	r8, r8, #1
 800c430:	ecab 7b02 	vstmia	fp!, {d7}
 800c434:	3508      	adds	r5, #8
 800c436:	e7ca      	b.n	800c3ce <__kernel_rem_pio2+0x6e>
 800c438:	9b00      	ldr	r3, [sp, #0]
 800c43a:	aa0c      	add	r2, sp, #48	; 0x30
 800c43c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c440:	930b      	str	r3, [sp, #44]	; 0x2c
 800c442:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c444:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c448:	9c00      	ldr	r4, [sp, #0]
 800c44a:	930a      	str	r3, [sp, #40]	; 0x28
 800c44c:	00e3      	lsls	r3, r4, #3
 800c44e:	9308      	str	r3, [sp, #32]
 800c450:	ab98      	add	r3, sp, #608	; 0x260
 800c452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c456:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c45a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c45e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c460:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c464:	46c3      	mov	fp, r8
 800c466:	46a1      	mov	r9, r4
 800c468:	f1b9 0f00 	cmp.w	r9, #0
 800c46c:	f1a5 0508 	sub.w	r5, r5, #8
 800c470:	dc77      	bgt.n	800c562 <__kernel_rem_pio2+0x202>
 800c472:	ec47 6b10 	vmov	d0, r6, r7
 800c476:	4650      	mov	r0, sl
 800c478:	f000 fd32 	bl	800cee0 <scalbn>
 800c47c:	ec57 6b10 	vmov	r6, r7, d0
 800c480:	2200      	movs	r2, #0
 800c482:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c486:	ee10 0a10 	vmov	r0, s0
 800c48a:	4639      	mov	r1, r7
 800c48c:	f7f4 f934 	bl	80006f8 <__aeabi_dmul>
 800c490:	ec41 0b10 	vmov	d0, r0, r1
 800c494:	f000 fe08 	bl	800d0a8 <floor>
 800c498:	4b7a      	ldr	r3, [pc, #488]	; (800c684 <__kernel_rem_pio2+0x324>)
 800c49a:	ec51 0b10 	vmov	r0, r1, d0
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f7f4 f92a 	bl	80006f8 <__aeabi_dmul>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	f7f3 ff6c 	bl	8000388 <__aeabi_dsub>
 800c4b0:	460f      	mov	r7, r1
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	f7f4 fbd0 	bl	8000c58 <__aeabi_d2iz>
 800c4b8:	9002      	str	r0, [sp, #8]
 800c4ba:	f7f4 f8b3 	bl	8000624 <__aeabi_i2d>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	f7f3 ff5f 	bl	8000388 <__aeabi_dsub>
 800c4ca:	f1ba 0f00 	cmp.w	sl, #0
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	dd6d      	ble.n	800c5b0 <__kernel_rem_pio2+0x250>
 800c4d4:	1e61      	subs	r1, r4, #1
 800c4d6:	ab0c      	add	r3, sp, #48	; 0x30
 800c4d8:	9d02      	ldr	r5, [sp, #8]
 800c4da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4de:	f1ca 0018 	rsb	r0, sl, #24
 800c4e2:	fa43 f200 	asr.w	r2, r3, r0
 800c4e6:	4415      	add	r5, r2
 800c4e8:	4082      	lsls	r2, r0
 800c4ea:	1a9b      	subs	r3, r3, r2
 800c4ec:	aa0c      	add	r2, sp, #48	; 0x30
 800c4ee:	9502      	str	r5, [sp, #8]
 800c4f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c4f4:	f1ca 0217 	rsb	r2, sl, #23
 800c4f8:	fa43 fb02 	asr.w	fp, r3, r2
 800c4fc:	f1bb 0f00 	cmp.w	fp, #0
 800c500:	dd65      	ble.n	800c5ce <__kernel_rem_pio2+0x26e>
 800c502:	9b02      	ldr	r3, [sp, #8]
 800c504:	2200      	movs	r2, #0
 800c506:	3301      	adds	r3, #1
 800c508:	9302      	str	r3, [sp, #8]
 800c50a:	4615      	mov	r5, r2
 800c50c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c510:	4294      	cmp	r4, r2
 800c512:	f300 809f 	bgt.w	800c654 <__kernel_rem_pio2+0x2f4>
 800c516:	f1ba 0f00 	cmp.w	sl, #0
 800c51a:	dd07      	ble.n	800c52c <__kernel_rem_pio2+0x1cc>
 800c51c:	f1ba 0f01 	cmp.w	sl, #1
 800c520:	f000 80c1 	beq.w	800c6a6 <__kernel_rem_pio2+0x346>
 800c524:	f1ba 0f02 	cmp.w	sl, #2
 800c528:	f000 80c7 	beq.w	800c6ba <__kernel_rem_pio2+0x35a>
 800c52c:	f1bb 0f02 	cmp.w	fp, #2
 800c530:	d14d      	bne.n	800c5ce <__kernel_rem_pio2+0x26e>
 800c532:	4632      	mov	r2, r6
 800c534:	463b      	mov	r3, r7
 800c536:	4954      	ldr	r1, [pc, #336]	; (800c688 <__kernel_rem_pio2+0x328>)
 800c538:	2000      	movs	r0, #0
 800c53a:	f7f3 ff25 	bl	8000388 <__aeabi_dsub>
 800c53e:	4606      	mov	r6, r0
 800c540:	460f      	mov	r7, r1
 800c542:	2d00      	cmp	r5, #0
 800c544:	d043      	beq.n	800c5ce <__kernel_rem_pio2+0x26e>
 800c546:	4650      	mov	r0, sl
 800c548:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c678 <__kernel_rem_pio2+0x318>
 800c54c:	f000 fcc8 	bl	800cee0 <scalbn>
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	ec53 2b10 	vmov	r2, r3, d0
 800c558:	f7f3 ff16 	bl	8000388 <__aeabi_dsub>
 800c55c:	4606      	mov	r6, r0
 800c55e:	460f      	mov	r7, r1
 800c560:	e035      	b.n	800c5ce <__kernel_rem_pio2+0x26e>
 800c562:	4b4a      	ldr	r3, [pc, #296]	; (800c68c <__kernel_rem_pio2+0x32c>)
 800c564:	2200      	movs	r2, #0
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f4 f8c5 	bl	80006f8 <__aeabi_dmul>
 800c56e:	f7f4 fb73 	bl	8000c58 <__aeabi_d2iz>
 800c572:	f7f4 f857 	bl	8000624 <__aeabi_i2d>
 800c576:	4602      	mov	r2, r0
 800c578:	460b      	mov	r3, r1
 800c57a:	ec43 2b18 	vmov	d8, r2, r3
 800c57e:	4b44      	ldr	r3, [pc, #272]	; (800c690 <__kernel_rem_pio2+0x330>)
 800c580:	2200      	movs	r2, #0
 800c582:	f7f4 f8b9 	bl	80006f8 <__aeabi_dmul>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f3 fefb 	bl	8000388 <__aeabi_dsub>
 800c592:	f7f4 fb61 	bl	8000c58 <__aeabi_d2iz>
 800c596:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c59a:	f84b 0b04 	str.w	r0, [fp], #4
 800c59e:	ec51 0b18 	vmov	r0, r1, d8
 800c5a2:	f7f3 fef3 	bl	800038c <__adddf3>
 800c5a6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	460f      	mov	r7, r1
 800c5ae:	e75b      	b.n	800c468 <__kernel_rem_pio2+0x108>
 800c5b0:	d106      	bne.n	800c5c0 <__kernel_rem_pio2+0x260>
 800c5b2:	1e63      	subs	r3, r4, #1
 800c5b4:	aa0c      	add	r2, sp, #48	; 0x30
 800c5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c5be:	e79d      	b.n	800c4fc <__kernel_rem_pio2+0x19c>
 800c5c0:	4b34      	ldr	r3, [pc, #208]	; (800c694 <__kernel_rem_pio2+0x334>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f7f4 fb1e 	bl	8000c04 <__aeabi_dcmpge>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d140      	bne.n	800c64e <__kernel_rem_pio2+0x2ee>
 800c5cc:	4683      	mov	fp, r0
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	f7f4 faf7 	bl	8000bc8 <__aeabi_dcmpeq>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	f000 80c1 	beq.w	800c762 <__kernel_rem_pio2+0x402>
 800c5e0:	1e65      	subs	r5, r4, #1
 800c5e2:	462b      	mov	r3, r5
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	9900      	ldr	r1, [sp, #0]
 800c5e8:	428b      	cmp	r3, r1
 800c5ea:	da6d      	bge.n	800c6c8 <__kernel_rem_pio2+0x368>
 800c5ec:	2a00      	cmp	r2, #0
 800c5ee:	f000 808a 	beq.w	800c706 <__kernel_rem_pio2+0x3a6>
 800c5f2:	ab0c      	add	r3, sp, #48	; 0x30
 800c5f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c5f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 80ae 	beq.w	800c75e <__kernel_rem_pio2+0x3fe>
 800c602:	4650      	mov	r0, sl
 800c604:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c678 <__kernel_rem_pio2+0x318>
 800c608:	f000 fc6a 	bl	800cee0 <scalbn>
 800c60c:	1c6b      	adds	r3, r5, #1
 800c60e:	00da      	lsls	r2, r3, #3
 800c610:	9205      	str	r2, [sp, #20]
 800c612:	ec57 6b10 	vmov	r6, r7, d0
 800c616:	aa70      	add	r2, sp, #448	; 0x1c0
 800c618:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c68c <__kernel_rem_pio2+0x32c>
 800c61c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c620:	462c      	mov	r4, r5
 800c622:	f04f 0800 	mov.w	r8, #0
 800c626:	2c00      	cmp	r4, #0
 800c628:	f280 80d4 	bge.w	800c7d4 <__kernel_rem_pio2+0x474>
 800c62c:	462c      	mov	r4, r5
 800c62e:	2c00      	cmp	r4, #0
 800c630:	f2c0 8102 	blt.w	800c838 <__kernel_rem_pio2+0x4d8>
 800c634:	4b18      	ldr	r3, [pc, #96]	; (800c698 <__kernel_rem_pio2+0x338>)
 800c636:	461e      	mov	r6, r3
 800c638:	ab70      	add	r3, sp, #448	; 0x1c0
 800c63a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c63e:	1b2b      	subs	r3, r5, r4
 800c640:	f04f 0900 	mov.w	r9, #0
 800c644:	f04f 0a00 	mov.w	sl, #0
 800c648:	2700      	movs	r7, #0
 800c64a:	9306      	str	r3, [sp, #24]
 800c64c:	e0e6      	b.n	800c81c <__kernel_rem_pio2+0x4bc>
 800c64e:	f04f 0b02 	mov.w	fp, #2
 800c652:	e756      	b.n	800c502 <__kernel_rem_pio2+0x1a2>
 800c654:	f8d8 3000 	ldr.w	r3, [r8]
 800c658:	bb05      	cbnz	r5, 800c69c <__kernel_rem_pio2+0x33c>
 800c65a:	b123      	cbz	r3, 800c666 <__kernel_rem_pio2+0x306>
 800c65c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c660:	f8c8 3000 	str.w	r3, [r8]
 800c664:	2301      	movs	r3, #1
 800c666:	3201      	adds	r2, #1
 800c668:	f108 0804 	add.w	r8, r8, #4
 800c66c:	461d      	mov	r5, r3
 800c66e:	e74f      	b.n	800c510 <__kernel_rem_pio2+0x1b0>
	...
 800c67c:	3ff00000 	.word	0x3ff00000
 800c680:	08020fd8 	.word	0x08020fd8
 800c684:	40200000 	.word	0x40200000
 800c688:	3ff00000 	.word	0x3ff00000
 800c68c:	3e700000 	.word	0x3e700000
 800c690:	41700000 	.word	0x41700000
 800c694:	3fe00000 	.word	0x3fe00000
 800c698:	08020f98 	.word	0x08020f98
 800c69c:	1acb      	subs	r3, r1, r3
 800c69e:	f8c8 3000 	str.w	r3, [r8]
 800c6a2:	462b      	mov	r3, r5
 800c6a4:	e7df      	b.n	800c666 <__kernel_rem_pio2+0x306>
 800c6a6:	1e62      	subs	r2, r4, #1
 800c6a8:	ab0c      	add	r3, sp, #48	; 0x30
 800c6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c6b2:	a90c      	add	r1, sp, #48	; 0x30
 800c6b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c6b8:	e738      	b.n	800c52c <__kernel_rem_pio2+0x1cc>
 800c6ba:	1e62      	subs	r2, r4, #1
 800c6bc:	ab0c      	add	r3, sp, #48	; 0x30
 800c6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c6c6:	e7f4      	b.n	800c6b2 <__kernel_rem_pio2+0x352>
 800c6c8:	a90c      	add	r1, sp, #48	; 0x30
 800c6ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	e788      	b.n	800c5e6 <__kernel_rem_pio2+0x286>
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c6da:	2900      	cmp	r1, #0
 800c6dc:	d0fa      	beq.n	800c6d4 <__kernel_rem_pio2+0x374>
 800c6de:	9a08      	ldr	r2, [sp, #32]
 800c6e0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c6e4:	446a      	add	r2, sp
 800c6e6:	3a98      	subs	r2, #152	; 0x98
 800c6e8:	9208      	str	r2, [sp, #32]
 800c6ea:	9a06      	ldr	r2, [sp, #24]
 800c6ec:	a920      	add	r1, sp, #128	; 0x80
 800c6ee:	18a2      	adds	r2, r4, r2
 800c6f0:	18e3      	adds	r3, r4, r3
 800c6f2:	f104 0801 	add.w	r8, r4, #1
 800c6f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c6fa:	9302      	str	r3, [sp, #8]
 800c6fc:	9b02      	ldr	r3, [sp, #8]
 800c6fe:	4543      	cmp	r3, r8
 800c700:	da04      	bge.n	800c70c <__kernel_rem_pio2+0x3ac>
 800c702:	461c      	mov	r4, r3
 800c704:	e6a2      	b.n	800c44c <__kernel_rem_pio2+0xec>
 800c706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c708:	2301      	movs	r3, #1
 800c70a:	e7e4      	b.n	800c6d6 <__kernel_rem_pio2+0x376>
 800c70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c712:	f7f3 ff87 	bl	8000624 <__aeabi_i2d>
 800c716:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71c:	46ab      	mov	fp, r5
 800c71e:	461c      	mov	r4, r3
 800c720:	f04f 0900 	mov.w	r9, #0
 800c724:	2600      	movs	r6, #0
 800c726:	2700      	movs	r7, #0
 800c728:	9b05      	ldr	r3, [sp, #20]
 800c72a:	4599      	cmp	r9, r3
 800c72c:	dd06      	ble.n	800c73c <__kernel_rem_pio2+0x3dc>
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c734:	f108 0801 	add.w	r8, r8, #1
 800c738:	9308      	str	r3, [sp, #32]
 800c73a:	e7df      	b.n	800c6fc <__kernel_rem_pio2+0x39c>
 800c73c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c740:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c744:	f7f3 ffd8 	bl	80006f8 <__aeabi_dmul>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4630      	mov	r0, r6
 800c74e:	4639      	mov	r1, r7
 800c750:	f7f3 fe1c 	bl	800038c <__adddf3>
 800c754:	f109 0901 	add.w	r9, r9, #1
 800c758:	4606      	mov	r6, r0
 800c75a:	460f      	mov	r7, r1
 800c75c:	e7e4      	b.n	800c728 <__kernel_rem_pio2+0x3c8>
 800c75e:	3d01      	subs	r5, #1
 800c760:	e747      	b.n	800c5f2 <__kernel_rem_pio2+0x292>
 800c762:	ec47 6b10 	vmov	d0, r6, r7
 800c766:	f1ca 0000 	rsb	r0, sl, #0
 800c76a:	f000 fbb9 	bl	800cee0 <scalbn>
 800c76e:	ec57 6b10 	vmov	r6, r7, d0
 800c772:	4ba0      	ldr	r3, [pc, #640]	; (800c9f4 <__kernel_rem_pio2+0x694>)
 800c774:	ee10 0a10 	vmov	r0, s0
 800c778:	2200      	movs	r2, #0
 800c77a:	4639      	mov	r1, r7
 800c77c:	f7f4 fa42 	bl	8000c04 <__aeabi_dcmpge>
 800c780:	b1f8      	cbz	r0, 800c7c2 <__kernel_rem_pio2+0x462>
 800c782:	4b9d      	ldr	r3, [pc, #628]	; (800c9f8 <__kernel_rem_pio2+0x698>)
 800c784:	2200      	movs	r2, #0
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	f7f3 ffb5 	bl	80006f8 <__aeabi_dmul>
 800c78e:	f7f4 fa63 	bl	8000c58 <__aeabi_d2iz>
 800c792:	4680      	mov	r8, r0
 800c794:	f7f3 ff46 	bl	8000624 <__aeabi_i2d>
 800c798:	4b96      	ldr	r3, [pc, #600]	; (800c9f4 <__kernel_rem_pio2+0x694>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	f7f3 ffac 	bl	80006f8 <__aeabi_dmul>
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7f3 fdee 	bl	8000388 <__aeabi_dsub>
 800c7ac:	f7f4 fa54 	bl	8000c58 <__aeabi_d2iz>
 800c7b0:	1c65      	adds	r5, r4, #1
 800c7b2:	ab0c      	add	r3, sp, #48	; 0x30
 800c7b4:	f10a 0a18 	add.w	sl, sl, #24
 800c7b8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c7bc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c7c0:	e71f      	b.n	800c602 <__kernel_rem_pio2+0x2a2>
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f4 fa47 	bl	8000c58 <__aeabi_d2iz>
 800c7ca:	ab0c      	add	r3, sp, #48	; 0x30
 800c7cc:	4625      	mov	r5, r4
 800c7ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c7d2:	e716      	b.n	800c602 <__kernel_rem_pio2+0x2a2>
 800c7d4:	ab0c      	add	r3, sp, #48	; 0x30
 800c7d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c7da:	f7f3 ff23 	bl	8000624 <__aeabi_i2d>
 800c7de:	4632      	mov	r2, r6
 800c7e0:	463b      	mov	r3, r7
 800c7e2:	f7f3 ff89 	bl	80006f8 <__aeabi_dmul>
 800c7e6:	4642      	mov	r2, r8
 800c7e8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c7ec:	464b      	mov	r3, r9
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	f7f3 ff81 	bl	80006f8 <__aeabi_dmul>
 800c7f6:	3c01      	subs	r4, #1
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	460f      	mov	r7, r1
 800c7fc:	e713      	b.n	800c626 <__kernel_rem_pio2+0x2c6>
 800c7fe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c802:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c806:	f7f3 ff77 	bl	80006f8 <__aeabi_dmul>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4648      	mov	r0, r9
 800c810:	4651      	mov	r1, sl
 800c812:	f7f3 fdbb 	bl	800038c <__adddf3>
 800c816:	3701      	adds	r7, #1
 800c818:	4681      	mov	r9, r0
 800c81a:	468a      	mov	sl, r1
 800c81c:	9b00      	ldr	r3, [sp, #0]
 800c81e:	429f      	cmp	r7, r3
 800c820:	dc02      	bgt.n	800c828 <__kernel_rem_pio2+0x4c8>
 800c822:	9b06      	ldr	r3, [sp, #24]
 800c824:	429f      	cmp	r7, r3
 800c826:	ddea      	ble.n	800c7fe <__kernel_rem_pio2+0x49e>
 800c828:	9a06      	ldr	r2, [sp, #24]
 800c82a:	ab48      	add	r3, sp, #288	; 0x120
 800c82c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c830:	e9c6 9a00 	strd	r9, sl, [r6]
 800c834:	3c01      	subs	r4, #1
 800c836:	e6fa      	b.n	800c62e <__kernel_rem_pio2+0x2ce>
 800c838:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	dc0b      	bgt.n	800c856 <__kernel_rem_pio2+0x4f6>
 800c83e:	2b00      	cmp	r3, #0
 800c840:	dc39      	bgt.n	800c8b6 <__kernel_rem_pio2+0x556>
 800c842:	d05d      	beq.n	800c900 <__kernel_rem_pio2+0x5a0>
 800c844:	9b02      	ldr	r3, [sp, #8]
 800c846:	f003 0007 	and.w	r0, r3, #7
 800c84a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c84e:	ecbd 8b02 	vpop	{d8}
 800c852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c856:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c858:	2b03      	cmp	r3, #3
 800c85a:	d1f3      	bne.n	800c844 <__kernel_rem_pio2+0x4e4>
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	9500      	str	r5, [sp, #0]
 800c860:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c864:	eb0d 0403 	add.w	r4, sp, r3
 800c868:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c86c:	46a2      	mov	sl, r4
 800c86e:	9b00      	ldr	r3, [sp, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f1aa 0a08 	sub.w	sl, sl, #8
 800c876:	dc69      	bgt.n	800c94c <__kernel_rem_pio2+0x5ec>
 800c878:	46aa      	mov	sl, r5
 800c87a:	f1ba 0f01 	cmp.w	sl, #1
 800c87e:	f1a4 0408 	sub.w	r4, r4, #8
 800c882:	f300 8083 	bgt.w	800c98c <__kernel_rem_pio2+0x62c>
 800c886:	9c05      	ldr	r4, [sp, #20]
 800c888:	ab48      	add	r3, sp, #288	; 0x120
 800c88a:	441c      	add	r4, r3
 800c88c:	2000      	movs	r0, #0
 800c88e:	2100      	movs	r1, #0
 800c890:	2d01      	cmp	r5, #1
 800c892:	f300 809a 	bgt.w	800c9ca <__kernel_rem_pio2+0x66a>
 800c896:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c89a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c89e:	f1bb 0f00 	cmp.w	fp, #0
 800c8a2:	f040 8098 	bne.w	800c9d6 <__kernel_rem_pio2+0x676>
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	e9c3 7800 	strd	r7, r8, [r3]
 800c8ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c8b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c8b4:	e7c6      	b.n	800c844 <__kernel_rem_pio2+0x4e4>
 800c8b6:	9e05      	ldr	r6, [sp, #20]
 800c8b8:	ab48      	add	r3, sp, #288	; 0x120
 800c8ba:	441e      	add	r6, r3
 800c8bc:	462c      	mov	r4, r5
 800c8be:	2000      	movs	r0, #0
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	2c00      	cmp	r4, #0
 800c8c4:	da33      	bge.n	800c92e <__kernel_rem_pio2+0x5ce>
 800c8c6:	f1bb 0f00 	cmp.w	fp, #0
 800c8ca:	d036      	beq.n	800c93a <__kernel_rem_pio2+0x5da>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8d2:	9c04      	ldr	r4, [sp, #16]
 800c8d4:	e9c4 2300 	strd	r2, r3, [r4]
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c8e0:	f7f3 fd52 	bl	8000388 <__aeabi_dsub>
 800c8e4:	ae4a      	add	r6, sp, #296	; 0x128
 800c8e6:	2401      	movs	r4, #1
 800c8e8:	42a5      	cmp	r5, r4
 800c8ea:	da29      	bge.n	800c940 <__kernel_rem_pio2+0x5e0>
 800c8ec:	f1bb 0f00 	cmp.w	fp, #0
 800c8f0:	d002      	beq.n	800c8f8 <__kernel_rem_pio2+0x598>
 800c8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	9b04      	ldr	r3, [sp, #16]
 800c8fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c8fe:	e7a1      	b.n	800c844 <__kernel_rem_pio2+0x4e4>
 800c900:	9c05      	ldr	r4, [sp, #20]
 800c902:	ab48      	add	r3, sp, #288	; 0x120
 800c904:	441c      	add	r4, r3
 800c906:	2000      	movs	r0, #0
 800c908:	2100      	movs	r1, #0
 800c90a:	2d00      	cmp	r5, #0
 800c90c:	da09      	bge.n	800c922 <__kernel_rem_pio2+0x5c2>
 800c90e:	f1bb 0f00 	cmp.w	fp, #0
 800c912:	d002      	beq.n	800c91a <__kernel_rem_pio2+0x5ba>
 800c914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c918:	4619      	mov	r1, r3
 800c91a:	9b04      	ldr	r3, [sp, #16]
 800c91c:	e9c3 0100 	strd	r0, r1, [r3]
 800c920:	e790      	b.n	800c844 <__kernel_rem_pio2+0x4e4>
 800c922:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c926:	f7f3 fd31 	bl	800038c <__adddf3>
 800c92a:	3d01      	subs	r5, #1
 800c92c:	e7ed      	b.n	800c90a <__kernel_rem_pio2+0x5aa>
 800c92e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c932:	f7f3 fd2b 	bl	800038c <__adddf3>
 800c936:	3c01      	subs	r4, #1
 800c938:	e7c3      	b.n	800c8c2 <__kernel_rem_pio2+0x562>
 800c93a:	4602      	mov	r2, r0
 800c93c:	460b      	mov	r3, r1
 800c93e:	e7c8      	b.n	800c8d2 <__kernel_rem_pio2+0x572>
 800c940:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c944:	f7f3 fd22 	bl	800038c <__adddf3>
 800c948:	3401      	adds	r4, #1
 800c94a:	e7cd      	b.n	800c8e8 <__kernel_rem_pio2+0x588>
 800c94c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c950:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c954:	9b00      	ldr	r3, [sp, #0]
 800c956:	3b01      	subs	r3, #1
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	4632      	mov	r2, r6
 800c95c:	463b      	mov	r3, r7
 800c95e:	4640      	mov	r0, r8
 800c960:	4649      	mov	r1, r9
 800c962:	f7f3 fd13 	bl	800038c <__adddf3>
 800c966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	4640      	mov	r0, r8
 800c970:	4649      	mov	r1, r9
 800c972:	f7f3 fd09 	bl	8000388 <__aeabi_dsub>
 800c976:	4632      	mov	r2, r6
 800c978:	463b      	mov	r3, r7
 800c97a:	f7f3 fd07 	bl	800038c <__adddf3>
 800c97e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c982:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c986:	ed8a 7b00 	vstr	d7, [sl]
 800c98a:	e770      	b.n	800c86e <__kernel_rem_pio2+0x50e>
 800c98c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c990:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c994:	4640      	mov	r0, r8
 800c996:	4632      	mov	r2, r6
 800c998:	463b      	mov	r3, r7
 800c99a:	4649      	mov	r1, r9
 800c99c:	f7f3 fcf6 	bl	800038c <__adddf3>
 800c9a0:	e9cd 0100 	strd	r0, r1, [sp]
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4640      	mov	r0, r8
 800c9aa:	4649      	mov	r1, r9
 800c9ac:	f7f3 fcec 	bl	8000388 <__aeabi_dsub>
 800c9b0:	4632      	mov	r2, r6
 800c9b2:	463b      	mov	r3, r7
 800c9b4:	f7f3 fcea 	bl	800038c <__adddf3>
 800c9b8:	ed9d 7b00 	vldr	d7, [sp]
 800c9bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c9c0:	ed84 7b00 	vstr	d7, [r4]
 800c9c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9c8:	e757      	b.n	800c87a <__kernel_rem_pio2+0x51a>
 800c9ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c9ce:	f7f3 fcdd 	bl	800038c <__adddf3>
 800c9d2:	3d01      	subs	r5, #1
 800c9d4:	e75c      	b.n	800c890 <__kernel_rem_pio2+0x530>
 800c9d6:	9b04      	ldr	r3, [sp, #16]
 800c9d8:	9a04      	ldr	r2, [sp, #16]
 800c9da:	601f      	str	r7, [r3, #0]
 800c9dc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c9e0:	605c      	str	r4, [r3, #4]
 800c9e2:	609d      	str	r5, [r3, #8]
 800c9e4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c9e8:	60d3      	str	r3, [r2, #12]
 800c9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9ee:	6110      	str	r0, [r2, #16]
 800c9f0:	6153      	str	r3, [r2, #20]
 800c9f2:	e727      	b.n	800c844 <__kernel_rem_pio2+0x4e4>
 800c9f4:	41700000 	.word	0x41700000
 800c9f8:	3e700000 	.word	0x3e700000

0800c9fc <__kernel_rem_pio2f>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	ed2d 8b04 	vpush	{d8-d9}
 800ca04:	b0d9      	sub	sp, #356	; 0x164
 800ca06:	4688      	mov	r8, r1
 800ca08:	9002      	str	r0, [sp, #8]
 800ca0a:	49b8      	ldr	r1, [pc, #736]	; (800ccec <__kernel_rem_pio2f+0x2f0>)
 800ca0c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ca14:	9901      	ldr	r1, [sp, #4]
 800ca16:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800ca18:	f101 3bff 	add.w	fp, r1, #4294967295
 800ca1c:	1d11      	adds	r1, r2, #4
 800ca1e:	db25      	blt.n	800ca6c <__kernel_rem_pio2f+0x70>
 800ca20:	1ed0      	subs	r0, r2, #3
 800ca22:	bf48      	it	mi
 800ca24:	1d10      	addmi	r0, r2, #4
 800ca26:	10c0      	asrs	r0, r0, #3
 800ca28:	1c45      	adds	r5, r0, #1
 800ca2a:	00e9      	lsls	r1, r5, #3
 800ca2c:	eba0 070b 	sub.w	r7, r0, fp
 800ca30:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800ccfc <__kernel_rem_pio2f+0x300>
 800ca34:	9103      	str	r1, [sp, #12]
 800ca36:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ca3a:	eb0a 0c0b 	add.w	ip, sl, fp
 800ca3e:	ae1c      	add	r6, sp, #112	; 0x70
 800ca40:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800ca44:	2400      	movs	r4, #0
 800ca46:	4564      	cmp	r4, ip
 800ca48:	dd12      	ble.n	800ca70 <__kernel_rem_pio2f+0x74>
 800ca4a:	9901      	ldr	r1, [sp, #4]
 800ca4c:	ac1c      	add	r4, sp, #112	; 0x70
 800ca4e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800ca52:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800ca56:	f04f 0c00 	mov.w	ip, #0
 800ca5a:	45d4      	cmp	ip, sl
 800ca5c:	dc27      	bgt.n	800caae <__kernel_rem_pio2f+0xb2>
 800ca5e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ca62:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800ccfc <__kernel_rem_pio2f+0x300>
 800ca66:	4627      	mov	r7, r4
 800ca68:	2600      	movs	r6, #0
 800ca6a:	e016      	b.n	800ca9a <__kernel_rem_pio2f+0x9e>
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e7db      	b.n	800ca28 <__kernel_rem_pio2f+0x2c>
 800ca70:	42e7      	cmn	r7, r4
 800ca72:	bf5d      	ittte	pl
 800ca74:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800ca78:	ee07 1a90 	vmovpl	s15, r1
 800ca7c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ca80:	eef0 7a47 	vmovmi.f32	s15, s14
 800ca84:	ece6 7a01 	vstmia	r6!, {s15}
 800ca88:	3401      	adds	r4, #1
 800ca8a:	e7dc      	b.n	800ca46 <__kernel_rem_pio2f+0x4a>
 800ca8c:	ecfe 6a01 	vldmia	lr!, {s13}
 800ca90:	ed97 7a00 	vldr	s14, [r7]
 800ca94:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ca98:	3601      	adds	r6, #1
 800ca9a:	455e      	cmp	r6, fp
 800ca9c:	f1a7 0704 	sub.w	r7, r7, #4
 800caa0:	ddf4      	ble.n	800ca8c <__kernel_rem_pio2f+0x90>
 800caa2:	ece9 7a01 	vstmia	r9!, {s15}
 800caa6:	f10c 0c01 	add.w	ip, ip, #1
 800caaa:	3404      	adds	r4, #4
 800caac:	e7d5      	b.n	800ca5a <__kernel_rem_pio2f+0x5e>
 800caae:	a908      	add	r1, sp, #32
 800cab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cab4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800cab8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800ccf8 <__kernel_rem_pio2f+0x2fc>
 800cabc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800ccf4 <__kernel_rem_pio2f+0x2f8>
 800cac0:	9105      	str	r1, [sp, #20]
 800cac2:	9304      	str	r3, [sp, #16]
 800cac4:	4656      	mov	r6, sl
 800cac6:	00b3      	lsls	r3, r6, #2
 800cac8:	9306      	str	r3, [sp, #24]
 800caca:	ab58      	add	r3, sp, #352	; 0x160
 800cacc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cad0:	ac08      	add	r4, sp, #32
 800cad2:	ab44      	add	r3, sp, #272	; 0x110
 800cad4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800cad8:	46a4      	mov	ip, r4
 800cada:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cade:	4637      	mov	r7, r6
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	f1a0 0004 	sub.w	r0, r0, #4
 800cae6:	dc4a      	bgt.n	800cb7e <__kernel_rem_pio2f+0x182>
 800cae8:	4628      	mov	r0, r5
 800caea:	9207      	str	r2, [sp, #28]
 800caec:	f000 fa76 	bl	800cfdc <scalbnf>
 800caf0:	eeb0 8a40 	vmov.f32	s16, s0
 800caf4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800caf8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cafc:	f000 fb54 	bl	800d1a8 <floorf>
 800cb00:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800cb04:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	9a07      	ldr	r2, [sp, #28]
 800cb0c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cb10:	ee17 9a90 	vmov	r9, s15
 800cb14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb18:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cb1c:	dd41      	ble.n	800cba2 <__kernel_rem_pio2f+0x1a6>
 800cb1e:	f106 3cff 	add.w	ip, r6, #4294967295
 800cb22:	ab08      	add	r3, sp, #32
 800cb24:	f1c5 0e08 	rsb	lr, r5, #8
 800cb28:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800cb2c:	fa47 f00e 	asr.w	r0, r7, lr
 800cb30:	4481      	add	r9, r0
 800cb32:	fa00 f00e 	lsl.w	r0, r0, lr
 800cb36:	1a3f      	subs	r7, r7, r0
 800cb38:	f1c5 0007 	rsb	r0, r5, #7
 800cb3c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800cb40:	4107      	asrs	r7, r0
 800cb42:	2f00      	cmp	r7, #0
 800cb44:	dd3c      	ble.n	800cbc0 <__kernel_rem_pio2f+0x1c4>
 800cb46:	f04f 0e00 	mov.w	lr, #0
 800cb4a:	f109 0901 	add.w	r9, r9, #1
 800cb4e:	4671      	mov	r1, lr
 800cb50:	4576      	cmp	r6, lr
 800cb52:	dc67      	bgt.n	800cc24 <__kernel_rem_pio2f+0x228>
 800cb54:	2d00      	cmp	r5, #0
 800cb56:	dd03      	ble.n	800cb60 <__kernel_rem_pio2f+0x164>
 800cb58:	2d01      	cmp	r5, #1
 800cb5a:	d074      	beq.n	800cc46 <__kernel_rem_pio2f+0x24a>
 800cb5c:	2d02      	cmp	r5, #2
 800cb5e:	d07b      	beq.n	800cc58 <__kernel_rem_pio2f+0x25c>
 800cb60:	2f02      	cmp	r7, #2
 800cb62:	d12d      	bne.n	800cbc0 <__kernel_rem_pio2f+0x1c4>
 800cb64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cb68:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cb6c:	b341      	cbz	r1, 800cbc0 <__kernel_rem_pio2f+0x1c4>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	9207      	str	r2, [sp, #28]
 800cb72:	f000 fa33 	bl	800cfdc <scalbnf>
 800cb76:	9a07      	ldr	r2, [sp, #28]
 800cb78:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cb7c:	e020      	b.n	800cbc0 <__kernel_rem_pio2f+0x1c4>
 800cb7e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cb82:	3f01      	subs	r7, #1
 800cb84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb8c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cb90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb94:	ecac 0a01 	vstmia	ip!, {s0}
 800cb98:	ed90 0a00 	vldr	s0, [r0]
 800cb9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cba0:	e79e      	b.n	800cae0 <__kernel_rem_pio2f+0xe4>
 800cba2:	d105      	bne.n	800cbb0 <__kernel_rem_pio2f+0x1b4>
 800cba4:	1e70      	subs	r0, r6, #1
 800cba6:	ab08      	add	r3, sp, #32
 800cba8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800cbac:	11ff      	asrs	r7, r7, #7
 800cbae:	e7c8      	b.n	800cb42 <__kernel_rem_pio2f+0x146>
 800cbb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cbb4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbbc:	da30      	bge.n	800cc20 <__kernel_rem_pio2f+0x224>
 800cbbe:	2700      	movs	r7, #0
 800cbc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc8:	f040 809a 	bne.w	800cd00 <__kernel_rem_pio2f+0x304>
 800cbcc:	1e74      	subs	r4, r6, #1
 800cbce:	46a4      	mov	ip, r4
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	45d4      	cmp	ip, sl
 800cbd4:	da47      	bge.n	800cc66 <__kernel_rem_pio2f+0x26a>
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	d063      	beq.n	800cca2 <__kernel_rem_pio2f+0x2a6>
 800cbda:	ab08      	add	r3, sp, #32
 800cbdc:	3d08      	subs	r5, #8
 800cbde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d07f      	beq.n	800cce6 <__kernel_rem_pio2f+0x2ea>
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cbec:	f000 f9f6 	bl	800cfdc <scalbnf>
 800cbf0:	1c63      	adds	r3, r4, #1
 800cbf2:	aa44      	add	r2, sp, #272	; 0x110
 800cbf4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ccf8 <__kernel_rem_pio2f+0x2fc>
 800cbf8:	0099      	lsls	r1, r3, #2
 800cbfa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cbfe:	4623      	mov	r3, r4
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f280 80ad 	bge.w	800cd60 <__kernel_rem_pio2f+0x364>
 800cc06:	4623      	mov	r3, r4
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f2c0 80cb 	blt.w	800cda4 <__kernel_rem_pio2f+0x3a8>
 800cc0e:	aa44      	add	r2, sp, #272	; 0x110
 800cc10:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800cc14:	4e36      	ldr	r6, [pc, #216]	; (800ccf0 <__kernel_rem_pio2f+0x2f4>)
 800cc16:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ccfc <__kernel_rem_pio2f+0x300>
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	1ae2      	subs	r2, r4, r3
 800cc1e:	e0b6      	b.n	800cd8e <__kernel_rem_pio2f+0x392>
 800cc20:	2702      	movs	r7, #2
 800cc22:	e790      	b.n	800cb46 <__kernel_rem_pio2f+0x14a>
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	b949      	cbnz	r1, 800cc3c <__kernel_rem_pio2f+0x240>
 800cc28:	b118      	cbz	r0, 800cc32 <__kernel_rem_pio2f+0x236>
 800cc2a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800cc2e:	6020      	str	r0, [r4, #0]
 800cc30:	2001      	movs	r0, #1
 800cc32:	f10e 0e01 	add.w	lr, lr, #1
 800cc36:	3404      	adds	r4, #4
 800cc38:	4601      	mov	r1, r0
 800cc3a:	e789      	b.n	800cb50 <__kernel_rem_pio2f+0x154>
 800cc3c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800cc40:	6020      	str	r0, [r4, #0]
 800cc42:	4608      	mov	r0, r1
 800cc44:	e7f5      	b.n	800cc32 <__kernel_rem_pio2f+0x236>
 800cc46:	1e74      	subs	r4, r6, #1
 800cc48:	ab08      	add	r3, sp, #32
 800cc4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cc4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cc52:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cc56:	e783      	b.n	800cb60 <__kernel_rem_pio2f+0x164>
 800cc58:	1e74      	subs	r4, r6, #1
 800cc5a:	ab08      	add	r3, sp, #32
 800cc5c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cc60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cc64:	e7f5      	b.n	800cc52 <__kernel_rem_pio2f+0x256>
 800cc66:	ab08      	add	r3, sp, #32
 800cc68:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800cc6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cc70:	4301      	orrs	r1, r0
 800cc72:	e7ae      	b.n	800cbd2 <__kernel_rem_pio2f+0x1d6>
 800cc74:	3001      	adds	r0, #1
 800cc76:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800cc7a:	2f00      	cmp	r7, #0
 800cc7c:	d0fa      	beq.n	800cc74 <__kernel_rem_pio2f+0x278>
 800cc7e:	9b06      	ldr	r3, [sp, #24]
 800cc80:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800cc84:	eb0d 0403 	add.w	r4, sp, r3
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	18f7      	adds	r7, r6, r3
 800cc8c:	ab1c      	add	r3, sp, #112	; 0x70
 800cc8e:	f106 0c01 	add.w	ip, r6, #1
 800cc92:	3c4c      	subs	r4, #76	; 0x4c
 800cc94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc98:	4430      	add	r0, r6
 800cc9a:	4560      	cmp	r0, ip
 800cc9c:	da04      	bge.n	800cca8 <__kernel_rem_pio2f+0x2ac>
 800cc9e:	4606      	mov	r6, r0
 800cca0:	e711      	b.n	800cac6 <__kernel_rem_pio2f+0xca>
 800cca2:	9c05      	ldr	r4, [sp, #20]
 800cca4:	2001      	movs	r0, #1
 800cca6:	e7e6      	b.n	800cc76 <__kernel_rem_pio2f+0x27a>
 800cca8:	9b04      	ldr	r3, [sp, #16]
 800ccaa:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ccae:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ccb2:	9306      	str	r3, [sp, #24]
 800ccb4:	ee07 3a90 	vmov	s15, r3
 800ccb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccbc:	2600      	movs	r6, #0
 800ccbe:	ece7 7a01 	vstmia	r7!, {s15}
 800ccc2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ccfc <__kernel_rem_pio2f+0x300>
 800ccc6:	46b9      	mov	r9, r7
 800ccc8:	455e      	cmp	r6, fp
 800ccca:	dd04      	ble.n	800ccd6 <__kernel_rem_pio2f+0x2da>
 800cccc:	ece4 7a01 	vstmia	r4!, {s15}
 800ccd0:	f10c 0c01 	add.w	ip, ip, #1
 800ccd4:	e7e1      	b.n	800cc9a <__kernel_rem_pio2f+0x29e>
 800ccd6:	ecfe 6a01 	vldmia	lr!, {s13}
 800ccda:	ed39 7a01 	vldmdb	r9!, {s14}
 800ccde:	3601      	adds	r6, #1
 800cce0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cce4:	e7f0      	b.n	800ccc8 <__kernel_rem_pio2f+0x2cc>
 800cce6:	3c01      	subs	r4, #1
 800cce8:	e777      	b.n	800cbda <__kernel_rem_pio2f+0x1de>
 800ccea:	bf00      	nop
 800ccec:	08021014 	.word	0x08021014
 800ccf0:	08020fe8 	.word	0x08020fe8
 800ccf4:	43800000 	.word	0x43800000
 800ccf8:	3b800000 	.word	0x3b800000
 800ccfc:	00000000 	.word	0x00000000
 800cd00:	9b03      	ldr	r3, [sp, #12]
 800cd02:	eeb0 0a48 	vmov.f32	s0, s16
 800cd06:	1a98      	subs	r0, r3, r2
 800cd08:	f000 f968 	bl	800cfdc <scalbnf>
 800cd0c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ccf4 <__kernel_rem_pio2f+0x2f8>
 800cd10:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd18:	db19      	blt.n	800cd4e <__kernel_rem_pio2f+0x352>
 800cd1a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ccf8 <__kernel_rem_pio2f+0x2fc>
 800cd1e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cd22:	aa08      	add	r2, sp, #32
 800cd24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd28:	1c74      	adds	r4, r6, #1
 800cd2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd2e:	3508      	adds	r5, #8
 800cd30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cd34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cd3c:	ee10 3a10 	vmov	r3, s0
 800cd40:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cd44:	ee17 3a90 	vmov	r3, s15
 800cd48:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cd4c:	e74b      	b.n	800cbe6 <__kernel_rem_pio2f+0x1ea>
 800cd4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cd52:	aa08      	add	r2, sp, #32
 800cd54:	ee10 3a10 	vmov	r3, s0
 800cd58:	4634      	mov	r4, r6
 800cd5a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cd5e:	e742      	b.n	800cbe6 <__kernel_rem_pio2f+0x1ea>
 800cd60:	a808      	add	r0, sp, #32
 800cd62:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cd66:	9001      	str	r0, [sp, #4]
 800cd68:	ee07 0a90 	vmov	s15, r0
 800cd6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd70:	3b01      	subs	r3, #1
 800cd72:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cd76:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cd7a:	ed62 7a01 	vstmdb	r2!, {s15}
 800cd7e:	e73f      	b.n	800cc00 <__kernel_rem_pio2f+0x204>
 800cd80:	ecf6 6a01 	vldmia	r6!, {s13}
 800cd84:	ecb5 7a01 	vldmia	r5!, {s14}
 800cd88:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	4550      	cmp	r0, sl
 800cd90:	dc01      	bgt.n	800cd96 <__kernel_rem_pio2f+0x39a>
 800cd92:	4290      	cmp	r0, r2
 800cd94:	ddf4      	ble.n	800cd80 <__kernel_rem_pio2f+0x384>
 800cd96:	a858      	add	r0, sp, #352	; 0x160
 800cd98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cd9c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800cda0:	3b01      	subs	r3, #1
 800cda2:	e731      	b.n	800cc08 <__kernel_rem_pio2f+0x20c>
 800cda4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	dc09      	bgt.n	800cdbe <__kernel_rem_pio2f+0x3c2>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	dc2b      	bgt.n	800ce06 <__kernel_rem_pio2f+0x40a>
 800cdae:	d044      	beq.n	800ce3a <__kernel_rem_pio2f+0x43e>
 800cdb0:	f009 0007 	and.w	r0, r9, #7
 800cdb4:	b059      	add	sp, #356	; 0x164
 800cdb6:	ecbd 8b04 	vpop	{d8-d9}
 800cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d1f5      	bne.n	800cdb0 <__kernel_rem_pio2f+0x3b4>
 800cdc4:	aa30      	add	r2, sp, #192	; 0xc0
 800cdc6:	1f0b      	subs	r3, r1, #4
 800cdc8:	4413      	add	r3, r2
 800cdca:	461a      	mov	r2, r3
 800cdcc:	4620      	mov	r0, r4
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	f1a2 0204 	sub.w	r2, r2, #4
 800cdd4:	dc52      	bgt.n	800ce7c <__kernel_rem_pio2f+0x480>
 800cdd6:	4622      	mov	r2, r4
 800cdd8:	2a01      	cmp	r2, #1
 800cdda:	f1a3 0304 	sub.w	r3, r3, #4
 800cdde:	dc5d      	bgt.n	800ce9c <__kernel_rem_pio2f+0x4a0>
 800cde0:	ab30      	add	r3, sp, #192	; 0xc0
 800cde2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ccfc <__kernel_rem_pio2f+0x300>
 800cde6:	440b      	add	r3, r1
 800cde8:	2c01      	cmp	r4, #1
 800cdea:	dc67      	bgt.n	800cebc <__kernel_rem_pio2f+0x4c0>
 800cdec:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cdf0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800cdf4:	2f00      	cmp	r7, #0
 800cdf6:	d167      	bne.n	800cec8 <__kernel_rem_pio2f+0x4cc>
 800cdf8:	edc8 6a00 	vstr	s13, [r8]
 800cdfc:	ed88 7a01 	vstr	s14, [r8, #4]
 800ce00:	edc8 7a02 	vstr	s15, [r8, #8]
 800ce04:	e7d4      	b.n	800cdb0 <__kernel_rem_pio2f+0x3b4>
 800ce06:	ab30      	add	r3, sp, #192	; 0xc0
 800ce08:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800ccfc <__kernel_rem_pio2f+0x300>
 800ce0c:	440b      	add	r3, r1
 800ce0e:	4622      	mov	r2, r4
 800ce10:	2a00      	cmp	r2, #0
 800ce12:	da24      	bge.n	800ce5e <__kernel_rem_pio2f+0x462>
 800ce14:	b34f      	cbz	r7, 800ce6a <__kernel_rem_pio2f+0x46e>
 800ce16:	eef1 7a47 	vneg.f32	s15, s14
 800ce1a:	edc8 7a00 	vstr	s15, [r8]
 800ce1e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ce22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce26:	aa31      	add	r2, sp, #196	; 0xc4
 800ce28:	2301      	movs	r3, #1
 800ce2a:	429c      	cmp	r4, r3
 800ce2c:	da20      	bge.n	800ce70 <__kernel_rem_pio2f+0x474>
 800ce2e:	b10f      	cbz	r7, 800ce34 <__kernel_rem_pio2f+0x438>
 800ce30:	eef1 7a67 	vneg.f32	s15, s15
 800ce34:	edc8 7a01 	vstr	s15, [r8, #4]
 800ce38:	e7ba      	b.n	800cdb0 <__kernel_rem_pio2f+0x3b4>
 800ce3a:	ab30      	add	r3, sp, #192	; 0xc0
 800ce3c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800ccfc <__kernel_rem_pio2f+0x300>
 800ce40:	440b      	add	r3, r1
 800ce42:	2c00      	cmp	r4, #0
 800ce44:	da05      	bge.n	800ce52 <__kernel_rem_pio2f+0x456>
 800ce46:	b10f      	cbz	r7, 800ce4c <__kernel_rem_pio2f+0x450>
 800ce48:	eef1 7a67 	vneg.f32	s15, s15
 800ce4c:	edc8 7a00 	vstr	s15, [r8]
 800ce50:	e7ae      	b.n	800cdb0 <__kernel_rem_pio2f+0x3b4>
 800ce52:	ed33 7a01 	vldmdb	r3!, {s14}
 800ce56:	3c01      	subs	r4, #1
 800ce58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce5c:	e7f1      	b.n	800ce42 <__kernel_rem_pio2f+0x446>
 800ce5e:	ed73 7a01 	vldmdb	r3!, {s15}
 800ce62:	3a01      	subs	r2, #1
 800ce64:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce68:	e7d2      	b.n	800ce10 <__kernel_rem_pio2f+0x414>
 800ce6a:	eef0 7a47 	vmov.f32	s15, s14
 800ce6e:	e7d4      	b.n	800ce1a <__kernel_rem_pio2f+0x41e>
 800ce70:	ecb2 7a01 	vldmia	r2!, {s14}
 800ce74:	3301      	adds	r3, #1
 800ce76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce7a:	e7d6      	b.n	800ce2a <__kernel_rem_pio2f+0x42e>
 800ce7c:	edd2 7a00 	vldr	s15, [r2]
 800ce80:	edd2 6a01 	vldr	s13, [r2, #4]
 800ce84:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ce88:	3801      	subs	r0, #1
 800ce8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce8e:	ed82 7a00 	vstr	s14, [r2]
 800ce92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce96:	edc2 7a01 	vstr	s15, [r2, #4]
 800ce9a:	e798      	b.n	800cdce <__kernel_rem_pio2f+0x3d2>
 800ce9c:	edd3 7a00 	vldr	s15, [r3]
 800cea0:	edd3 6a01 	vldr	s13, [r3, #4]
 800cea4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cea8:	3a01      	subs	r2, #1
 800ceaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ceae:	ed83 7a00 	vstr	s14, [r3]
 800ceb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceb6:	edc3 7a01 	vstr	s15, [r3, #4]
 800ceba:	e78d      	b.n	800cdd8 <__kernel_rem_pio2f+0x3dc>
 800cebc:	ed33 7a01 	vldmdb	r3!, {s14}
 800cec0:	3c01      	subs	r4, #1
 800cec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cec6:	e78f      	b.n	800cde8 <__kernel_rem_pio2f+0x3ec>
 800cec8:	eef1 6a66 	vneg.f32	s13, s13
 800cecc:	eeb1 7a47 	vneg.f32	s14, s14
 800ced0:	edc8 6a00 	vstr	s13, [r8]
 800ced4:	ed88 7a01 	vstr	s14, [r8, #4]
 800ced8:	eef1 7a67 	vneg.f32	s15, s15
 800cedc:	e790      	b.n	800ce00 <__kernel_rem_pio2f+0x404>
 800cede:	bf00      	nop

0800cee0 <scalbn>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	ec55 4b10 	vmov	r4, r5, d0
 800cee6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ceea:	4606      	mov	r6, r0
 800ceec:	462b      	mov	r3, r5
 800ceee:	b999      	cbnz	r1, 800cf18 <scalbn+0x38>
 800cef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cef4:	4323      	orrs	r3, r4
 800cef6:	d03f      	beq.n	800cf78 <scalbn+0x98>
 800cef8:	4b35      	ldr	r3, [pc, #212]	; (800cfd0 <scalbn+0xf0>)
 800cefa:	4629      	mov	r1, r5
 800cefc:	ee10 0a10 	vmov	r0, s0
 800cf00:	2200      	movs	r2, #0
 800cf02:	f7f3 fbf9 	bl	80006f8 <__aeabi_dmul>
 800cf06:	4b33      	ldr	r3, [pc, #204]	; (800cfd4 <scalbn+0xf4>)
 800cf08:	429e      	cmp	r6, r3
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	da10      	bge.n	800cf32 <scalbn+0x52>
 800cf10:	a327      	add	r3, pc, #156	; (adr r3, 800cfb0 <scalbn+0xd0>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	e01f      	b.n	800cf58 <scalbn+0x78>
 800cf18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cf1c:	4291      	cmp	r1, r2
 800cf1e:	d10c      	bne.n	800cf3a <scalbn+0x5a>
 800cf20:	ee10 2a10 	vmov	r2, s0
 800cf24:	4620      	mov	r0, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	f7f3 fa30 	bl	800038c <__adddf3>
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	460d      	mov	r5, r1
 800cf30:	e022      	b.n	800cf78 <scalbn+0x98>
 800cf32:	460b      	mov	r3, r1
 800cf34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cf38:	3936      	subs	r1, #54	; 0x36
 800cf3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cf3e:	4296      	cmp	r6, r2
 800cf40:	dd0d      	ble.n	800cf5e <scalbn+0x7e>
 800cf42:	2d00      	cmp	r5, #0
 800cf44:	a11c      	add	r1, pc, #112	; (adr r1, 800cfb8 <scalbn+0xd8>)
 800cf46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf4a:	da02      	bge.n	800cf52 <scalbn+0x72>
 800cf4c:	a11c      	add	r1, pc, #112	; (adr r1, 800cfc0 <scalbn+0xe0>)
 800cf4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf52:	a319      	add	r3, pc, #100	; (adr r3, 800cfb8 <scalbn+0xd8>)
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	f7f3 fbce 	bl	80006f8 <__aeabi_dmul>
 800cf5c:	e7e6      	b.n	800cf2c <scalbn+0x4c>
 800cf5e:	1872      	adds	r2, r6, r1
 800cf60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf64:	428a      	cmp	r2, r1
 800cf66:	dcec      	bgt.n	800cf42 <scalbn+0x62>
 800cf68:	2a00      	cmp	r2, #0
 800cf6a:	dd08      	ble.n	800cf7e <scalbn+0x9e>
 800cf6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf78:	ec45 4b10 	vmov	d0, r4, r5
 800cf7c:	bd70      	pop	{r4, r5, r6, pc}
 800cf7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cf82:	da08      	bge.n	800cf96 <scalbn+0xb6>
 800cf84:	2d00      	cmp	r5, #0
 800cf86:	a10a      	add	r1, pc, #40	; (adr r1, 800cfb0 <scalbn+0xd0>)
 800cf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf8c:	dac0      	bge.n	800cf10 <scalbn+0x30>
 800cf8e:	a10e      	add	r1, pc, #56	; (adr r1, 800cfc8 <scalbn+0xe8>)
 800cf90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf94:	e7bc      	b.n	800cf10 <scalbn+0x30>
 800cf96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf9a:	3236      	adds	r2, #54	; 0x36
 800cf9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfa0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	4b0c      	ldr	r3, [pc, #48]	; (800cfd8 <scalbn+0xf8>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	e7d5      	b.n	800cf58 <scalbn+0x78>
 800cfac:	f3af 8000 	nop.w
 800cfb0:	c2f8f359 	.word	0xc2f8f359
 800cfb4:	01a56e1f 	.word	0x01a56e1f
 800cfb8:	8800759c 	.word	0x8800759c
 800cfbc:	7e37e43c 	.word	0x7e37e43c
 800cfc0:	8800759c 	.word	0x8800759c
 800cfc4:	fe37e43c 	.word	0xfe37e43c
 800cfc8:	c2f8f359 	.word	0xc2f8f359
 800cfcc:	81a56e1f 	.word	0x81a56e1f
 800cfd0:	43500000 	.word	0x43500000
 800cfd4:	ffff3cb0 	.word	0xffff3cb0
 800cfd8:	3c900000 	.word	0x3c900000

0800cfdc <scalbnf>:
 800cfdc:	ee10 3a10 	vmov	r3, s0
 800cfe0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cfe4:	d02b      	beq.n	800d03e <scalbnf+0x62>
 800cfe6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cfea:	d302      	bcc.n	800cff2 <scalbnf+0x16>
 800cfec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cff0:	4770      	bx	lr
 800cff2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cff6:	d123      	bne.n	800d040 <scalbnf+0x64>
 800cff8:	4b24      	ldr	r3, [pc, #144]	; (800d08c <scalbnf+0xb0>)
 800cffa:	eddf 7a25 	vldr	s15, [pc, #148]	; 800d090 <scalbnf+0xb4>
 800cffe:	4298      	cmp	r0, r3
 800d000:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d004:	db17      	blt.n	800d036 <scalbnf+0x5a>
 800d006:	ee10 3a10 	vmov	r3, s0
 800d00a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d00e:	3a19      	subs	r2, #25
 800d010:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d014:	4288      	cmp	r0, r1
 800d016:	dd15      	ble.n	800d044 <scalbnf+0x68>
 800d018:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d094 <scalbnf+0xb8>
 800d01c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800d098 <scalbnf+0xbc>
 800d020:	ee10 3a10 	vmov	r3, s0
 800d024:	eeb0 7a67 	vmov.f32	s14, s15
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bfb8      	it	lt
 800d02c:	eef0 7a66 	vmovlt.f32	s15, s13
 800d030:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d034:	4770      	bx	lr
 800d036:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d09c <scalbnf+0xc0>
 800d03a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d03e:	4770      	bx	lr
 800d040:	0dd2      	lsrs	r2, r2, #23
 800d042:	e7e5      	b.n	800d010 <scalbnf+0x34>
 800d044:	4410      	add	r0, r2
 800d046:	28fe      	cmp	r0, #254	; 0xfe
 800d048:	dce6      	bgt.n	800d018 <scalbnf+0x3c>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	dd06      	ble.n	800d05c <scalbnf+0x80>
 800d04e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d052:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d056:	ee00 3a10 	vmov	s0, r3
 800d05a:	4770      	bx	lr
 800d05c:	f110 0f16 	cmn.w	r0, #22
 800d060:	da09      	bge.n	800d076 <scalbnf+0x9a>
 800d062:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d09c <scalbnf+0xc0>
 800d066:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800d0a0 <scalbnf+0xc4>
 800d06a:	ee10 3a10 	vmov	r3, s0
 800d06e:	eeb0 7a67 	vmov.f32	s14, s15
 800d072:	2b00      	cmp	r3, #0
 800d074:	e7d9      	b.n	800d02a <scalbnf+0x4e>
 800d076:	3019      	adds	r0, #25
 800d078:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d07c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d080:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800d0a4 <scalbnf+0xc8>
 800d084:	ee07 3a90 	vmov	s15, r3
 800d088:	e7d7      	b.n	800d03a <scalbnf+0x5e>
 800d08a:	bf00      	nop
 800d08c:	ffff3cb0 	.word	0xffff3cb0
 800d090:	4c000000 	.word	0x4c000000
 800d094:	7149f2ca 	.word	0x7149f2ca
 800d098:	f149f2ca 	.word	0xf149f2ca
 800d09c:	0da24260 	.word	0x0da24260
 800d0a0:	8da24260 	.word	0x8da24260
 800d0a4:	33000000 	.word	0x33000000

0800d0a8 <floor>:
 800d0a8:	ec51 0b10 	vmov	r0, r1, d0
 800d0ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d0b8:	2e13      	cmp	r6, #19
 800d0ba:	ee10 5a10 	vmov	r5, s0
 800d0be:	ee10 8a10 	vmov	r8, s0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	dc31      	bgt.n	800d12a <floor+0x82>
 800d0c6:	2e00      	cmp	r6, #0
 800d0c8:	da14      	bge.n	800d0f4 <floor+0x4c>
 800d0ca:	a333      	add	r3, pc, #204	; (adr r3, 800d198 <floor+0xf0>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	f7f3 f95c 	bl	800038c <__adddf3>
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f7f3 fd9e 	bl	8000c18 <__aeabi_dcmpgt>
 800d0dc:	b138      	cbz	r0, 800d0ee <floor+0x46>
 800d0de:	2c00      	cmp	r4, #0
 800d0e0:	da53      	bge.n	800d18a <floor+0xe2>
 800d0e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d0e6:	4325      	orrs	r5, r4
 800d0e8:	d052      	beq.n	800d190 <floor+0xe8>
 800d0ea:	4c2d      	ldr	r4, [pc, #180]	; (800d1a0 <floor+0xf8>)
 800d0ec:	2500      	movs	r5, #0
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	e024      	b.n	800d13e <floor+0x96>
 800d0f4:	4f2b      	ldr	r7, [pc, #172]	; (800d1a4 <floor+0xfc>)
 800d0f6:	4137      	asrs	r7, r6
 800d0f8:	ea01 0307 	and.w	r3, r1, r7
 800d0fc:	4303      	orrs	r3, r0
 800d0fe:	d01e      	beq.n	800d13e <floor+0x96>
 800d100:	a325      	add	r3, pc, #148	; (adr r3, 800d198 <floor+0xf0>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	f7f3 f941 	bl	800038c <__adddf3>
 800d10a:	2200      	movs	r2, #0
 800d10c:	2300      	movs	r3, #0
 800d10e:	f7f3 fd83 	bl	8000c18 <__aeabi_dcmpgt>
 800d112:	2800      	cmp	r0, #0
 800d114:	d0eb      	beq.n	800d0ee <floor+0x46>
 800d116:	2c00      	cmp	r4, #0
 800d118:	bfbe      	ittt	lt
 800d11a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d11e:	4133      	asrlt	r3, r6
 800d120:	18e4      	addlt	r4, r4, r3
 800d122:	ea24 0407 	bic.w	r4, r4, r7
 800d126:	2500      	movs	r5, #0
 800d128:	e7e1      	b.n	800d0ee <floor+0x46>
 800d12a:	2e33      	cmp	r6, #51	; 0x33
 800d12c:	dd0b      	ble.n	800d146 <floor+0x9e>
 800d12e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d132:	d104      	bne.n	800d13e <floor+0x96>
 800d134:	ee10 2a10 	vmov	r2, s0
 800d138:	460b      	mov	r3, r1
 800d13a:	f7f3 f927 	bl	800038c <__adddf3>
 800d13e:	ec41 0b10 	vmov	d0, r0, r1
 800d142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d146:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d14a:	f04f 37ff 	mov.w	r7, #4294967295
 800d14e:	40df      	lsrs	r7, r3
 800d150:	4238      	tst	r0, r7
 800d152:	d0f4      	beq.n	800d13e <floor+0x96>
 800d154:	a310      	add	r3, pc, #64	; (adr r3, 800d198 <floor+0xf0>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	f7f3 f917 	bl	800038c <__adddf3>
 800d15e:	2200      	movs	r2, #0
 800d160:	2300      	movs	r3, #0
 800d162:	f7f3 fd59 	bl	8000c18 <__aeabi_dcmpgt>
 800d166:	2800      	cmp	r0, #0
 800d168:	d0c1      	beq.n	800d0ee <floor+0x46>
 800d16a:	2c00      	cmp	r4, #0
 800d16c:	da0a      	bge.n	800d184 <floor+0xdc>
 800d16e:	2e14      	cmp	r6, #20
 800d170:	d101      	bne.n	800d176 <floor+0xce>
 800d172:	3401      	adds	r4, #1
 800d174:	e006      	b.n	800d184 <floor+0xdc>
 800d176:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d17a:	2301      	movs	r3, #1
 800d17c:	40b3      	lsls	r3, r6
 800d17e:	441d      	add	r5, r3
 800d180:	45a8      	cmp	r8, r5
 800d182:	d8f6      	bhi.n	800d172 <floor+0xca>
 800d184:	ea25 0507 	bic.w	r5, r5, r7
 800d188:	e7b1      	b.n	800d0ee <floor+0x46>
 800d18a:	2500      	movs	r5, #0
 800d18c:	462c      	mov	r4, r5
 800d18e:	e7ae      	b.n	800d0ee <floor+0x46>
 800d190:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d194:	e7ab      	b.n	800d0ee <floor+0x46>
 800d196:	bf00      	nop
 800d198:	8800759c 	.word	0x8800759c
 800d19c:	7e37e43c 	.word	0x7e37e43c
 800d1a0:	bff00000 	.word	0xbff00000
 800d1a4:	000fffff 	.word	0x000fffff

0800d1a8 <floorf>:
 800d1a8:	ee10 3a10 	vmov	r3, s0
 800d1ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d1b0:	3a7f      	subs	r2, #127	; 0x7f
 800d1b2:	2a16      	cmp	r2, #22
 800d1b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d1b8:	dc2a      	bgt.n	800d210 <floorf+0x68>
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	da11      	bge.n	800d1e2 <floorf+0x3a>
 800d1be:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d220 <floorf+0x78>
 800d1c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d1c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ce:	dd05      	ble.n	800d1dc <floorf+0x34>
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	da23      	bge.n	800d21c <floorf+0x74>
 800d1d4:	4a13      	ldr	r2, [pc, #76]	; (800d224 <floorf+0x7c>)
 800d1d6:	2900      	cmp	r1, #0
 800d1d8:	bf18      	it	ne
 800d1da:	4613      	movne	r3, r2
 800d1dc:	ee00 3a10 	vmov	s0, r3
 800d1e0:	4770      	bx	lr
 800d1e2:	4911      	ldr	r1, [pc, #68]	; (800d228 <floorf+0x80>)
 800d1e4:	4111      	asrs	r1, r2
 800d1e6:	420b      	tst	r3, r1
 800d1e8:	d0fa      	beq.n	800d1e0 <floorf+0x38>
 800d1ea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d220 <floorf+0x78>
 800d1ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d1f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fa:	ddef      	ble.n	800d1dc <floorf+0x34>
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	bfbe      	ittt	lt
 800d200:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d204:	fa40 f202 	asrlt.w	r2, r0, r2
 800d208:	189b      	addlt	r3, r3, r2
 800d20a:	ea23 0301 	bic.w	r3, r3, r1
 800d20e:	e7e5      	b.n	800d1dc <floorf+0x34>
 800d210:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d214:	d3e4      	bcc.n	800d1e0 <floorf+0x38>
 800d216:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d21a:	4770      	bx	lr
 800d21c:	2300      	movs	r3, #0
 800d21e:	e7dd      	b.n	800d1dc <floorf+0x34>
 800d220:	7149f2ca 	.word	0x7149f2ca
 800d224:	bf800000 	.word	0xbf800000
 800d228:	007fffff 	.word	0x007fffff

0800d22c <_init>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	bf00      	nop
 800d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d232:	bc08      	pop	{r3}
 800d234:	469e      	mov	lr, r3
 800d236:	4770      	bx	lr

0800d238 <_fini>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	bf00      	nop
 800d23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23e:	bc08      	pop	{r3}
 800d240:	469e      	mov	lr, r3
 800d242:	4770      	bx	lr
